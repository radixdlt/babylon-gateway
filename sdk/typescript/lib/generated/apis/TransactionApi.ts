/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  TransactionCommittedDetailsRequest,
  TransactionCommittedDetailsResponse,
  TransactionConstructionResponse,
  TransactionRecentRequest,
  TransactionRecentResponse,
  TransactionStatusRequest,
  TransactionStatusResponse,
  TransactionSubmitRequest,
  TransactionSubmitResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TransactionCommittedDetailsRequestFromJSON,
    TransactionCommittedDetailsRequestToJSON,
    TransactionCommittedDetailsResponseFromJSON,
    TransactionCommittedDetailsResponseToJSON,
    TransactionConstructionResponseFromJSON,
    TransactionConstructionResponseToJSON,
    TransactionRecentRequestFromJSON,
    TransactionRecentRequestToJSON,
    TransactionRecentResponseFromJSON,
    TransactionRecentResponseToJSON,
    TransactionStatusRequestFromJSON,
    TransactionStatusRequestToJSON,
    TransactionStatusResponseFromJSON,
    TransactionStatusResponseToJSON,
    TransactionSubmitRequestFromJSON,
    TransactionSubmitRequestToJSON,
    TransactionSubmitResponseFromJSON,
    TransactionSubmitResponseToJSON,
} from '../models';

export interface TransactionCommittedDetailsOperationRequest {
    transactionCommittedDetailsRequest: TransactionCommittedDetailsRequest;
}

export interface TransactionPreviewRequest {
    body: object;
}

export interface TransactionRecentOperationRequest {
    transactionRecentRequest: TransactionRecentRequest;
}

export interface TransactionStatusOperationRequest {
    transactionStatusRequest: TransactionStatusRequest;
}

export interface TransactionSubmitOperationRequest {
    transactionSubmitRequest: TransactionSubmitRequest;
}

/**
 * 
 */
export class TransactionApi extends runtime.BaseAPI {

    /**
     * Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren\'t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a `TransactionNotFoundError`. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a `TransactionNotFoundError`. 
     * Transaction Committed Details
     */
    async transactionCommittedDetailsRaw(requestParameters: TransactionCommittedDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionCommittedDetailsResponse>> {
        if (requestParameters.transactionCommittedDetailsRequest === null || requestParameters.transactionCommittedDetailsRequest === undefined) {
            throw new runtime.RequiredError('transactionCommittedDetailsRequest','Required parameter requestParameters.transactionCommittedDetailsRequest was null or undefined when calling transactionCommittedDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction/committed-details`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionCommittedDetailsRequestToJSON(requestParameters.transactionCommittedDetailsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionCommittedDetailsResponseFromJSON(jsonValue));
    }

    /**
     * Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren\'t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a `TransactionNotFoundError`. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a `TransactionNotFoundError`. 
     * Transaction Committed Details
     */
    async transactionCommittedDetails(requestParameters: TransactionCommittedDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionCommittedDetailsResponse> {
        const response = await this.transactionCommittedDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async transactionConstructionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionConstructionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transaction/construction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionConstructionResponseFromJSON(jsonValue));
    }

    /**
     */
    async transactionConstruction(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionConstructionResponse> {
        const response = await this.transactionConstructionRaw(initOverrides);
        return await response.value();
    }

    /**
     * Previews transaction against the network. 
     * Preview Transaction
     */
    async transactionPreviewRaw(requestParameters: TransactionPreviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling transactionPreview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction/preview`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Previews transaction against the network. 
     * Preview Transaction
     */
    async transactionPreview(requestParameters: TransactionPreviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.transactionPreviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns user-initiated transactions which have been successfully committed to the ledger. The transactions are returned in a paginated format, ordered by most recent. 
     * Get Recent Transactions
     */
    async transactionRecentRaw(requestParameters: TransactionRecentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionRecentResponse>> {
        if (requestParameters.transactionRecentRequest === null || requestParameters.transactionRecentRequest === undefined) {
            throw new runtime.RequiredError('transactionRecentRequest','Required parameter requestParameters.transactionRecentRequest was null or undefined when calling transactionRecent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction/recent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionRecentRequestToJSON(requestParameters.transactionRecentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionRecentResponseFromJSON(jsonValue));
    }

    /**
     * Returns user-initiated transactions which have been successfully committed to the ledger. The transactions are returned in a paginated format, ordered by most recent. 
     * Get Recent Transactions
     */
    async transactionRecent(requestParameters: TransactionRecentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionRecentResponse> {
        const response = await this.transactionRecentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Transaction Status
     */
    async transactionStatusRaw(requestParameters: TransactionStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionStatusResponse>> {
        if (requestParameters.transactionStatusRequest === null || requestParameters.transactionStatusRequest === undefined) {
            throw new runtime.RequiredError('transactionStatusRequest','Required parameter requestParameters.transactionStatusRequest was null or undefined when calling transactionStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction/status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionStatusRequestToJSON(requestParameters.transactionStatusRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionStatusResponseFromJSON(jsonValue));
    }

    /**
     * Transaction Status
     */
    async transactionStatus(requestParameters: TransactionStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionStatusResponse> {
        const response = await this.transactionStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submits a signed transaction payload to the network. The transaction identifier from finalize or submit can then be used to track the transaction status. 
     * Submit Transaction
     */
    async transactionSubmitRaw(requestParameters: TransactionSubmitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionSubmitResponse>> {
        if (requestParameters.transactionSubmitRequest === null || requestParameters.transactionSubmitRequest === undefined) {
            throw new runtime.RequiredError('transactionSubmitRequest','Required parameter requestParameters.transactionSubmitRequest was null or undefined when calling transactionSubmit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction/submit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionSubmitRequestToJSON(requestParameters.transactionSubmitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionSubmitResponseFromJSON(jsonValue));
    }

    /**
     * Submits a signed transaction payload to the network. The transaction identifier from finalize or submit can then be used to track the transaction status. 
     * Submit Transaction
     */
    async transactionSubmit(requestParameters: TransactionSubmitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionSubmitResponse> {
        const response = await this.transactionSubmitRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
