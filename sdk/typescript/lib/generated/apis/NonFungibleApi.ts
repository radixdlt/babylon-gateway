/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  NonFungibleDataRequest,
  NonFungibleDataResponse,
  NonFungibleIdsRequest,
  NonFungibleIdsResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    NonFungibleDataRequestFromJSON,
    NonFungibleDataRequestToJSON,
    NonFungibleDataResponseFromJSON,
    NonFungibleDataResponseToJSON,
    NonFungibleIdsRequestFromJSON,
    NonFungibleIdsRequestToJSON,
    NonFungibleIdsResponseFromJSON,
    NonFungibleIdsResponseToJSON,
} from '../models';

export interface NonFungibleDataOperationRequest {
    nonFungibleDataRequest: NonFungibleDataRequest;
}

export interface NonFungibleIdsOperationRequest {
    nonFungibleIdsRequest: NonFungibleIdsRequest;
}

/**
 * 
 */
export class NonFungibleApi extends runtime.BaseAPI {

    /**
     * Returns data associated with a given non-fungible id.
     */
    async nonFungibleDataRaw(requestParameters: NonFungibleDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NonFungibleDataResponse>> {
        if (requestParameters.nonFungibleDataRequest === null || requestParameters.nonFungibleDataRequest === undefined) {
            throw new runtime.RequiredError('nonFungibleDataRequest','Required parameter requestParameters.nonFungibleDataRequest was null or undefined when calling nonFungibleData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/non-fungible/data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NonFungibleDataRequestToJSON(requestParameters.nonFungibleDataRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NonFungibleDataResponseFromJSON(jsonValue));
    }

    /**
     * Returns data associated with a given non-fungible id.
     */
    async nonFungibleData(requestParameters: NonFungibleDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NonFungibleDataResponse> {
        const response = await this.nonFungibleDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Iterates through all non-fungible ids of a given non-fungible resource.
     */
    async nonFungibleIdsRaw(requestParameters: NonFungibleIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NonFungibleIdsResponse>> {
        if (requestParameters.nonFungibleIdsRequest === null || requestParameters.nonFungibleIdsRequest === undefined) {
            throw new runtime.RequiredError('nonFungibleIdsRequest','Required parameter requestParameters.nonFungibleIdsRequest was null or undefined when calling nonFungibleIds.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/non-fungible/ids`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NonFungibleIdsRequestToJSON(requestParameters.nonFungibleIdsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NonFungibleIdsResponseFromJSON(jsonValue));
    }

    /**
     * Iterates through all non-fungible ids of a given non-fungible resource.
     */
    async nonFungibleIds(requestParameters: NonFungibleIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NonFungibleIdsResponse> {
        const response = await this.nonFungibleIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
