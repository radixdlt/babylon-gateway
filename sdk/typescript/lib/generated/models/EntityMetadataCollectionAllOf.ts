/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntityMetadataItem } from './EntityMetadataItem';
import {
    EntityMetadataItemFromJSON,
    EntityMetadataItemFromJSONTyped,
    EntityMetadataItemToJSON,
} from './EntityMetadataItem';

/**
 * 
 * @export
 * @interface EntityMetadataCollectionAllOf
 */
export interface EntityMetadataCollectionAllOf {
    /**
     * 
     * @type {Array<EntityMetadataItem>}
     * @memberof EntityMetadataCollectionAllOf
     */
    items: Array<EntityMetadataItem>;
}

/**
 * Check if a given object implements the EntityMetadataCollectionAllOf interface.
 */
export function instanceOfEntityMetadataCollectionAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "items" in value;

    return isInstance;
}

export function EntityMetadataCollectionAllOfFromJSON(json: any): EntityMetadataCollectionAllOf {
    return EntityMetadataCollectionAllOfFromJSONTyped(json, false);
}

export function EntityMetadataCollectionAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityMetadataCollectionAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'items': ((json['items'] as Array<any>).map(EntityMetadataItemFromJSON)),
    };
}

export function EntityMetadataCollectionAllOfToJSON(value?: EntityMetadataCollectionAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'items': ((value.items as Array<any>).map(EntityMetadataItemToJSON)),
    };
}

