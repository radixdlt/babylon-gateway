/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Gateway API - RCnet V2
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers. For simple use cases, you can typically use the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs-babylon.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Integration and forward compatibility guarantees  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal. 
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransactionCommittedDetailsOptIns
 */
export interface TransactionCommittedDetailsOptIns {
    /**
     * 
     * @type {boolean}
     * @memberof TransactionCommittedDetailsOptIns
     */
    raw_hex?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TransactionCommittedDetailsOptIns
     */
    receipt_state_changes?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TransactionCommittedDetailsOptIns
     */
    receipt_fee_summary?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TransactionCommittedDetailsOptIns
     */
    receipt_events?: boolean;
}

/**
 * Check if a given object implements the TransactionCommittedDetailsOptIns interface.
 */
export function instanceOfTransactionCommittedDetailsOptIns(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionCommittedDetailsOptInsFromJSON(json: any): TransactionCommittedDetailsOptIns {
    return TransactionCommittedDetailsOptInsFromJSONTyped(json, false);
}

export function TransactionCommittedDetailsOptInsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionCommittedDetailsOptIns {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'raw_hex': !exists(json, 'raw_hex') ? undefined : json['raw_hex'],
        'receipt_state_changes': !exists(json, 'receipt_state_changes') ? undefined : json['receipt_state_changes'],
        'receipt_fee_summary': !exists(json, 'receipt_fee_summary') ? undefined : json['receipt_fee_summary'],
        'receipt_events': !exists(json, 'receipt_events') ? undefined : json['receipt_events'],
    };
}

export function TransactionCommittedDetailsOptInsToJSON(value?: TransactionCommittedDetailsOptIns | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'raw_hex': value.raw_hex,
        'receipt_state_changes': value.receipt_state_changes,
        'receipt_fee_summary': value.receipt_fee_summary,
        'receipt_events': value.receipt_events,
    };
}

