/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommittedTransactionInfo } from './CommittedTransactionInfo';
import {
    CommittedTransactionInfoFromJSON,
    CommittedTransactionInfoFromJSONTyped,
    CommittedTransactionInfoToJSON,
} from './CommittedTransactionInfo';
import type { LedgerState } from './LedgerState';
import {
    LedgerStateFromJSON,
    LedgerStateFromJSONTyped,
    LedgerStateToJSON,
} from './LedgerState';

/**
 * 
 * @export
 * @interface TransactionRecentResponse
 */
export interface TransactionRecentResponse {
    /**
     * 
     * @type {LedgerState}
     * @memberof TransactionRecentResponse
     */
    ledger_state: LedgerState;
    /**
     * 
     * @type {number}
     * @memberof TransactionRecentResponse
     */
    total_count?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionRecentResponse
     */
    previous_cursor?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionRecentResponse
     */
    next_cursor?: string | null;
    /**
     * The page of user transactions.
     * @type {Array<CommittedTransactionInfo>}
     * @memberof TransactionRecentResponse
     */
    items: Array<CommittedTransactionInfo>;
}

/**
 * Check if a given object implements the TransactionRecentResponse interface.
 */
export function instanceOfTransactionRecentResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ledger_state" in value;
    isInstance = isInstance && "items" in value;

    return isInstance;
}

export function TransactionRecentResponseFromJSON(json: any): TransactionRecentResponse {
    return TransactionRecentResponseFromJSONTyped(json, false);
}

export function TransactionRecentResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionRecentResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ledger_state': LedgerStateFromJSON(json['ledger_state']),
        'total_count': !exists(json, 'total_count') ? undefined : json['total_count'],
        'previous_cursor': !exists(json, 'previous_cursor') ? undefined : json['previous_cursor'],
        'next_cursor': !exists(json, 'next_cursor') ? undefined : json['next_cursor'],
        'items': ((json['items'] as Array<any>).map(CommittedTransactionInfoFromJSON)),
    };
}

export function TransactionRecentResponseToJSON(value?: TransactionRecentResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ledger_state': LedgerStateToJSON(value.ledger_state),
        'total_count': value.total_count,
        'previous_cursor': value.previous_cursor,
        'next_cursor': value.next_cursor,
        'items': ((value.items as Array<any>).map(CommittedTransactionInfoToJSON)),
    };
}

