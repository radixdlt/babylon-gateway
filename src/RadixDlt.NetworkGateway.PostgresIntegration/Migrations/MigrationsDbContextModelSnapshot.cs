/* Copyright 2021 Radix Publishing Ltd incorporated in Jersey (Channel Islands).
 *
 * Licensed under the Radix License, Version 1.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 *
 * radixfoundation.org/licenses/LICENSE-v1
 *
 * The Licensor hereby grants permission for the Canonical version of the Work to be
 * published, distributed and used under or by reference to the Licensor’s trademark
 * Radix ® and use of any unregistered trade names, logos or get-up.
 *
 * The Licensor provides the Work (and each Contributor provides its Contributions) on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
 * including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT,
 * MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Whilst the Work is capable of being deployed, used and adopted (instantiated) to create
 * a distributed ledger it is your responsibility to test and validate the code, together
 * with all logic and performance of that code under all foreseeable scenarios.
 *
 * The Licensor does not make or purport to make and hereby excludes liability for all
 * and any representation, warranty or undertaking in any form whatsoever, whether express
 * or implied, to any entity or person, including any representation, warranty or
 * undertaking, as to the functionality security use, value or other characteristics of
 * any distributed ledger nor in respect the functioning or value of any tokens which may
 * be created stored or transferred using the Work. The Licensor does not warrant that the
 * Work or any use of the Work complies with any law or regulation in any territory where
 * it may be implemented or used or that it will be appropriate for any specific purpose.
 *
 * Neither the licensor nor any current or former employees, officers, directors, partners,
 * trustees, representatives, agents, advisors, contractors, or volunteers of the Licensor
 * shall be liable for any direct or indirect, special, incidental, consequential or other
 * losses of any kind, in tort, contract or otherwise (including but not limited to loss
 * of revenue, income or profits, or loss of use or data, or loss of reputation, or loss
 * of any economic or other opportunity of whatsoever nature or howsoever arising), arising
 * out of or in connection with (without limitation of any use, misuse, of any ledger system
 * or use made or its functionality or any performance or operation of any code or protocol
 * caused by bugs or programming or logic errors or otherwise);
 *
 * A. any offer, purchase, holding, use, sale, exchange or transmission of any
 * cryptographic keys, tokens or assets created, exchanged, stored or arising from any
 * interaction with the Work;
 *
 * B. any failure in a transmission or loss of any token or assets keys or other digital
 * artefacts due to errors in transmission;
 *
 * C. bugs, hacks, logic errors or faults in the Work or any communication;
 *
 * D. system software or apparatus including but not limited to losses caused by errors
 * in holding or transmitting tokens by any third-party;
 *
 * E. breaches or failure of security including hacker attacks, loss or disclosure of
 * password, loss of private key, unauthorised use or misuse of such passwords or keys;
 *
 * F. any losses including loss of anticipated savings or other benefits resulting from
 * use of the Work or any changes to the Work (however implemented).
 *
 * You are solely responsible for; testing, validating and evaluation of all operation
 * logic, functionality, security and appropriateness of using the Work for any commercial
 * or non-commercial purpose and for any reproduction or redistribution by You of the
 * Work. You assume all risks associated with Your use of the Work and the exercise of
 * permissions under this License.
 */

﻿// <auto-generated />
using System;
using System.Numerics;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadixDlt.NetworkGateway.PostgresIntegration;

#nullable disable

namespace RadixDlt.NetworkGateway.PostgresIntegration.Migrations
{
    [DbContext(typeof(MigrationsDbContext))]
    partial class MigrationsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<byte[]>("PublicKey")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("public_key");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Address"), new[] { "Id" });

                    b.HasIndex("FromStateVersion");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.AccountResourceBalanceHistory", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("resource_id");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<long?>("ToStateVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("to_state_version");

                    b.HasKey("AccountId", "ResourceId", "FromStateVersion");

                    b.HasIndex("FromStateVersion");

                    b.HasIndex("ToStateVersion");

                    b.HasIndex("AccountId", "FromStateVersion");

                    b.HasIndex("AccountId", "ResourceId")
                        .IsUnique()
                        .HasDatabaseName("IX_account_resource_balance_history_current_balance")
                        .HasFilter("to_state_version is null");

                    b.HasIndex("ResourceId", "FromStateVersion");

                    b.HasIndex("ResourceId", "AccountId", "FromStateVersion");

                    b.ToTable("account_resource_balance_history");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.AccountTransaction", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long>("ResultantStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("state_version");

                    b.Property<bool>("IsFeePayer")
                        .HasColumnType("boolean")
                        .HasColumnName("is_fee_payer");

                    b.Property<bool>("IsUserTransaction")
                        .HasColumnType("boolean")
                        .HasColumnName("is_user_transaction");

                    b.HasKey("AccountId", "ResultantStateVersion");

                    b.HasIndex("ResultantStateVersion");

                    b.HasIndex("AccountId", "ResultantStateVersion")
                        .IsUnique()
                        .HasDatabaseName("IX_account_transaction_user_transactions")
                        .HasFilter("is_user_transaction = true");

                    b.ToTable("account_transactions");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.AccountValidatorStakeHistory", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long>("ValidatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("validator_id");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<long?>("ToStateVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("to_state_version");

                    b.HasKey("AccountId", "ValidatorId", "FromStateVersion");

                    b.HasIndex("FromStateVersion");

                    b.HasIndex("ToStateVersion");

                    b.HasIndex("AccountId", "FromStateVersion");

                    b.HasIndex("AccountId", "ValidatorId")
                        .IsUnique()
                        .HasDatabaseName("IX_account_validator_stake_history_current_stake")
                        .HasFilter("to_state_version is null");

                    b.HasIndex("ValidatorId", "FromStateVersion");

                    b.HasIndex("ValidatorId", "AccountId", "FromStateVersion");

                    b.ToTable("account_validator_stake_history");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<long>("TopOfLedgerStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("top_of_ledger_state_version");

                    b.HasKey("Id");

                    b.HasIndex("TopOfLedgerStateVersion");

                    b.ToTable("ledger_status");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", b =>
                {
                    b.Property<long>("ResultantStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("state_version");

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp");

                    b.Property<long>("Epoch")
                        .HasColumnType("bigint")
                        .HasColumnName("epoch");

                    b.Property<BigInteger>("FeePaid")
                        .HasPrecision(1000)
                        .HasColumnType("numeric(1000,0)")
                        .HasColumnName("fee_paid");

                    b.Property<long>("IndexInEpoch")
                        .HasColumnType("bigint")
                        .HasColumnName("index_in_epoch");

                    b.Property<byte[]>("IntentHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("intent_hash");

                    b.Property<bool>("IsStartOfEpoch")
                        .HasColumnType("boolean")
                        .HasColumnName("is_start_of_epoch");

                    b.Property<bool>("IsStartOfRound")
                        .HasColumnType("boolean")
                        .HasColumnName("is_start_of_round");

                    b.Property<bool>("IsUserTransaction")
                        .HasColumnType("boolean")
                        .HasColumnName("is_user_transaction");

                    b.Property<byte[]>("Message")
                        .HasColumnType("bytea")
                        .HasColumnName("message");

                    b.Property<DateTimeOffset>("NormalizedRoundTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("normalized_timestamp");

                    b.Property<byte[]>("PayloadHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("payload_hash");

                    b.Property<long>("RoundInEpoch")
                        .HasColumnType("bigint")
                        .HasColumnName("round_in_epoch");

                    b.Property<DateTimeOffset>("RoundTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("round_timestamp");

                    b.Property<byte[]>("SignedTransactionHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("signed_hash");

                    b.Property<byte[]>("TransactionAccumulator")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("transaction_accumulator");

                    b.HasKey("ResultantStateVersion");

                    b.HasAlternateKey("IntentHash");

                    b.HasAlternateKey("PayloadHash");

                    b.HasAlternateKey("SignedTransactionHash");

                    b.HasAlternateKey("TransactionAccumulator");

                    b.HasIndex("Epoch")
                        .IsUnique()
                        .HasDatabaseName("IX_ledger_transaction_epoch_starts")
                        .HasFilter("is_start_of_epoch = true");

                    b.HasIndex("ResultantStateVersion")
                        .IsUnique()
                        .HasDatabaseName("IX_ledger_transaction_user_transactions")
                        .HasFilter("is_user_transaction = true");

                    b.HasIndex("RoundTimestamp")
                        .HasDatabaseName("IX_ledger_transaction_round_timestamp");

                    b.HasIndex("Epoch", "RoundInEpoch")
                        .IsUnique()
                        .HasDatabaseName("IX_ledger_transaction_round_starts")
                        .HasFilter("is_start_of_round = true");

                    b.ToTable("ledger_transactions");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.MempoolTransaction", b =>
                {
                    b.Property<byte[]>("PayloadHash")
                        .HasColumnType("bytea")
                        .HasColumnName("payload_hash");

                    b.Property<DateTimeOffset?>("CommitTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("commit_timestamp");

                    b.Property<string>("FailureExplanation")
                        .HasColumnType("text")
                        .HasColumnName("failure_explanation");

                    b.Property<string>("FailureReason")
                        .HasColumnType("text")
                        .HasColumnName("failure_reason");

                    b.Property<DateTimeOffset?>("FailureTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("failure_timestamp");

                    b.Property<DateTimeOffset?>("FirstSeenInMempoolTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_seen_in_mempool_timestamp");

                    b.Property<DateTimeOffset?>("FirstSubmittedToGatewayTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_submitted_to_gateway_timestamp");

                    b.Property<byte[]>("IntentHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("intent_hash");

                    b.Property<DateTimeOffset?>("LastDroppedOutOfMempoolTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_missing_from_mempool_timestamp");

                    b.Property<DateTimeOffset?>("LastSubmittedToGatewayTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_submitted_to_gateway_timestamp");

                    b.Property<string>("LastSubmittedToNodeName")
                        .HasColumnType("text")
                        .HasColumnName("last_submitted_to_node_name");

                    b.Property<DateTimeOffset?>("LastSubmittedToNodeTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_submitted_to_node_timestamp");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("payload");

                    b.Property<string>("Status")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("SubmissionToNodesCount")
                        .HasColumnType("integer")
                        .HasColumnName("submission_count");

                    b.Property<bool>("SubmittedByThisGateway")
                        .HasColumnType("boolean")
                        .HasColumnName("submitted_by_this_gateway");

                    b.Property<string>("TransactionContents")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("transaction_contents");

                    b.HasKey("PayloadHash");

                    b.HasAlternateKey("IntentHash");

                    b.HasIndex("Status");

                    b.ToTable("mempool_transactions");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.NetworkConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("network_configuration");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.RawTransaction", b =>
                {
                    b.Property<byte[]>("TransactionPayloadHash")
                        .HasColumnType("bytea")
                        .HasColumnName("transaction_payload_hash");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("payload");

                    b.HasKey("TransactionPayloadHash");

                    b.ToTable("raw_transactions");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.Resource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<byte[]>("RadixEngineAddress")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("engine_address");

                    b.Property<string>("ResourceIdentifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rri");

                    b.HasKey("Id");

                    b.HasIndex("FromStateVersion");

                    b.HasIndex("ResourceIdentifier")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("ResourceIdentifier"), new[] { "Id" });

                    b.ToTable("resources");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.ResourceSupplyHistory", b =>
                {
                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("resource_id");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<long?>("ToStateVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("to_state_version");

                    b.HasKey("ResourceId", "FromStateVersion");

                    b.HasIndex("FromStateVersion");

                    b.HasIndex("ResourceId")
                        .IsUnique()
                        .HasDatabaseName("IX_resource_supply_history_current_supply")
                        .HasFilter("to_state_version is null");

                    b.HasIndex("ToStateVersion");

                    b.ToTable("resource_supply_history");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("Address")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("address");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<byte[]>("GlobalAddress")
                        .HasColumnType("bytea")
                        .HasColumnName("global_address");

                    b.Property<long?>("GlobalAncestorId")
                        .HasColumnType("bigint")
                        .HasColumnName("global_ancestor_id");

                    b.Property<long?>("OwnerAncestorId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_ancestor_id");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tmp_entities");

                    b.HasDiscriminator<string>("type").HasValue("TmpBaseEntity");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseSubstate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("DataHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data_hash");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("entity_id");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<long?>("ToStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("to_state_version");

                    b.Property<long>("Version")
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tmp_substates");

                    b.HasDiscriminator<string>("type").HasValue("TmpBaseSubstate");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpEntityMetadataHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("entity_id");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<string[]>("Keys")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("keys");

                    b.Property<string[]>("Values")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("values");

                    b.HasKey("Id");

                    b.ToTable("tmp_entity_metadata_history");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpOwnerEntityFungibleResourceBalanceHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<BigInteger>("Balance")
                        .HasPrecision(1000)
                        .HasColumnType("numeric(1000,0)")
                        .HasColumnName("balance");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<long>("FungibleResourceEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("fungible_resource_entity_id");

                    b.Property<long>("GlobalEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("global_entity_id");

                    b.Property<long>("OwnerEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_entity_id");

                    b.HasKey("Id");

                    b.ToTable("tmp_entity_fungible_resource_balance_history");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpOwnerEntityNonFungibleResourceIdsHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<long>("GlobalEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("global_entity_id");

                    b.Property<long[]>("Ids")
                        .IsRequired()
                        .HasColumnType("bigint[]")
                        .HasColumnName("ids");

                    b.Property<long>("IdsCount")
                        .HasColumnType("bigint")
                        .HasColumnName("ids_count");

                    b.Property<long>("NonFungibleResourceEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("non_fungible_resource_entity_id");

                    b.Property<long>("OwnerEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_entity_id");

                    b.HasKey("Id");

                    b.ToTable("tmp_entity_non_fungible_resource_ids_history");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.Validator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<byte[]>("PublicKey")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("public_key");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Address"), new[] { "Id" });

                    b.HasIndex("FromStateVersion");

                    b.ToTable("validators");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.ValidatorProposalRecord", b =>
                {
                    b.Property<long>("Epoch")
                        .HasColumnType("bigint")
                        .HasColumnName("epoch");

                    b.Property<long>("ValidatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("validator_id");

                    b.Property<long>("LastUpdatedAtStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("last_updated_state_version");

                    b.HasKey("Epoch", "ValidatorId");

                    b.HasIndex("LastUpdatedAtStateVersion");

                    b.HasIndex("ValidatorId", "Epoch");

                    b.ToTable("validator_proposal_records");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.ValidatorStakeHistory", b =>
                {
                    b.Property<long>("ValidatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("validator_id");

                    b.Property<long>("FromStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("from_state_version");

                    b.Property<long?>("ToStateVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("to_state_version");

                    b.HasKey("ValidatorId", "FromStateVersion");

                    b.HasIndex("FromStateVersion");

                    b.HasIndex("ToStateVersion");

                    b.HasIndex("ValidatorId")
                        .IsUnique()
                        .HasDatabaseName("IX_validator_stake_history_current_stake")
                        .HasFilter("to_state_version is null");

                    b.ToTable("validator_stake_history");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpComponentEntity", b =>
                {
                    b.HasBaseType("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseEntity");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kind");

                    b.ToTable("tmp_entities");

                    b.HasDiscriminator().HasValue("component");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpComponentInfoSubstate", b =>
                {
                    b.HasBaseType("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseSubstate");

                    b.ToTable("tmp_substates");

                    b.HasDiscriminator().HasValue("component_info");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpComponentStateSubstate", b =>
                {
                    b.HasBaseType("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseSubstate");

                    b.ToTable("tmp_substates");

                    b.HasDiscriminator().HasValue("component_state");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpKeyValueStoreEntity", b =>
                {
                    b.HasBaseType("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseEntity");

                    b.ToTable("tmp_entities");

                    b.HasDiscriminator().HasValue("key_value_store");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpKeyValueStoreEntrySubstate", b =>
                {
                    b.HasBaseType("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseSubstate");

                    b.ToTable("tmp_substates");

                    b.HasDiscriminator().HasValue("key_value_store_entry");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpNonFungibleSubstate", b =>
                {
                    b.HasBaseType("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseSubstate");

                    b.ToTable("tmp_substates");

                    b.HasDiscriminator().HasValue("non_fungible");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpPackageEntity", b =>
                {
                    b.HasBaseType("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseEntity");

                    b.ToTable("tmp_entities");

                    b.HasDiscriminator().HasValue("package");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpPackageSubstate", b =>
                {
                    b.HasBaseType("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseSubstate");

                    b.ToTable("tmp_substates");

                    b.HasDiscriminator().HasValue("package");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpResourceManagerEntity", b =>
                {
                    b.HasBaseType("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseEntity");

                    b.ToTable("tmp_entities");

                    b.HasDiscriminator().HasValue("resource_manager");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpResourceManagerSubstate", b =>
                {
                    b.HasBaseType("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseSubstate");

                    b.Property<int>("FungibleDivisibility")
                        .HasColumnType("integer")
                        .HasColumnName("fungible_divisibility");

                    b.Property<BigInteger>("TotalSupply")
                        .HasPrecision(1000)
                        .HasColumnType("numeric(1000,0)")
                        .HasColumnName("total_supply");

                    b.ToTable("tmp_substates");

                    b.HasDiscriminator().HasValue("resource_manager");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpSystemEntity", b =>
                {
                    b.HasBaseType("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseEntity");

                    b.ToTable("tmp_entities");

                    b.HasDiscriminator().HasValue("system");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpSystemSubstate", b =>
                {
                    b.HasBaseType("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseSubstate");

                    b.ToTable("tmp_substates");

                    b.HasDiscriminator().HasValue("system");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpVaultEntity", b =>
                {
                    b.HasBaseType("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseEntity");

                    b.ToTable("tmp_entities");

                    b.HasDiscriminator().HasValue("vault");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpVaultSubstate", b =>
                {
                    b.HasBaseType("RadixDlt.NetworkGateway.PostgresIntegration.Models.TmpBaseSubstate");

                    b.Property<BigInteger>("Amount")
                        .HasPrecision(1000)
                        .HasColumnType("numeric(1000,0)")
                        .HasColumnName("amount");

                    b.ToTable("tmp_substates");

                    b.HasDiscriminator().HasValue("vault");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.Account", b =>
                {
                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", "FromLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("FromStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_account_from_transaction");

                    b.Navigation("FromLedgerTransaction");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.AccountResourceBalanceHistory", b =>
                {
                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", "FromLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("FromStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_account_resource_balance_history_from_transaction");

                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", "ToLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("ToStateVersion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_account_resource_balance_history_to_transaction");

                    b.OwnsOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.BalanceEntry", "BalanceEntry", b1 =>
                        {
                            b1.Property<long>("AccountResourceBalanceHistoryAccountId")
                                .HasColumnType("bigint");

                            b1.Property<long>("AccountResourceBalanceHistoryResourceId")
                                .HasColumnType("bigint");

                            b1.Property<long>("AccountResourceBalanceHistoryFromStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<BigInteger>("Balance")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("balance");

                            b1.HasKey("AccountResourceBalanceHistoryAccountId", "AccountResourceBalanceHistoryResourceId", "AccountResourceBalanceHistoryFromStateVersion");

                            b1.ToTable("account_resource_balance_history");

                            b1.WithOwner()
                                .HasForeignKey("AccountResourceBalanceHistoryAccountId", "AccountResourceBalanceHistoryResourceId", "AccountResourceBalanceHistoryFromStateVersion");
                        });

                    b.Navigation("Account");

                    b.Navigation("BalanceEntry")
                        .IsRequired();

                    b.Navigation("FromLedgerTransaction");

                    b.Navigation("Resource");

                    b.Navigation("ToLedgerTransaction");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.AccountTransaction", b =>
                {
                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", "LedgerTransaction")
                        .WithMany()
                        .HasForeignKey("ResultantStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("LedgerTransaction");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.AccountValidatorStakeHistory", b =>
                {
                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", "FromLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("FromStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_account_validator_stake_history_from_transaction");

                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", "ToLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("ToStateVersion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_account_validator_stake_history_to_transaction");

                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.Validator", "Validator")
                        .WithMany()
                        .HasForeignKey("ValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.AccountValidatorStakeSnapshot", "StakeSnapshot", b1 =>
                        {
                            b1.Property<long>("AccountValidatorStakeHistoryAccountId")
                                .HasColumnType("bigint");

                            b1.Property<long>("AccountValidatorStakeHistoryValidatorId")
                                .HasColumnType("bigint");

                            b1.Property<long>("AccountValidatorStakeHistoryFromStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<BigInteger>("TotalExitingXrdStake")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_exiting_xrd_stake");

                            b1.Property<BigInteger>("TotalPreparedUnStakeUnits")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_prepared_unstake_units");

                            b1.Property<BigInteger>("TotalPreparedXrdStake")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_prepared_xrd_stake");

                            b1.Property<BigInteger>("TotalStakeUnits")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_stake_units");

                            b1.HasKey("AccountValidatorStakeHistoryAccountId", "AccountValidatorStakeHistoryValidatorId", "AccountValidatorStakeHistoryFromStateVersion");

                            b1.ToTable("account_validator_stake_history");

                            b1.WithOwner()
                                .HasForeignKey("AccountValidatorStakeHistoryAccountId", "AccountValidatorStakeHistoryValidatorId", "AccountValidatorStakeHistoryFromStateVersion");
                        });

                    b.Navigation("Account");

                    b.Navigation("FromLedgerTransaction");

                    b.Navigation("StakeSnapshot")
                        .IsRequired();

                    b.Navigation("ToLedgerTransaction");

                    b.Navigation("Validator");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerStatus", b =>
                {
                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", "TopOfLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("TopOfLedgerStateVersion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ledger_status_top_transactions_state_version");

                    b.OwnsOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.SyncTarget", "SyncTarget", b1 =>
                        {
                            b1.Property<int>("LedgerStatusId")
                                .HasColumnType("integer");

                            b1.Property<long>("TargetStateVersion")
                                .HasColumnType("bigint")
                                .HasColumnName("sync_status_target_state_version");

                            b1.HasKey("LedgerStatusId");

                            b1.ToTable("ledger_status");

                            b1.WithOwner()
                                .HasForeignKey("LedgerStatusId");
                        });

                    b.Navigation("SyncTarget")
                        .IsRequired();

                    b.Navigation("TopOfLedgerTransaction");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", b =>
                {
                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.RawTransaction", "RawTransaction")
                        .WithMany()
                        .HasForeignKey("PayloadHash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawTransaction");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.NetworkConfiguration", b =>
                {
                    b.OwnsOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.NetworkAddressHrps", "NetworkAddressHrps", b1 =>
                        {
                            b1.Property<int>("NetworkConfigurationId")
                                .HasColumnType("integer");

                            b1.Property<string>("AccountHrp")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("account_hrp");

                            b1.Property<string>("NodeHrp")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("node_hrp");

                            b1.Property<string>("ResourceHrpSuffix")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("resource_hrp_suffix");

                            b1.Property<string>("ValidatorHrp")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("validator_hrp");

                            b1.HasKey("NetworkConfigurationId");

                            b1.ToTable("network_configuration");

                            b1.WithOwner()
                                .HasForeignKey("NetworkConfigurationId");
                        });

                    b.OwnsOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.NetworkDefinition", "NetworkDefinition", b1 =>
                        {
                            b1.Property<int>("NetworkConfigurationId")
                                .HasColumnType("integer");

                            b1.Property<string>("NetworkName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("network_name");

                            b1.HasKey("NetworkConfigurationId");

                            b1.ToTable("network_configuration");

                            b1.WithOwner()
                                .HasForeignKey("NetworkConfigurationId");
                        });

                    b.OwnsOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.WellKnownAddresses", "WellKnownAddresses", b1 =>
                        {
                            b1.Property<int>("NetworkConfigurationId")
                                .HasColumnType("integer");

                            b1.Property<string>("XrdAddress")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("xrd_address");

                            b1.HasKey("NetworkConfigurationId");

                            b1.ToTable("network_configuration");

                            b1.WithOwner()
                                .HasForeignKey("NetworkConfigurationId");
                        });

                    b.Navigation("NetworkAddressHrps")
                        .IsRequired();

                    b.Navigation("NetworkDefinition")
                        .IsRequired();

                    b.Navigation("WellKnownAddresses")
                        .IsRequired();
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.Resource", b =>
                {
                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", "FromLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("FromStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_resource_from_transaction");

                    b.Navigation("FromLedgerTransaction");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.ResourceSupplyHistory", b =>
                {
                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", "FromLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("FromStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_resource_supply_history_from_transaction");

                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", "ToLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("ToStateVersion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_resource_supply_history_to_transaction");

                    b.OwnsOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.ResourceSupply", "ResourceSupply", b1 =>
                        {
                            b1.Property<long>("ResourceSupplyHistoryResourceId")
                                .HasColumnType("bigint");

                            b1.Property<long>("ResourceSupplyHistoryFromStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<BigInteger>("TotalBurnt")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_burnt");

                            b1.Property<BigInteger>("TotalMinted")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_minted");

                            b1.Property<BigInteger>("TotalSupply")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_supply");

                            b1.HasKey("ResourceSupplyHistoryResourceId", "ResourceSupplyHistoryFromStateVersion");

                            b1.ToTable("resource_supply_history");

                            b1.WithOwner()
                                .HasForeignKey("ResourceSupplyHistoryResourceId", "ResourceSupplyHistoryFromStateVersion");
                        });

                    b.Navigation("FromLedgerTransaction");

                    b.Navigation("Resource");

                    b.Navigation("ResourceSupply")
                        .IsRequired();

                    b.Navigation("ToLedgerTransaction");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.Validator", b =>
                {
                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", "FromLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("FromStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_validator_from_transaction");

                    b.Navigation("FromLedgerTransaction");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.ValidatorProposalRecord", b =>
                {
                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", "LastUpdatedAtLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("LastUpdatedAtStateVersion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_validator_proposal_record_last_updated_transaction");

                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.Validator", "Validator")
                        .WithMany()
                        .HasForeignKey("ValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.ProposalRecord", "ProposalRecord", b1 =>
                        {
                            b1.Property<long>("ValidatorProposalRecordEpoch")
                                .HasColumnType("bigint");

                            b1.Property<long>("ValidatorProposalRecordValidatorId")
                                .HasColumnType("bigint");

                            b1.Property<long>("ProposalsCompleted")
                                .HasColumnType("bigint")
                                .HasColumnName("proposals_completed");

                            b1.Property<long>("ProposalsMissed")
                                .HasColumnType("bigint")
                                .HasColumnName("proposals_missed");

                            b1.HasKey("ValidatorProposalRecordEpoch", "ValidatorProposalRecordValidatorId");

                            b1.ToTable("validator_proposal_records");

                            b1.WithOwner()
                                .HasForeignKey("ValidatorProposalRecordEpoch", "ValidatorProposalRecordValidatorId");
                        });

                    b.Navigation("LastUpdatedAtLedgerTransaction");

                    b.Navigation("ProposalRecord")
                        .IsRequired();

                    b.Navigation("Validator");
                });

            modelBuilder.Entity("RadixDlt.NetworkGateway.PostgresIntegration.Models.ValidatorStakeHistory", b =>
                {
                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", "FromLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("FromStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_validator_stake_history_from_transaction");

                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.LedgerTransaction", "ToLedgerTransaction")
                        .WithMany()
                        .HasForeignKey("ToStateVersion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_validator_stake_history_to_transaction");

                    b.HasOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.Validator", "Validator")
                        .WithMany()
                        .HasForeignKey("ValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RadixDlt.NetworkGateway.PostgresIntegration.Models.ValidatorStakeSnapshot", "StakeSnapshot", b1 =>
                        {
                            b1.Property<long>("ValidatorStakeHistoryValidatorId")
                                .HasColumnType("bigint");

                            b1.Property<long>("ValidatorStakeHistoryFromStateVersion")
                                .HasColumnType("bigint");

                            b1.Property<BigInteger>("TotalExitingXrdStake")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_exiting_xrd_stake");

                            b1.Property<BigInteger>("TotalPreparedUnStakeUnits")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_prepared_unstake_units");

                            b1.Property<BigInteger>("TotalPreparedXrdStake")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_prepared_xrd_stake");

                            b1.Property<BigInteger>("TotalStakeUnits")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_stake_units");

                            b1.Property<BigInteger>("TotalXrdStake")
                                .HasPrecision(1000)
                                .HasColumnType("numeric(1000,0)")
                                .HasColumnName("total_xrd_staked");

                            b1.HasKey("ValidatorStakeHistoryValidatorId", "ValidatorStakeHistoryFromStateVersion");

                            b1.ToTable("validator_stake_history");

                            b1.WithOwner()
                                .HasForeignKey("ValidatorStakeHistoryValidatorId", "ValidatorStakeHistoryFromStateVersion");
                        });

                    b.Navigation("FromLedgerTransaction");

                    b.Navigation("StakeSnapshot")
                        .IsRequired();

                    b.Navigation("ToLedgerTransaction");

                    b.Navigation("Validator");
                });
#pragma warning restore 612, 618
        }
    }
}
