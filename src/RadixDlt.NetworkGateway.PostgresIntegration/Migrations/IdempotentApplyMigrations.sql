CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE mempool_transactions (
        transaction_id bytea NOT NULL,
        payload bytea NOT NULL,
        submitted_by_this_gateway boolean NOT NULL,
        first_submitted_to_gateway_timestamp timestamp with time zone NULL,
        last_submitted_to_gateway_timestamp timestamp with time zone NULL,
        last_submitted_to_node_timestamp timestamp with time zone NULL,
        last_submitted_to_node_name text NULL,
        first_seen_in_mempool_timestamp timestamp with time zone NULL,
        last_seen_in_mempool_timestamp timestamp with time zone NULL,
        commit_timestamp timestamp with time zone NULL,
        transaction_contents jsonb NOT NULL,
        submission_status text NOT NULL,
        submission_failure_reason text NULL,
        CONSTRAINT "PK_mempool_transactions" PRIMARY KEY (transaction_id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE network_configuration (
        id integer NOT NULL,
        network_name text NOT NULL,
        account_hrp text NOT NULL,
        resource_hrp_suffix text NOT NULL,
        validator_hrp text NOT NULL,
        node_hrp text NOT NULL,
        xrd_address text NOT NULL,
        CONSTRAINT "PK_network_configuration" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE nodes (
        name text NOT NULL,
        address text NOT NULL,
        trust_weighting numeric NOT NULL,
        enabled_for_indexing boolean NOT NULL,
        CONSTRAINT "PK_nodes" PRIMARY KEY (name)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE raw_transactions (
        transaction_id bytea NOT NULL,
        payload bytea NOT NULL,
        CONSTRAINT "PK_raw_transactions" PRIMARY KEY (transaction_id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE ledger_transactions (
        state_version bigint NOT NULL,
        transaction_id bytea NOT NULL,
        transaction_accumulator bytea NOT NULL,
        message bytea NULL,
        fee_paid numeric(1000,0) NOT NULL,
        epoch bigint NOT NULL,
        index_in_epoch bigint NOT NULL,
        round_in_epoch bigint NOT NULL,
        is_only_round_change boolean NOT NULL,
        is_start_of_epoch boolean NOT NULL,
        is_start_of_round boolean NOT NULL,
        round_timestamp timestamp with time zone NOT NULL,
        created_timestamp timestamp with time zone NOT NULL,
        timestamp timestamp with time zone NOT NULL,
        CONSTRAINT "PK_ledger_transactions" PRIMARY KEY (state_version),
        CONSTRAINT "AK_ledger_transactions_transaction_accumulator" UNIQUE (transaction_accumulator),
        CONSTRAINT "AK_ledger_transactions_transaction_id" UNIQUE (transaction_id),
        CONSTRAINT "FK_ledger_transactions_raw_transactions_transaction_id" FOREIGN KEY (transaction_id) REFERENCES raw_transactions (transaction_id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE accounts (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        address text NOT NULL,
        public_key bytea NOT NULL,
        from_state_version bigint NOT NULL,
        CONSTRAINT "PK_accounts" PRIMARY KEY (id),
        CONSTRAINT "FK_account_from_transaction" FOREIGN KEY (from_state_version) REFERENCES ledger_transactions (state_version) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE resources (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        engine_address bytea NOT NULL,
        rri text NOT NULL,
        from_state_version bigint NOT NULL,
        CONSTRAINT "PK_resources" PRIMARY KEY (id),
        CONSTRAINT "FK_resource_from_transaction" FOREIGN KEY (from_state_version) REFERENCES ledger_transactions (state_version) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE validators (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        address text NOT NULL,
        public_key bytea NOT NULL,
        from_state_version bigint NOT NULL,
        CONSTRAINT "PK_validators" PRIMARY KEY (id),
        CONSTRAINT "FK_validator_from_transaction" FOREIGN KEY (from_state_version) REFERENCES ledger_transactions (state_version) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE account_transactions (
        account_id bigint NOT NULL,
        state_version bigint NOT NULL,
        is_fee_payer boolean NOT NULL,
        is_signer boolean NOT NULL,
        CONSTRAINT "PK_account_transactions" PRIMARY KEY (account_id, state_version),
        CONSTRAINT "FK_account_transactions_accounts_account_id" FOREIGN KEY (account_id) REFERENCES accounts (id) ON DELETE CASCADE,
        CONSTRAINT "FK_account_transactions_ledger_transactions_state_version" FOREIGN KEY (state_version) REFERENCES ledger_transactions (state_version) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE account_resource_balance_history (
        from_state_version bigint NOT NULL,
        account_id bigint NOT NULL,
        resource_id bigint NOT NULL,
        balance numeric(1000,0) NOT NULL,
        to_state_version bigint NULL,
        CONSTRAINT "PK_account_resource_balance_history" PRIMARY KEY (account_id, resource_id, from_state_version),
        CONSTRAINT "FK_account_resource_balance_history_accounts_account_id" FOREIGN KEY (account_id) REFERENCES accounts (id) ON DELETE CASCADE,
        CONSTRAINT "FK_account_resource_balance_history_ledger_transactions_from_s~" FOREIGN KEY (from_state_version) REFERENCES ledger_transactions (state_version) ON DELETE CASCADE,
        CONSTRAINT "FK_account_resource_balance_history_ledger_transactions_to_sta~" FOREIGN KEY (to_state_version) REFERENCES ledger_transactions (state_version),
        CONSTRAINT "FK_account_resource_balance_history_resources_resource_id" FOREIGN KEY (resource_id) REFERENCES resources (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE resource_supply_history (
        from_state_version bigint NOT NULL,
        resource_id bigint NOT NULL,
        total_supply numeric(1000,0) NOT NULL,
        total_minted numeric(1000,0) NOT NULL,
        total_burnt numeric(1000,0) NOT NULL,
        to_state_version bigint NULL,
        CONSTRAINT "PK_resource_supply_history" PRIMARY KEY (resource_id, from_state_version),
        CONSTRAINT "FK_resource_supply_history_from_transaction" FOREIGN KEY (from_state_version) REFERENCES ledger_transactions (state_version) ON DELETE CASCADE,
        CONSTRAINT "FK_resource_supply_history_resources_resource_id" FOREIGN KEY (resource_id) REFERENCES resources (id) ON DELETE CASCADE,
        CONSTRAINT "FK_resource_supply_history_to_transaction" FOREIGN KEY (to_state_version) REFERENCES ledger_transactions (state_version) ON DELETE RESTRICT
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE account_validator_stake_history (
        from_state_version bigint NOT NULL,
        account_id bigint NOT NULL,
        validator_id bigint NOT NULL,
        total_stake_units numeric(1000,0) NOT NULL,
        total_prepared_xrd_stake numeric(1000,0) NOT NULL,
        total_prepared_unstake_units numeric(1000,0) NOT NULL,
        total_exiting_xrd_stake numeric(1000,0) NOT NULL,
        to_state_version bigint NULL,
        CONSTRAINT "PK_account_validator_stake_history" PRIMARY KEY (account_id, validator_id, from_state_version),
        CONSTRAINT "FK_account_validator_stake_history_accounts_account_id" FOREIGN KEY (account_id) REFERENCES accounts (id) ON DELETE CASCADE,
        CONSTRAINT "FK_account_validator_stake_history_from_transaction" FOREIGN KEY (from_state_version) REFERENCES ledger_transactions (state_version) ON DELETE CASCADE,
        CONSTRAINT "FK_account_validator_stake_history_to_transaction" FOREIGN KEY (to_state_version) REFERENCES ledger_transactions (state_version) ON DELETE RESTRICT,
        CONSTRAINT "FK_account_validator_stake_history_validators_validator_id" FOREIGN KEY (validator_id) REFERENCES validators (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE operation_groups (
        state_version bigint NOT NULL,
        operation_group_index integer NOT NULL,
        inferred_action_type text NULL,
        inferred_action_from_account_id bigint NULL,
        inferred_action_to_account_id bigint NULL,
        inferred_action_validator_id bigint NULL,
        inferred_action_amount numeric(1000,0) NULL,
        inferred_action_resource_id bigint NULL,
        CONSTRAINT "PK_operation_groups" PRIMARY KEY (state_version, operation_group_index),
        CONSTRAINT "FK_operation_groups_accounts_inferred_action_from_account_id" FOREIGN KEY (inferred_action_from_account_id) REFERENCES accounts (id),
        CONSTRAINT "FK_operation_groups_accounts_inferred_action_to_account_id" FOREIGN KEY (inferred_action_to_account_id) REFERENCES accounts (id),
        CONSTRAINT "FK_operation_groups_ledger_transactions_state_version" FOREIGN KEY (state_version) REFERENCES ledger_transactions (state_version) ON DELETE CASCADE,
        CONSTRAINT "FK_operation_groups_resources_inferred_action_resource_id" FOREIGN KEY (inferred_action_resource_id) REFERENCES resources (id),
        CONSTRAINT "FK_operation_groups_validators_inferred_action_validator_id" FOREIGN KEY (inferred_action_validator_id) REFERENCES validators (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE validator_proposal_records (
        validator_id bigint NOT NULL,
        epoch bigint NOT NULL,
        proposals_completed bigint NOT NULL,
        proposals_missed bigint NOT NULL,
        last_updated_state_version bigint NOT NULL,
        CONSTRAINT "PK_validator_proposal_records" PRIMARY KEY (epoch, validator_id),
        CONSTRAINT "FK_validator_proposal_record_last_updated_transaction" FOREIGN KEY (last_updated_state_version) REFERENCES ledger_transactions (state_version),
        CONSTRAINT "FK_validator_proposal_records_validators_validator_id" FOREIGN KEY (validator_id) REFERENCES validators (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE validator_stake_history (
        from_state_version bigint NOT NULL,
        validator_id bigint NOT NULL,
        total_xrd_staked numeric(1000,0) NOT NULL,
        total_stake_units numeric(1000,0) NOT NULL,
        total_prepared_xrd_stake numeric(1000,0) NOT NULL,
        total_prepared_unstake_units numeric(1000,0) NOT NULL,
        total_exiting_xrd_stake numeric(1000,0) NOT NULL,
        to_state_version bigint NULL,
        CONSTRAINT "PK_validator_stake_history" PRIMARY KEY (validator_id, from_state_version),
        CONSTRAINT "FK_validator_stake_history_from_transaction" FOREIGN KEY (from_state_version) REFERENCES ledger_transactions (state_version) ON DELETE CASCADE,
        CONSTRAINT "FK_validator_stake_history_to_transaction" FOREIGN KEY (to_state_version) REFERENCES ledger_transactions (state_version) ON DELETE RESTRICT,
        CONSTRAINT "FK_validator_stake_history_validators_validator_id" FOREIGN KEY (validator_id) REFERENCES validators (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE account_resource_balance_substates (
        up_state_version bigint NOT NULL,
        up_operation_group_index integer NOT NULL,
        up_operation_index_in_group integer NOT NULL,
        account_id bigint NOT NULL,
        resource_id bigint NOT NULL,
        down_state_version bigint NULL,
        down_operation_group_index integer NULL,
        down_operation_index_in_group integer NULL,
        substate_identifier bytea NOT NULL,
        amount numeric(1000,0) NOT NULL,
        CONSTRAINT "PK_account_resource_balance_substates" PRIMARY KEY (up_state_version, up_operation_group_index, up_operation_index_in_group),
        CONSTRAINT "AK_account_resource_balance_substates_substate_identifier" UNIQUE (substate_identifier),
        CONSTRAINT "FK_account_resource_balance_substate_down_operation_group" FOREIGN KEY (down_state_version, down_operation_group_index) REFERENCES operation_groups (state_version, operation_group_index) ON DELETE RESTRICT,
        CONSTRAINT "FK_account_resource_balance_substate_up_operation_group" FOREIGN KEY (up_state_version, up_operation_group_index) REFERENCES operation_groups (state_version, operation_group_index) ON DELETE CASCADE,
        CONSTRAINT "FK_account_resource_balance_substates_accounts_account_id" FOREIGN KEY (account_id) REFERENCES accounts (id) ON DELETE CASCADE,
        CONSTRAINT "FK_account_resource_balance_substates_resources_resource_id" FOREIGN KEY (resource_id) REFERENCES resources (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE account_stake_unit_balance_substates (
        up_state_version bigint NOT NULL,
        up_operation_group_index integer NOT NULL,
        up_operation_index_in_group integer NOT NULL,
        account_id bigint NOT NULL,
        validator_id bigint NOT NULL,
        type text NOT NULL,
        down_state_version bigint NULL,
        down_operation_group_index integer NULL,
        down_operation_index_in_group integer NULL,
        substate_identifier bytea NOT NULL,
        amount numeric(1000,0) NOT NULL,
        CONSTRAINT "PK_account_stake_unit_balance_substates" PRIMARY KEY (up_state_version, up_operation_group_index, up_operation_index_in_group),
        CONSTRAINT "AK_account_stake_unit_balance_substates_substate_identifier" UNIQUE (substate_identifier),
        CONSTRAINT "FK_account_stake_unit_balance_substate_down_operation_group" FOREIGN KEY (down_state_version, down_operation_group_index) REFERENCES operation_groups (state_version, operation_group_index) ON DELETE RESTRICT,
        CONSTRAINT "FK_account_stake_unit_balance_substate_up_operation_group" FOREIGN KEY (up_state_version, up_operation_group_index) REFERENCES operation_groups (state_version, operation_group_index) ON DELETE CASCADE,
        CONSTRAINT "FK_account_stake_unit_balance_substates_accounts_account_id" FOREIGN KEY (account_id) REFERENCES accounts (id) ON DELETE CASCADE,
        CONSTRAINT "FK_account_stake_unit_balance_substates_validators_validator_id" FOREIGN KEY (validator_id) REFERENCES validators (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE account_xrd_stake_balance_substates (
        up_state_version bigint NOT NULL,
        up_operation_group_index integer NOT NULL,
        up_operation_index_in_group integer NOT NULL,
        account_id bigint NOT NULL,
        validator_id bigint NOT NULL,
        type text NOT NULL,
        unlock_epoch bigint NULL,
        down_state_version bigint NULL,
        down_operation_group_index integer NULL,
        down_operation_index_in_group integer NULL,
        substate_identifier bytea NOT NULL,
        amount numeric(1000,0) NOT NULL,
        CONSTRAINT "PK_account_xrd_stake_balance_substates" PRIMARY KEY (up_state_version, up_operation_group_index, up_operation_index_in_group),
        CONSTRAINT "AK_account_xrd_stake_balance_substates_substate_identifier" UNIQUE (substate_identifier),
        CONSTRAINT "FK_account_xrd_stake_balance_substate_down_operation_group" FOREIGN KEY (down_state_version, down_operation_group_index) REFERENCES operation_groups (state_version, operation_group_index) ON DELETE RESTRICT,
        CONSTRAINT "FK_account_xrd_stake_balance_substate_up_operation_group" FOREIGN KEY (up_state_version, up_operation_group_index) REFERENCES operation_groups (state_version, operation_group_index) ON DELETE CASCADE,
        CONSTRAINT "FK_account_xrd_stake_balance_substates_accounts_account_id" FOREIGN KEY (account_id) REFERENCES accounts (id) ON DELETE CASCADE,
        CONSTRAINT "FK_account_xrd_stake_balance_substates_validators_validator_id" FOREIGN KEY (validator_id) REFERENCES validators (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE resource_data_substates (
        up_state_version bigint NOT NULL,
        up_operation_group_index integer NOT NULL,
        up_operation_index_in_group integer NOT NULL,
        resource_id bigint NOT NULL,
        type text NOT NULL,
        is_mutable boolean NULL,
        granularity numeric(1000,0) NULL,
        owner_id bigint NULL,
        symbol text NULL,
        name text NULL,
        description text NULL,
        url text NULL,
        icon_url text NULL,
        down_state_version bigint NULL,
        down_operation_group_index integer NULL,
        down_operation_index_in_group integer NULL,
        substate_identifier bytea NOT NULL,
        CONSTRAINT "PK_resource_data_substates" PRIMARY KEY (up_state_version, up_operation_group_index, up_operation_index_in_group),
        CONSTRAINT "AK_resource_data_substates_substate_identifier" UNIQUE (substate_identifier),
        CONSTRAINT "FK_resource_data_substate_down_operation_group" FOREIGN KEY (down_state_version, down_operation_group_index) REFERENCES operation_groups (state_version, operation_group_index) ON DELETE RESTRICT,
        CONSTRAINT "FK_resource_data_substate_up_operation_group" FOREIGN KEY (up_state_version, up_operation_group_index) REFERENCES operation_groups (state_version, operation_group_index) ON DELETE CASCADE,
        CONSTRAINT "FK_resource_data_substates_accounts_owner_id" FOREIGN KEY (owner_id) REFERENCES accounts (id),
        CONSTRAINT "FK_resource_data_substates_resources_resource_id" FOREIGN KEY (resource_id) REFERENCES resources (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE validator_data_substates (
        up_state_version bigint NOT NULL,
        up_operation_group_index integer NOT NULL,
        up_operation_index_in_group integer NOT NULL,
        validator_id bigint NOT NULL,
        type text NOT NULL,
        effective_epoch bigint NULL,
        owner_id bigint NULL,
        is_registered boolean NULL,
        fee_percentage numeric NULL,
        name text NULL,
        url text NULL,
        allow_delegation boolean NULL,
        prepared_is_registered boolean NULL,
        prepared_fee_percentage numeric NULL,
        prepared_owner_id bigint NULL,
        down_state_version bigint NULL,
        down_operation_group_index integer NULL,
        down_operation_index_in_group integer NULL,
        substate_identifier bytea NOT NULL,
        CONSTRAINT "PK_validator_data_substates" PRIMARY KEY (up_state_version, up_operation_group_index, up_operation_index_in_group),
        CONSTRAINT "AK_validator_data_substates_substate_identifier" UNIQUE (substate_identifier),
        CONSTRAINT "FK_validator_data_substate_down_operation_group" FOREIGN KEY (down_state_version, down_operation_group_index) REFERENCES operation_groups (state_version, operation_group_index) ON DELETE RESTRICT,
        CONSTRAINT "FK_validator_data_substate_up_operation_group" FOREIGN KEY (up_state_version, up_operation_group_index) REFERENCES operation_groups (state_version, operation_group_index) ON DELETE CASCADE,
        CONSTRAINT "FK_validator_data_substates_accounts_owner_id" FOREIGN KEY (owner_id) REFERENCES accounts (id) ON DELETE CASCADE,
        CONSTRAINT "FK_validator_data_substates_accounts_prepared_owner_id" FOREIGN KEY (prepared_owner_id) REFERENCES accounts (id) ON DELETE CASCADE,
        CONSTRAINT "FK_validator_data_substates_validators_validator_id" FOREIGN KEY (validator_id) REFERENCES validators (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE TABLE validator_stake_balance_substates (
        up_state_version bigint NOT NULL,
        up_operation_group_index integer NOT NULL,
        up_operation_index_in_group integer NOT NULL,
        validator_id bigint NOT NULL,
        epoch bigint NOT NULL,
        down_state_version bigint NULL,
        down_operation_group_index integer NULL,
        down_operation_index_in_group integer NULL,
        substate_identifier bytea NOT NULL,
        amount numeric(1000,0) NOT NULL,
        CONSTRAINT "PK_validator_stake_balance_substates" PRIMARY KEY (up_state_version, up_operation_group_index, up_operation_index_in_group),
        CONSTRAINT "AK_validator_stake_balance_substates_substate_identifier" UNIQUE (substate_identifier),
        CONSTRAINT "FK_validator_stake_balance_substate_down_operation_group" FOREIGN KEY (down_state_version, down_operation_group_index) REFERENCES operation_groups (state_version, operation_group_index) ON DELETE RESTRICT,
        CONSTRAINT "FK_validator_stake_balance_substate_up_operation_group" FOREIGN KEY (up_state_version, up_operation_group_index) REFERENCES operation_groups (state_version, operation_group_index) ON DELETE CASCADE,
        CONSTRAINT "FK_validator_stake_balance_substates_validators_validator_id" FOREIGN KEY (validator_id) REFERENCES validators (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_resource_balance_history_account_id_from_state_vers~" ON account_resource_balance_history (account_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE UNIQUE INDEX "IX_account_resource_balance_history_current_balance" ON account_resource_balance_history (account_id, resource_id) WHERE to_state_version is null;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_resource_balance_history_from_state_version" ON account_resource_balance_history (from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_resource_balance_history_resource_id_account_id_fro~" ON account_resource_balance_history (resource_id, account_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_resource_balance_history_resource_id_from_state_ver~" ON account_resource_balance_history (resource_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_resource_balance_history_to_state_version" ON account_resource_balance_history (to_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_resource_balance_substate_current_unspent_utxos" ON account_resource_balance_substates (account_id, resource_id, amount) INCLUDE (substate_identifier) WHERE down_state_version is null;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_resource_balance_substates_account_id_resource_id" ON account_resource_balance_substates (account_id, resource_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_resource_balance_substates_down_state_version_down_~" ON account_resource_balance_substates (down_state_version, down_operation_group_index);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_resource_balance_substates_resource_id_account_id" ON account_resource_balance_substates (resource_id, account_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_stake_unit_balance_substates_account_id_validator_id" ON account_stake_unit_balance_substates (account_id, validator_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_stake_unit_balance_substates_down_state_version_dow~" ON account_stake_unit_balance_substates (down_state_version, down_operation_group_index);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_stake_unit_balance_substates_validator_id_account_id" ON account_stake_unit_balance_substates (validator_id, account_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_transactions_state_version" ON account_transactions (state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_validator_stake_history_account_id_from_state_versi~" ON account_validator_stake_history (account_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE UNIQUE INDEX "IX_account_validator_stake_history_current_stake" ON account_validator_stake_history (account_id, validator_id) WHERE to_state_version is null;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_validator_stake_history_from_state_version" ON account_validator_stake_history (from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_validator_stake_history_to_state_version" ON account_validator_stake_history (to_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_validator_stake_history_validator_id_account_id_fro~" ON account_validator_stake_history (validator_id, account_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_validator_stake_history_validator_id_from_state_ver~" ON account_validator_stake_history (validator_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_xrd_stake_balance_substates_account_id_validator_id" ON account_xrd_stake_balance_substates (account_id, validator_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_xrd_stake_balance_substates_down_state_version_down~" ON account_xrd_stake_balance_substates (down_state_version, down_operation_group_index);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_account_xrd_stake_balance_substates_validator_id_account_id" ON account_xrd_stake_balance_substates (validator_id, account_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE UNIQUE INDEX "IX_accounts_address" ON accounts (address) INCLUDE (id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_accounts_from_state_version" ON accounts (from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE UNIQUE INDEX "IX_ledger_transactions_epoch_round_in_epoch" ON ledger_transactions (epoch, round_in_epoch) WHERE is_start_of_round = true;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_ledger_transactions_timestamp" ON ledger_transactions (timestamp);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_operation_groups_inferred_action_from_account_id" ON operation_groups (inferred_action_from_account_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_operation_groups_inferred_action_resource_id" ON operation_groups (inferred_action_resource_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_operation_groups_inferred_action_to_account_id" ON operation_groups (inferred_action_to_account_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_operation_groups_inferred_action_validator_id" ON operation_groups (inferred_action_validator_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_resource_data_substates_down_state_version_down_operation_g~" ON resource_data_substates (down_state_version, down_operation_group_index);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_resource_data_substates_owner_id" ON resource_data_substates (owner_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_resource_data_substates_resource_id" ON resource_data_substates (resource_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE UNIQUE INDEX "IX_resource_supply_history_current_supply" ON resource_supply_history (resource_id) WHERE to_state_version is null;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_resource_supply_history_from_state_version" ON resource_supply_history (from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_resource_supply_history_to_state_version" ON resource_supply_history (to_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_resources_from_state_version" ON resources (from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE UNIQUE INDEX "IX_resources_rri" ON resources (rri) INCLUDE (id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_validator_data_substates_down_state_version_down_operation_~" ON validator_data_substates (down_state_version, down_operation_group_index);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_validator_data_substates_owner_id" ON validator_data_substates (owner_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_validator_data_substates_prepared_owner_id" ON validator_data_substates (prepared_owner_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_validator_data_substates_validator_id" ON validator_data_substates (validator_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_validator_proposal_records_last_updated_state_version" ON validator_proposal_records (last_updated_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_validator_proposal_records_validator_id_epoch" ON validator_proposal_records (validator_id, epoch);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_validator_stake_balance_substates_down_state_version_down_o~" ON validator_stake_balance_substates (down_state_version, down_operation_group_index);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE UNIQUE INDEX "IX_validator_stake_balance_substates_epoch_validator_id" ON validator_stake_balance_substates (epoch, validator_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_validator_stake_balance_substates_validator_id" ON validator_stake_balance_substates (validator_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE UNIQUE INDEX "IX_validator_stake_history_current_stake" ON validator_stake_history (validator_id) WHERE to_state_version is null;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_validator_stake_history_from_state_version" ON validator_stake_history (from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_validator_stake_history_to_state_version" ON validator_stake_history (to_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE UNIQUE INDEX "IX_validators_address" ON validators (address) INCLUDE (id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    CREATE INDEX "IX_validators_from_state_version" ON validators (from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211210063157_InitialCreate') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20211210063157_InitialCreate', '6.0.1');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211212234011_FurtherTweaksToMempoolTransactions') THEN
    ALTER TABLE mempool_transactions RENAME COLUMN submission_failure_reason TO failure_reason;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211212234011_FurtherTweaksToMempoolTransactions') THEN
    ALTER TABLE mempool_transactions RENAME COLUMN last_seen_in_mempool_timestamp TO last_missing_from_mempool_timestamp;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211212234011_FurtherTweaksToMempoolTransactions') THEN
    ALTER TABLE mempool_transactions ADD failure_explanation text NULL;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211212234011_FurtherTweaksToMempoolTransactions') THEN
    ALTER TABLE mempool_transactions ADD failure_timestamp timestamp with time zone NULL;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211212234011_FurtherTweaksToMempoolTransactions') THEN
    ALTER TABLE mempool_transactions ADD submission_count integer NOT NULL DEFAULT 0;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211212234011_FurtherTweaksToMempoolTransactions') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20211212234011_FurtherTweaksToMempoolTransactions', '6.0.1');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211213012013_MinorRenameToMempoolTransactionsStatusColumn') THEN
    ALTER TABLE mempool_transactions RENAME COLUMN submission_status TO status;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211213012013_MinorRenameToMempoolTransactionsStatusColumn') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20211213012013_MinorRenameToMempoolTransactionsStatusColumn', '6.0.1');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211213173329_UseRoundTimestampOverNormalizedTimestamp') THEN
    DROP INDEX "IX_ledger_transactions_timestamp";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211213173329_UseRoundTimestampOverNormalizedTimestamp') THEN
    ALTER TABLE ledger_transactions RENAME COLUMN timestamp TO normalized_timestamp;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211213173329_UseRoundTimestampOverNormalizedTimestamp') THEN
    CREATE INDEX "IX_ledger_transactions_round_timestamp" ON ledger_transactions (round_timestamp);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211213173329_UseRoundTimestampOverNormalizedTimestamp') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20211213173329_UseRoundTimestampOverNormalizedTimestamp', '6.0.1');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211222163306_AddLedgerStatusEntity') THEN
    CREATE TABLE ledger_status (
        id integer NOT NULL,
        top_of_ledger_state_version bigint NOT NULL,
        sync_status_target_state_version bigint NOT NULL,
        last_updated timestamp with time zone NOT NULL,
        CONSTRAINT "PK_ledger_status" PRIMARY KEY (id),
        CONSTRAINT "FK_ledger_status_top_transactions_state_version" FOREIGN KEY (top_of_ledger_state_version) REFERENCES ledger_transactions (state_version)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211222163306_AddLedgerStatusEntity') THEN
    CREATE INDEX "IX_ledger_status_top_of_ledger_state_version" ON ledger_status (top_of_ledger_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211222163306_AddLedgerStatusEntity') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20211222163306_AddLedgerStatusEntity', '6.0.1');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220112153836_AddStatusIndexOnMempoolTransactionAndEpochIndexOnLedgerTransaction') THEN
    CREATE INDEX "IX_mempool_transactions_status" ON mempool_transactions (status);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220112153836_AddStatusIndexOnMempoolTransactionAndEpochIndexOnLedgerTransaction') THEN
    CREATE UNIQUE INDEX "IX_ledger_transactions_epoch" ON ledger_transactions (epoch) WHERE is_start_of_epoch = true;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220112153836_AddStatusIndexOnMempoolTransactionAndEpochIndexOnLedgerTransaction') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20220112153836_AddStatusIndexOnMempoolTransactionAndEpochIndexOnLedgerTransaction', '6.0.1');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220131143251_FixAccountResourceHistoryForeignKeys') THEN
    ALTER TABLE account_resource_balance_history DROP CONSTRAINT "FK_account_resource_balance_history_ledger_transactions_from_s~";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220131143251_FixAccountResourceHistoryForeignKeys') THEN
    ALTER TABLE account_resource_balance_history DROP CONSTRAINT "FK_account_resource_balance_history_ledger_transactions_to_sta~";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220131143251_FixAccountResourceHistoryForeignKeys') THEN
    ALTER TABLE account_resource_balance_history ADD CONSTRAINT "FK_account_resource_balance_history_from_transaction" FOREIGN KEY (from_state_version) REFERENCES ledger_transactions (state_version) ON DELETE CASCADE;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220131143251_FixAccountResourceHistoryForeignKeys') THEN
    ALTER TABLE account_resource_balance_history ADD CONSTRAINT "FK_account_resource_balance_history_to_transaction" FOREIGN KEY (to_state_version) REFERENCES ledger_transactions (state_version) ON DELETE RESTRICT;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220131143251_FixAccountResourceHistoryForeignKeys') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20220131143251_FixAccountResourceHistoryForeignKeys', '6.0.1');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220427122411_AddValidatorSystemMetadataSubstates') THEN
    CREATE TABLE validator_system_metadata_substates (
        up_state_version bigint NOT NULL,
        up_operation_group_index integer NOT NULL,
        up_operation_index_in_group integer NOT NULL,
        validator_id bigint NOT NULL,
        full_bytes bytea NULL,
        fork_name text NULL,
        fork_id bytea NULL,
        nonce bytea NULL,
        down_state_version bigint NULL,
        down_operation_group_index integer NULL,
        down_operation_index_in_group integer NULL,
        substate_identifier bytea NOT NULL,
        CONSTRAINT "PK_validator_system_metadata_substates" PRIMARY KEY (up_state_version, up_operation_group_index, up_operation_index_in_group),
        CONSTRAINT "AK_validator_system_metadata_substates_substate_identifier" UNIQUE (substate_identifier),
        CONSTRAINT "FK_validator_system_metadata_substate_down_operation_group" FOREIGN KEY (down_state_version, down_operation_group_index) REFERENCES operation_groups (state_version, operation_group_index) ON DELETE RESTRICT,
        CONSTRAINT "FK_validator_system_metadata_substate_up_operation_group" FOREIGN KEY (up_state_version, up_operation_group_index) REFERENCES operation_groups (state_version, operation_group_index) ON DELETE CASCADE,
        CONSTRAINT "FK_validator_system_metadata_substates_validators_validator_id" FOREIGN KEY (validator_id) REFERENCES validators (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220427122411_AddValidatorSystemMetadataSubstates') THEN
    CREATE INDEX "IX_validator_system_metadata_substates_down_state_version_down~" ON validator_system_metadata_substates (down_state_version, down_operation_group_index);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220427122411_AddValidatorSystemMetadataSubstates') THEN
    CREATE INDEX "IX_validator_system_metadata_substates_validator_id" ON validator_system_metadata_substates (validator_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220427122411_AddValidatorSystemMetadataSubstates') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20220427122411_AddValidatorSystemMetadataSubstates', '6.0.1');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220428101716_UpdateValidatorSystemMetadataSubstateNonceHashName') THEN
    ALTER TABLE validator_system_metadata_substates RENAME COLUMN nonce TO nonce_hash;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220428101716_UpdateValidatorSystemMetadataSubstateNonceHashName') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20220428101716_UpdateValidatorSystemMetadataSubstateNonceHashName', '6.0.1');
    END IF;
END $EF$;
COMMIT;

