CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TYPE account_default_deposit_rule AS ENUM ('accept', 'reject', 'allow_existing');
    CREATE TYPE account_resource_preference_rule AS ENUM ('allowed', 'disallowed');
    CREATE TYPE entity_type AS ENUM ('global_consensus_manager', 'global_fungible_resource', 'global_non_fungible_resource', 'global_generic_component', 'internal_generic_component', 'global_account_component', 'global_package', 'internal_key_value_store', 'internal_fungible_vault', 'internal_non_fungible_vault', 'global_validator', 'global_access_controller', 'global_identity', 'global_one_resource_pool', 'global_two_resource_pool', 'global_multi_resource_pool', 'global_transaction_tracker');
    CREATE TYPE ledger_transaction_marker_event_type AS ENUM ('withdrawal', 'deposit');
    CREATE TYPE ledger_transaction_marker_operation_type AS ENUM ('resource_in_use', 'account_deposited_into', 'account_withdrawn_from');
    CREATE TYPE ledger_transaction_marker_origin_type AS ENUM ('user', 'epoch_change');
    CREATE TYPE ledger_transaction_marker_type AS ENUM ('origin', 'event', 'manifest_address', 'affected_global_entity');
    CREATE TYPE ledger_transaction_status AS ENUM ('succeeded', 'failed');
    CREATE TYPE ledger_transaction_type AS ENUM ('genesis', 'user', 'round_update');
    CREATE TYPE module_id AS ENUM ('main', 'metadata', 'royalty', 'role_assignment');
    CREATE TYPE non_fungible_id_type AS ENUM ('string', 'integer', 'bytes', 'ruid');
    CREATE TYPE package_vm_type AS ENUM ('native', 'scrypto_v1');
    CREATE TYPE pending_transaction_intent_ledger_status AS ENUM ('unknown', 'committed', 'commit_pending', 'permanent_rejection', 'possible_to_commit', 'likely_but_not_certain_rejection');
    CREATE TYPE pending_transaction_payload_ledger_status AS ENUM ('unknown', 'committed', 'commit_pending', 'clashing_commit', 'permanently_rejected', 'transiently_accepted', 'transiently_rejected');
    CREATE TYPE public_key_type AS ENUM ('ecdsa_secp256k1', 'eddsa_ed25519');
    CREATE TYPE resource_type AS ENUM ('fungible', 'non_fungible');
    CREATE TYPE sbor_type_kind AS ENUM ('well_known', 'schema_local');
    CREATE TYPE state_type AS ENUM ('json', 'sbor');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE account_default_deposit_rule_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        account_entity_id bigint NOT NULL,
        default_deposit_rule account_default_deposit_rule NOT NULL,
        CONSTRAINT "PK_account_default_deposit_rule_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE account_resource_preference_rule_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        account_entity_id bigint NOT NULL,
        resource_entity_id bigint NOT NULL,
        account_resource_preference_rule account_resource_preference_rule NULL,
        is_deleted boolean NOT NULL,
        CONSTRAINT "PK_account_resource_preference_rule_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE component_method_royalty_entry_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        entity_id bigint NOT NULL,
        method_name text NOT NULL,
        royalty_amount jsonb NULL,
        is_locked boolean NOT NULL,
        CONSTRAINT "PK_component_method_royalty_entry_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE entities (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        address text NOT NULL,
        is_global boolean NOT NULL,
        ancestor_ids bigint[] NULL,
        parent_ancestor_id bigint NULL,
        owner_ancestor_id bigint NULL,
        global_ancestor_id bigint NULL,
        correlated_entities bigint[] NOT NULL,
        discriminator entity_type NOT NULL,
        package_id bigint NULL,
        blueprint_name text NULL,
        blueprint_version text NULL,
        divisibility integer NULL,
        non_fungible_id_type non_fungible_id_type NULL,
        vm_type package_vm_type NULL,
        stake_vault_entity_id bigint NULL,
        pending_xrd_withdraw_vault_entity_id bigint NULL,
        locked_owner_stake_unit_vault_entity_id bigint NULL,
        pending_owner_stake_unit_unlock_vault_entity_id bigint NULL,
        royalty_vault_of_entity_id bigint NULL,
        resource_entity_id bigint NULL,
        CONSTRAINT "PK_entities" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE entity_metadata_aggregate_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        entity_id bigint NOT NULL,
        metadata_ids bigint[] NOT NULL,
        CONSTRAINT "PK_entity_metadata_aggregate_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE entity_metadata_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        entity_id bigint NOT NULL,
        key text NOT NULL,
        value bytea NULL,
        is_deleted boolean NOT NULL,
        is_locked boolean NOT NULL,
        CONSTRAINT "PK_entity_metadata_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE entity_resource_aggregate_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        entity_id bigint NOT NULL,
        fungible_resource_entity_ids bigint[] NOT NULL,
        fungible_resource_significant_update_state_versions bigint[] NOT NULL,
        non_fungible_resource_entity_ids bigint[] NOT NULL,
        non_fungible_resource_significant_update_state_versions bigint[] NOT NULL,
        CONSTRAINT "PK_entity_resource_aggregate_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE entity_resource_aggregated_vaults_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        entity_id bigint NOT NULL,
        resource_entity_id bigint NOT NULL,
        discriminator resource_type NOT NULL,
        balance numeric(1000) NULL,
        total_count bigint NULL,
        CONSTRAINT "PK_entity_resource_aggregated_vaults_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE entity_resource_vault_aggregate_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        entity_id bigint NOT NULL,
        resource_entity_id bigint NOT NULL,
        vault_entity_ids bigint[] NOT NULL,
        CONSTRAINT "PK_entity_resource_vault_aggregate_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE entity_role_assignments_aggregate_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        entity_id bigint NOT NULL,
        owner_role_id bigint NOT NULL,
        entry_ids bigint[] NOT NULL,
        CONSTRAINT "PK_entity_role_assignments_aggregate_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE entity_role_assignments_entry_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        entity_id bigint NOT NULL,
        key_role text NOT NULL,
        key_module module_id NOT NULL,
        role_assignments jsonb NULL,
        is_deleted boolean NOT NULL,
        CONSTRAINT "PK_entity_role_assignments_entry_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE entity_role_assignments_owner_role_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        entity_id bigint NOT NULL,
        role_assignments jsonb NOT NULL,
        CONSTRAINT "PK_entity_role_assignments_owner_role_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE entity_vault_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        owner_entity_id bigint NOT NULL,
        global_entity_id bigint NOT NULL,
        vault_entity_id bigint NOT NULL,
        resource_entity_id bigint NOT NULL,
        discriminator resource_type NOT NULL,
        balance numeric(1000) NULL,
        is_royalty_vault boolean NULL,
        non_fungible_ids bigint[] NULL,
        CONSTRAINT "PK_entity_vault_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE key_value_store_entry_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        key_value_store_entity_id bigint NOT NULL,
        key bytea NOT NULL,
        value bytea NULL,
        is_deleted boolean NOT NULL,
        is_locked boolean NOT NULL,
        CONSTRAINT "PK_key_value_store_entry_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE key_value_store_schema_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        key_value_store_entity_id bigint NOT NULL,
        key_schema_hash bytea NOT NULL,
        key_schema_defining_entity_id bigint NOT NULL,
        key_sbor_type_kind sbor_type_kind NOT NULL,
        key_type_index bigint NOT NULL,
        value_schema_hash bytea NOT NULL,
        value_schema_defining_entity_id bigint NOT NULL,
        value_sbor_type_kind sbor_type_kind NOT NULL,
        value_type_index bigint NOT NULL,
        CONSTRAINT "PK_key_value_store_schema_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE ledger_transaction_markers (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        state_version bigint NOT NULL,
        discriminator ledger_transaction_marker_type NOT NULL,
        entity_id bigint NULL,
        event_type ledger_transaction_marker_event_type NULL,
        resource_entity_id bigint NULL,
        quantity numeric(1000) NULL,
        operation_type ledger_transaction_marker_operation_type NULL,
        origin_type ledger_transaction_marker_origin_type NULL,
        CONSTRAINT "PK_ledger_transaction_markers" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE ledger_transactions (
        state_version bigint NOT NULL,
        epoch bigint NOT NULL,
        round_in_epoch bigint NOT NULL,
        index_in_epoch bigint NOT NULL,
        index_in_round bigint NOT NULL,
        fee_paid numeric(1000) NOT NULL,
        tip_paid numeric(1000) NOT NULL,
        affected_global_entities bigint[] NOT NULL,
        round_timestamp timestamp with time zone NOT NULL,
        created_timestamp timestamp with time zone NOT NULL,
        normalized_round_timestamp timestamp with time zone NOT NULL,
        receipt_status ledger_transaction_status NOT NULL,
        receipt_fee_summary jsonb NOT NULL,
        receipt_state_updates jsonb NOT NULL,
        receipt_costing_parameters jsonb NOT NULL,
        receipt_fee_source jsonb NULL,
        receipt_fee_destination jsonb NULL,
        receipt_next_epoch jsonb NULL,
        receipt_output jsonb NULL,
        receipt_error_message text NULL,
        receipt_event_emitters jsonb[] NOT NULL,
        receipt_event_names text[] NOT NULL,
        receipt_event_sbors bytea[] NOT NULL,
        receipt_event_schema_entity_ids bigint[] NOT NULL,
        receipt_event_schema_hashes bytea[] NOT NULL,
        receipt_event_type_indexes bigint[] NOT NULL,
        receipt_event_sbor_type_kinds sbor_type_kind[] NOT NULL,
        transaction_tree_hash text NOT NULL,
        receipt_tree_hash text NOT NULL,
        state_tree_hash text NOT NULL,
        discriminator ledger_transaction_type NOT NULL,
        payload_hash text NULL,
        intent_hash text NULL,
        signed_intent_hash text NULL,
        message jsonb NULL,
        raw_payload bytea NULL,
        CONSTRAINT "PK_ledger_transactions" PRIMARY KEY (state_version)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE network_configuration (
        id integer NOT NULL,
        network_id smallint NOT NULL,
        network_name text NOT NULL,
        hrp_definition jsonb NOT NULL,
        well_known_addresses jsonb NOT NULL,
        address_type_definitions jsonb NOT NULL,
        genesis_epoch bigint NOT NULL,
        genesis_round bigint NOT NULL,
        CONSTRAINT "PK_network_configuration" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE non_fungible_id_data (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        non_fungible_resource_entity_id bigint NOT NULL,
        non_fungible_id text NOT NULL,
        CONSTRAINT "PK_non_fungible_id_data" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE non_fungible_id_data_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        non_fungible_id_data_id bigint NOT NULL,
        data bytea NULL,
        is_deleted boolean NOT NULL,
        is_locked boolean NOT NULL,
        CONSTRAINT "PK_non_fungible_id_data_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE non_fungible_id_location_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        non_fungible_id_data_id bigint NOT NULL,
        vault_entity_id bigint NOT NULL,
        CONSTRAINT "PK_non_fungible_id_location_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE non_fungible_id_store_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        non_fungible_resource_entity_id bigint NOT NULL,
        non_fungible_id_data_ids bigint[] NOT NULL,
        CONSTRAINT "PK_non_fungible_id_store_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE non_fungible_schema_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        resource_entity_id bigint NOT NULL,
        schema_defining_entity_id bigint NOT NULL,
        schema_hash bytea NOT NULL,
        sbor_type_kind sbor_type_kind NOT NULL,
        type_index bigint NOT NULL,
        CONSTRAINT "PK_non_fungible_schema_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE package_blueprint_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        package_entity_id bigint NOT NULL,
        name text NOT NULL,
        version text NOT NULL,
        definition jsonb NOT NULL,
        dependant_entity_ids bigint[] NULL,
        auth_template jsonb NULL,
        auth_template_is_locked boolean NULL,
        royalty_config jsonb NULL,
        royalty_config_is_locked boolean NULL,
        CONSTRAINT "PK_package_blueprint_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE package_code_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        package_entity_id bigint NOT NULL,
        code_hash bytea NOT NULL,
        code bytea NOT NULL,
        CONSTRAINT "PK_package_code_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE pending_transaction_payloads (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        notarized_transaction_blob bytea NOT NULL,
        CONSTRAINT "PK_pending_transaction_payloads" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE resource_entity_supply_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        resource_entity_id bigint NOT NULL,
        total_supply numeric(1000) NOT NULL,
        total_minted numeric(1000) NOT NULL,
        total_burned numeric(1000) NOT NULL,
        CONSTRAINT "PK_resource_entity_supply_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE schema_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        entity_id bigint NOT NULL,
        schema_hash bytea NOT NULL,
        schema bytea NOT NULL,
        CONSTRAINT "PK_schema_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE state_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        entity_id bigint NOT NULL,
        discriminator state_type NOT NULL,
        json_state jsonb NULL,
        sbor_state bytea NULL,
        schema_hash bytea NULL,
        sbor_type_kind sbor_type_kind NULL,
        type_index bigint NULL,
        schema_defining_entity_id bigint NULL,
        CONSTRAINT "PK_state_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE validator_emission_statistics (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        validator_entity_id bigint NOT NULL,
        epoch_number bigint NOT NULL,
        proposals_made bigint NOT NULL,
        proposals_missed bigint NOT NULL,
        CONSTRAINT "PK_validator_emission_statistics" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE validator_public_key_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        validator_entity_id bigint NOT NULL,
        key_type public_key_type NOT NULL,
        key bytea NOT NULL,
        CONSTRAINT "PK_validator_public_key_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE pending_transactions (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        payload_hash text NOT NULL,
        intent_hash text NOT NULL,
        end_epoch_exclusive numeric(20,0) NOT NULL,
        payload_id bigint NOT NULL,
        payload_status pending_transaction_payload_ledger_status NOT NULL,
        intent_status pending_transaction_intent_ledger_status NOT NULL,
        initial_rejection_reason text NULL,
        latest_rejection_reason text NULL,
        latest_rejection_timestamp timestamp with time zone NULL,
        commit_timestamp timestamp with time zone NULL,
        resubmit_from_timestamp timestamp with time zone NULL,
        handling_status_reason text NULL,
        first_submitted_to_gateway_timestamp timestamp with time zone NOT NULL,
        node_submission_count integer NOT NULL,
        latest_node_submission_timestamp timestamp with time zone NULL,
        latest_submitted_to_node_name text NULL,
        latest_node_submission_was_accepted boolean NOT NULL,
        last_submit_error text NULL,
        CONSTRAINT "PK_pending_transactions" PRIMARY KEY (id),
        CONSTRAINT "FK_pending_transactions_pending_transaction_payloads_payload_id" FOREIGN KEY (payload_id) REFERENCES pending_transaction_payloads (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE TABLE validator_active_set_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        epoch bigint NOT NULL,
        validator_public_key_history_id bigint NOT NULL,
        stake numeric(1000) NOT NULL,
        CONSTRAINT "PK_validator_active_set_history" PRIMARY KEY (id),
        CONSTRAINT "FK_validator_active_set_history_validator_public_key_history_v~" FOREIGN KEY (validator_public_key_history_id) REFERENCES validator_public_key_history (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_account_default_deposit_rule_history_account_entity_id_from~" ON account_default_deposit_rule_history (account_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_account_resource_preference_rule_history_account_entity_id_~" ON account_resource_preference_rule_history (account_entity_id, resource_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_component_method_royalty_entry_history_entity_id_from_state~" ON component_method_royalty_entry_history (entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_component_method_royalty_entry_history_entity_id_method_nam~" ON component_method_royalty_entry_history (entity_id, method_name, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE UNIQUE INDEX "IX_entities_address" ON entities (address);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entities_from_state_version" ON entities (from_state_version) WHERE discriminator = 'global_validator';
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entity_metadata_aggregate_history_entity_id_from_state_vers~" ON entity_metadata_aggregate_history (entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entity_metadata_history_entity_id_key_from_state_version" ON entity_metadata_history (entity_id, key, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entity_resource_aggregate_history_entity_id_from_state_vers~" ON entity_resource_aggregate_history (entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entity_resource_aggregated_vaults_history_entity_id_resourc~" ON entity_resource_aggregated_vaults_history (entity_id, resource_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entity_resource_vault_aggregate_history_entity_id_resource_~" ON entity_resource_vault_aggregate_history (entity_id, resource_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entity_role_assignments_aggregate_history_entity_id_from_st~" ON entity_role_assignments_aggregate_history (entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entity_role_assignments_entry_history_entity_id_key_role_ke~" ON entity_role_assignments_entry_history (entity_id, key_role, key_module, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entity_role_assignments_owner_role_history_entity_id_from_s~" ON entity_role_assignments_owner_role_history (entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entity_vault_history_global_entity_id_from_state_version" ON entity_vault_history (global_entity_id, from_state_version) WHERE is_royalty_vault = true;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entity_vault_history_global_entity_id_vault_entity_id_from_~" ON entity_vault_history (global_entity_id, vault_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entity_vault_history_id_resource_entity_id_from_state_versi~" ON entity_vault_history (id, resource_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entity_vault_history_owner_entity_id_from_state_version" ON entity_vault_history (owner_entity_id, from_state_version) WHERE is_royalty_vault = true;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entity_vault_history_owner_entity_id_vault_entity_id_from_s~" ON entity_vault_history (owner_entity_id, vault_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_entity_vault_history_vault_entity_id_from_state_version" ON entity_vault_history (vault_entity_id, from_state_version) WHERE discriminator = 'non_fungible';
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_key_value_store_entry_history_key_value_store_entity_id_key~" ON key_value_store_entry_history (key_value_store_entity_id, key, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_key_value_store_schema_history_key_value_store_entity_id_fr~" ON key_value_store_schema_history (key_value_store_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_ledger_transaction_markers_entity_id_state_version" ON ledger_transaction_markers (entity_id, state_version) WHERE discriminator = 'affected_global_entity';
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_ledger_transaction_markers_event_type_entity_id_state_versi~" ON ledger_transaction_markers (event_type, entity_id, state_version) WHERE discriminator = 'event';
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_ledger_transaction_markers_operation_type_entity_id_state_v~" ON ledger_transaction_markers (operation_type, entity_id, state_version) WHERE discriminator = 'manifest_address';
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_ledger_transaction_markers_origin_type_state_version" ON ledger_transaction_markers (origin_type, state_version) WHERE discriminator = 'origin';
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_ledger_transaction_markers_state_version" ON ledger_transaction_markers (state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE UNIQUE INDEX "IX_ledger_transactions_epoch_round_in_epoch" ON ledger_transactions (epoch, round_in_epoch) WHERE index_in_round = 0;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_ledger_transactions_intent_hash" ON ledger_transactions USING hash (intent_hash) WHERE intent_hash IS NOT NULL;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_ledger_transactions_round_timestamp" ON ledger_transactions (round_timestamp);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_non_fungible_id_data_non_fungible_resource_entity_id_from_s~" ON non_fungible_id_data (non_fungible_resource_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE UNIQUE INDEX "IX_non_fungible_id_data_non_fungible_resource_entity_id_non_fu~" ON non_fungible_id_data (non_fungible_resource_entity_id, non_fungible_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_non_fungible_id_data_history_non_fungible_id_data_id_from_s~" ON non_fungible_id_data_history (non_fungible_id_data_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_non_fungible_id_location_history_non_fungible_id_data_id_fr~" ON non_fungible_id_location_history (non_fungible_id_data_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_non_fungible_id_store_history_non_fungible_resource_entity_~" ON non_fungible_id_store_history (non_fungible_resource_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_non_fungible_schema_history_resource_entity_id_from_state_v~" ON non_fungible_schema_history (resource_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_package_blueprint_history_package_entity_id_from_state_vers~" ON package_blueprint_history (package_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_package_blueprint_history_package_entity_id_name_version_fr~" ON package_blueprint_history (package_entity_id, name, version, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_package_code_history_package_entity_id_from_state_version" ON package_code_history (package_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_pending_transactions_first_submitted_to_gateway_timestamp" ON pending_transactions (first_submitted_to_gateway_timestamp);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_pending_transactions_intent_hash" ON pending_transactions (intent_hash);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE UNIQUE INDEX "IX_pending_transactions_payload_hash" ON pending_transactions (payload_hash);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_pending_transactions_payload_id" ON pending_transactions (payload_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_pending_transactions_resubmit_from_timestamp" ON pending_transactions (resubmit_from_timestamp);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_resource_entity_supply_history_resource_entity_id_from_stat~" ON resource_entity_supply_history (resource_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_schema_history_entity_id_from_state_version" ON schema_history (entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_schema_history_schema_hash_from_state_version" ON schema_history (schema_hash, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_state_history_entity_id_from_state_version" ON state_history (entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_validator_active_set_history_epoch" ON validator_active_set_history (epoch);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_validator_active_set_history_from_state_version" ON validator_active_set_history (from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_validator_active_set_history_validator_public_key_history_id" ON validator_active_set_history (validator_public_key_history_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_validator_emission_statistics_validator_entity_id_epoch_num~" ON validator_emission_statistics (validator_entity_id, epoch_number);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_validator_public_key_history_validator_entity_id_from_state~" ON validator_public_key_history (validator_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    CREATE INDEX "IX_validator_public_key_history_validator_entity_id_key_type_k~" ON validator_public_key_history (validator_entity_id, key_type, key);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230922041840_InitialCreate') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230922041840_InitialCreate', '7.0.11');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231101101154_InversePendingTransactionPayloadRelationship') THEN
    ALTER TABLE pending_transactions DROP CONSTRAINT "FK_pending_transactions_pending_transaction_payloads_payload_id";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231101101154_InversePendingTransactionPayloadRelationship') THEN
    DROP INDEX "IX_pending_transactions_payload_id";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231101101154_InversePendingTransactionPayloadRelationship') THEN
    ALTER TABLE pending_transactions ALTER COLUMN payload_id DROP NOT NULL;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231101101154_InversePendingTransactionPayloadRelationship') THEN
    ALTER TABLE pending_transaction_payloads ADD pending_transaction_id bigint NULL;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231101101154_InversePendingTransactionPayloadRelationship') THEN
    CREATE UNIQUE INDEX "IX_pending_transaction_payloads_pending_transaction_id" ON pending_transaction_payloads (pending_transaction_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231101101154_InversePendingTransactionPayloadRelationship') THEN
    ALTER TABLE pending_transaction_payloads ADD CONSTRAINT "FK_pending_transaction_payloads_pending_transactions_pending_t~" FOREIGN KEY (pending_transaction_id) REFERENCES pending_transactions (id) ON DELETE CASCADE;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231101101154_InversePendingTransactionPayloadRelationship') THEN
    UPDATE pending_transaction_payloads ptp SET pending_transaction_id = pt.id FROM pending_transactions pt WHERE pt.payload_id = ptp.id;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231101101154_InversePendingTransactionPayloadRelationship') THEN
    DELETE FROM pending_transaction_payloads WHERE id IN (SELECT ptp.id FROM pending_transaction_payloads ptp LEFT JOIN pending_transactions pt ON ptp.id = pt.payload_id WHERE pt.id IS NULL);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231101101154_InversePendingTransactionPayloadRelationship') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20231101101154_InversePendingTransactionPayloadRelationship', '7.0.11');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231122094710_AddLedgerTransactionBalanceChanges') THEN
    ALTER TABLE ledger_transactions ADD balance_changes jsonb NULL;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231122094710_AddLedgerTransactionBalanceChanges') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20231122094710_AddLedgerTransactionBalanceChanges', '7.0.11');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231130132946_AddNetworkHrpSuffixToNetworkConfiguration') THEN
    ALTER TABLE network_configuration ADD network_hrp_suffix text NULL;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231130132946_AddNetworkHrpSuffixToNetworkConfiguration') THEN
    update network_configuration set network_hrp_suffix = (select substring(recordset."HrpPrefix"::text,'_(.+)') from network_configuration, jsonb_to_recordset(address_type_definitions) as recordset("HrpPrefix" TEXT) WHERE recordset."HrpPrefix" like '%account%' limit 1)
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231130132946_AddNetworkHrpSuffixToNetworkConfiguration') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20231130132946_AddNetworkHrpSuffixToNetworkConfiguration', '7.0.11');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240119095226_SupportProtocolUpdate') THEN
    ALTER TABLE entities DROP COLUMN vm_type;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240119095226_SupportProtocolUpdate') THEN
    ALTER TYPE ledger_transaction_type ADD VALUE 'flash';
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240119095226_SupportProtocolUpdate') THEN
    ALTER TABLE package_code_history ADD is_deleted boolean NOT NULL DEFAULT FALSE;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240119095226_SupportProtocolUpdate') THEN
    ALTER TABLE package_code_history ADD vm_type package_vm_type NOT NULL DEFAULT 'native'::package_vm_type;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240119095226_SupportProtocolUpdate') THEN
    CREATE TABLE package_blueprint_aggregate_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        package_entity_id bigint NOT NULL,
        package_blueprint_ids bigint[] NOT NULL,
        CONSTRAINT "PK_package_blueprint_aggregate_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240119095226_SupportProtocolUpdate') THEN
    CREATE TABLE package_code_aggregate_history (
        id bigint GENERATED BY DEFAULT AS IDENTITY,
        from_state_version bigint NOT NULL,
        package_entity_id bigint NOT NULL,
        package_code_ids bigint[] NOT NULL,
        CONSTRAINT "PK_package_code_aggregate_history" PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240119095226_SupportProtocolUpdate') THEN
    CREATE INDEX "IX_package_blueprint_aggregate_history_package_entity_id_from_~" ON package_blueprint_aggregate_history (package_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240119095226_SupportProtocolUpdate') THEN
    CREATE INDEX "IX_package_code_aggregate_history_package_entity_id_from_state~" ON package_code_aggregate_history (package_entity_id, from_state_version);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240119095226_SupportProtocolUpdate') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20240119095226_SupportProtocolUpdate', '7.0.11');
    END IF;
END $EF$;
COMMIT;

