#
# This is a copy of an original Core API OAS that's not meant to be ever upgraded.
#
openapi: 3.0.0
components:
  schemas:
#############################################
# GENERAL / SHARED MODELS - Request Options #
#############################################
    CoreApiNetworkIdentifier:
      description: The logical name of the network
      type: string
      example: "{{network}}"
    CoreApiSborFormatOptions:
      type: object
      description: Requested SBOR formats to include in the response
      properties:
        raw:
          description: Whether to return the raw hex-encoded bytes (default true)
          type: boolean
        programmatic_json:
          description: Whether to return the programmatic json format (normally default true, defaults false for streamed transactions)
          type: boolean
    CoreApiTransactionFormatOptions:
      type: object
      description: Requested transaction formats to include in the response
      properties:
        manifest:
          description: Whether to return the raw manifest (default true)
          type: boolean
        blobs:
          description: Whether to return the hex-encoded blobs (default false)
          type: boolean
        message:
          description: Whether to return the transaction message (default true)
          type: boolean
        balance_changes:
          description: Whether to return the transaction balance changes (default false)
          type: boolean
        raw_system_transaction:
          description: Whether to return the raw hex-encoded system transaction bytes (default false)
          type: boolean
        raw_notarized_transaction:
          description: Whether to return the raw hex-encoded notarized transaction bytes (default true)
          type: boolean
        raw_ledger_transaction:
          description: Whether to return the raw hex-encoded ledger transaction bytes (default false)
          type: boolean
    CoreApiSubstateFormatOptions:
      type: object
      description: Requested substate formats to include in the response
      properties:
        raw:
          description: Whether to return the raw substate value bytes (default false)
          type: boolean
        hash:
          description: Whether to return the raw substate value bytes hash (default false)
          type: boolean
        typed:
          description: Whether to return the typed substate information (default true)
          type: boolean
        previous:
          description: Whether to return the previous substate value for updates and deletes (default false)
          type: boolean
    CoreApiLedgerStateSelectorType:
      type: string
      enum:
        - ByStateVersion
    CoreApiLedgerStateSelector:
      description: |
        An optional specification of a historical ledger state at which to execute the request.
        The "historical state" feature (see the `db.historical_substate_values.enable` flag) must be
        enabled on the Node, and the requested point in history must be recent enough (in accordance
        with the Node's configured `state_hash_tree.state_version_history_length`).
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/CoreApiLedgerStateSelectorType'
      discriminator:
        propertyName: type
        mapping:
          ByStateVersion: '#/components/schemas/CoreApiVersionLedgerStateSelector'
          # Currently no other options exist, but we plan to have e.g. `ByTimestamp` in future.
    CoreApiVersionLedgerStateSelector:
      allOf:
        - $ref: '#/components/schemas/CoreApiLedgerStateSelector'
        - type: object
          required:
            - state_version
          properties:
            state_version:
              description: An exact version at which to execute the request.
              $ref: "#/components/schemas/CoreApiStateVersion"
############################################
# GENERAL / SHARED MODELS - General Models #
############################################
    CoreApiErrorResponseType:
      type: string
      enum:
        - Basic
        - TransactionSubmit
        - LtsTransactionSubmit
        - StreamTransactions
        - StreamProofs
    CoreApiErrorResponse:
      type: object
      discriminator:
        propertyName: error_type
        mapping:
          # NOTE: These need to match ErrorResponseType
          Basic: "#/components/schemas/CoreApiBasicErrorResponse"
          TransactionSubmit: "#/components/schemas/CoreApiTransactionSubmitErrorResponse"
          LtsTransactionSubmit: "#/components/schemas/CoreApiLtsTransactionSubmitErrorResponse"
          StreamTransactions: "#/components/schemas/CoreApiStreamTransactionsErrorResponse"
          StreamProofs: "#/components/schemas/CoreApiStreamProofsErrorResponse"
      required:
        - error_type
        - code
        - message
      properties:
        error_type:
          $ref: "#/components/schemas/CoreApiErrorResponseType"
        code:
          type: integer
          description: A numeric code corresponding to the given HTTP error code.
        message:
          description: A human-readable error message.
          type: string
        trace_id:
          description: A GUID to be used when reporting errors, to allow correlation with the Core API's error logs, in the case where the Core API details are hidden.
          type: string
    CoreApiBasicErrorResponse:
      allOf:
        - $ref: "#/components/schemas/CoreApiErrorResponse"
        - type: object
    CoreApiContinuationToken:
      type: string
      description: |
        A continuation token is returned if and only if there are further non-empty pages of items currently available.
        The token can be provided in a following request to fetch the next page of results.
        The filter and sort should not be changed when re-using the continuation token.
###########################################################
# GENERAL / SHARED MODELS - General / Numeric / Utilities #
###########################################################
    CoreApiDecimal:
      type: string
      description: |
        A string-encoded fixed-precision decimal to 18 decimal places.
        A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
##########################################
# GENERAL / SHARED MODELS - Transactions #
##########################################
    CoreApiTransactionStatus:
      type: string
      enum:
        - Succeeded
        - Failed
        - Rejected
      description: The status of the transaction
    CoreApiTransactionReceipt:
      type: object
      description: The transaction execution receipt
      required:
        - status
        - state_updates
        - fee_summary
        - costing_parameters
      properties:
        status:
          $ref: "#/components/schemas/CoreApiTransactionStatus"
        fee_summary:
          $ref: "#/components/schemas/CoreApiFeeSummary"
        costing_parameters:
          $ref: "#/components/schemas/CoreApiCostingParameters"
        fee_source:
          description: Only present if the `status` is not `Rejected`.
          $ref: "#/components/schemas/CoreApiFeeSource"
        fee_destination:
          description: Only present if the `status` is not `Rejected`.
          $ref: "#/components/schemas/CoreApiFeeDestination"
        state_updates:
          $ref: "#/components/schemas/CoreApiStateUpdates"
        events:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiEvent"
        next_epoch:
          $ref: "#/components/schemas/CoreApiNextEpoch"
        output:
          type: array
          description: The manifest line-by-line engine return data (only present if `status` is `Succeeded`)
          items:
            $ref: "#/components/schemas/CoreApiSborData"
        error_message:
          type: string
          description: Error message (only present if status is `Failed` or `Rejected`)
    CoreApiNotarizedTransaction:
      type: object
      required:
        - hash
        - hash_bech32m
        - signed_intent
        - notary_signature
      properties:
        hash:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHash"
        hash_bech32m:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHashBech32m"
        payload_hex:
          type: string
          description: The hex-encoded full notarized transaction payload. Returning this can be disabled in TransactionFormatOptions on your request (default true).
        signed_intent:
          $ref: "#/components/schemas/CoreApiSignedTransactionIntent"
        notary_signature:
          $ref: "#/components/schemas/CoreApiSignature"
    CoreApiSignedTransactionIntent:
      type: object
      required:
        - hash
        - hash_bech32m
        - intent
        - intent_signatures
      properties:
        hash:
          $ref: "#/components/schemas/CoreApiSignedIntentHash"
        hash_bech32m:
          $ref: "#/components/schemas/CoreApiSignedIntentHashBech32m"
        intent:
          $ref: "#/components/schemas/CoreApiTransactionIntent"
        intent_signatures:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiSignatureWithPublicKey"
    CoreApiTransactionIntent:
      type: object
      required:
        - hash
        - hash_bech32m
        - header
      properties:
        hash:
          $ref: "#/components/schemas/CoreApiIntentHash"
        hash_bech32m:
          $ref: "#/components/schemas/CoreApiIntentHashBech32m"
        header:
          $ref: "#/components/schemas/CoreApiTransactionHeader"
        instructions:
          type: string
          description: The decompiled transaction manifest instructions. Only returned if enabled in `TransactionFormatOptions` on your request.
        blobs_hex:
          type: object
          description: A map of the hex-encoded blob hash, to hex-encoded blob content. Only returned if enabled in `TransactionFormatOptions` on your request.
          additionalProperties:
            type: string
            description: The hex-encoded blob content
        message:
          description: The optional transaction message. Only returned if present and enabled in `TransactionFormatOptions` on your request.
          $ref: "#/components/schemas/CoreApiTransactionMessage"
    CoreApiTransactionMessageType:
      type: string
      enum:
        - Plaintext
        - Encrypted
    CoreApiTransactionMessage:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiTransactionMessageType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match TransactionMessageType
          Plaintext: '#/components/schemas/CoreApiPlaintextTransactionMessage'
          Encrypted: '#/components/schemas/CoreApiEncryptedTransactionMessage'
    CoreApiPlaintextTransactionMessage:
      allOf:
        - $ref: "#/components/schemas/CoreApiTransactionMessage"
        - type: object
          description: An unencrypted message.
          required:
            - mime_type
            - content
          properties:
            mime_type:
              type: string
              description: |
                Intended to represent the RFC 2046 MIME type of the `content`.
                A client cannot trust that this field is a valid mime type - in particular, the
                choice between `String` or `Binary` representation of the content is not enforced by
                this `mime_type`.
            content:
              $ref: "#/components/schemas/CoreApiPlaintextMessageContent"
    CoreApiPlaintextMessageContentType:
      type: string
      enum:
        - String
        - Binary
    CoreApiPlaintextMessageContent:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiPlaintextMessageContentType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match PlaintextMessageContentType
          String: '#/components/schemas/CoreApiStringPlaintextMessageContent'
          Binary: '#/components/schemas/CoreApiBinaryPlaintextMessageContent'
    CoreApiStringPlaintextMessageContent:
      allOf:
        - $ref: "#/components/schemas/CoreApiPlaintextMessageContent"
        - type: object
          required:
            - value
          properties:
            value:
              type: string
              description: The value of a message that the author decided to provide as a UTF-8 string.
    CoreApiBinaryPlaintextMessageContent:
      allOf:
        - $ref: "#/components/schemas/CoreApiPlaintextMessageContent"
        - type: object
          required:
            - value_hex
          properties:
            value_hex:
              type: string
              description: The hex-encoded value of a message that the author decided to provide as raw bytes.
    CoreApiEncryptedTransactionMessage:
      allOf:
        - $ref: "#/components/schemas/CoreApiTransactionMessage"
        - type: object
          description: A `PlaintextTransactionMessage` encrypted with "Multi-party ECIES" for a number of decryptors (public keys).
          required:
            - encrypted_hex
            - curve_decryptor_sets
          properties:
            encrypted_hex:
              type: string
              description: |
                The hex-encoded (128-bit) AES-GCM encrypted bytes of an SBOR-encoded `PlaintextTransactionMessage`.
                The bytes are serialized as the concatenation `Nonce/IV (12 bytes) || Cipher (variable length) || Tag/MAC (16 bytes)`:
            curve_decryptor_sets:
              type: array
              items:
                $ref: "#/components/schemas/CoreApiEncryptedMessageCurveDecryptorSet"
    CoreApiEncryptedMessageCurveDecryptorSet:
      type: object
      description: |
        A decryptor set for a particular ECDSA curve type.
        The (128-bit) AES-GCM symmetric key is encrypted separately for each decryptor public key via (256-bit) AES-KeyWrap.
        AES-KeyWrap uses a key derived via a KDF (Key Derivation Function) using a shared secret.
        For each decryptor public key, we create a shared curve point `G` via static Diffie-Helman between the decryptor public key, and a per-transaction ephemeral public key for that curve type.
        We then use that shared secret with a key derivation function to create the (256-bit) KEK (Key Encrypting Key):
        `KEK = HKDF(hash: Blake2b, secret: x co-ord of G, salt: [], length: 256 bits)`.
      required:
        - dh_ephemeral_public_key
        - decryptors
      properties:
        dh_ephemeral_public_key:
          description: The ephemeral Diffie-Helman public key for a particular ECDSA curve type (see its `key_type`).
          $ref: "#/components/schemas/CoreApiPublicKey"
        decryptors:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiEncryptedMessageDecryptor"
    CoreApiEncryptedMessageDecryptor:
      type: object
      required:
        - public_key_fingerprint_hex
        - aes_wrapped_key_hex
      properties:
        public_key_fingerprint_hex:
          type: string
          description: The last 8 bytes of the Blake2b-256 hash of the public key bytes, in their standard Radix byte-serialization.
        aes_wrapped_key_hex:
          type: string
          description: |
            The hex-encoded wrapped key bytes from applying RFC 3394 (256-bit) AES-KeyWrap to the 128-bit message ephemeral public key, with the secret KEK provided by static Diffie-Helman between the decryptor public key, and the `dh_ephemeral_public_key` for that curve type.
            The bytes are serialized (according to RFC 3394) as the concatenation `IV (first 8 bytes) || Cipher (wrapped 128-bit key, encoded as two 64-bit blocks)`.
    CoreApiTransactionHeader:
      type: object
      required:
        - network_id
        - start_epoch_inclusive
        - end_epoch_exclusive
        - nonce
        - notary_public_key
        - notary_is_signatory
        - tip_percentage
      properties:
        network_id:
          $ref: "#/components/schemas/CoreApiNetworkIdentifierByte"
        start_epoch_inclusive:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch from which the transaction can be submitted.
            In the case of uncommitted transactions, a value of `10^10` indicates that the epoch was >= `10^10`.
        end_epoch_exclusive:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be rejected.
            In the case of uncommitted transactions, a value of `10^10` indicates that the epoch was >= `10^10`.
        nonce:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: |
            An integer between `0` and `2^32 - 1`, chosen to allow a unique intent to be created (to enable submitting an otherwise identical/duplicate intent).
        notary_public_key:
          $ref: "#/components/schemas/CoreApiPublicKey"
        notary_is_signatory:
          type: boolean
          description: Specifies whether the notary public key should be included in the transaction signers list
        tip_percentage:
          type: integer
          format: int32
          minimum: 0
          maximum: 65535
          description: An integer between `0` and `65535`, giving the validator tip as a percentage amount. A value of `1` corresponds to 1% of the fee.
    CoreApiNetworkIdentifierByte:
      description: The logical id of the network
      type: integer
      format: int32
      minimum: 0
      maximum: 255
    CoreApiLedgerStateSummary:
      type: object
      required:
        - state_version
        - header_summary
      properties:
        state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: The version at which the state was read.
        header_summary:
          $ref: "#/components/schemas/CoreApiLedgerHeaderSummary"
          description: The excerpt from the ledger header committed at the `state_version`.
    CoreApiLedgerHeaderSummary:
      type: object
      required:
        - epoch_round
        - ledger_hashes
        - proposer_timestamp
      properties:
        epoch_round:
          $ref: "#/components/schemas/CoreApiEpochRound"
        ledger_hashes:
          $ref: "#/components/schemas/CoreApiLedgerHashes"
        proposer_timestamp:
          description: |
            The time at which the consensus leader created the proposal for extending the ledger to
            the represented point.

            Note: in abnormal cases (e.g. Byzantine network quorum), this on-ledger field may be set
            to an arbitrary, extreme value allowed by 64-bit signed integer. The API will still
            clamp the timestamp to `0 <= ms <= 100000000000000 (== 10^14)`, which translates to
            `1970-01-01T00:00:00.000Z <= t <= 5138-11-16T09:46:40.000Z`.
          $ref: '#/components/schemas/CoreApiInstantMs'
    CoreApiLedgerHashes:
      type: object
      required:
        - state_tree_hash
        - transaction_tree_hash
        - receipt_tree_hash
      properties:
        state_tree_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded root hash of the state tree. This captures the current state of the state on the ledger.
        transaction_tree_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded root hash of the transaction tree. This captures the ledger transactions committed to the ledger.
        receipt_tree_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded root hash of the receipt tree. This captures the consensus-agreed output of each transaction on the ledger.
    CoreApiStateVersion:
      type: integer
      format: int64
      minimum: 1
      maximum: 100000000000000
    CoreApiTransactionIdentifiers:
      type: object
      required:
        - intent_hash
        - intent_hash_bech32m
        - signed_intent_hash
        - signed_intent_hash_bech32m
        - payload_hash
        - payload_hash_bech32m
      properties:
        intent_hash:
          $ref: "#/components/schemas/CoreApiIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/CoreApiIntentHashBech32m"
        signed_intent_hash:
          $ref: "#/components/schemas/CoreApiSignedIntentHash"
        signed_intent_hash_bech32m:
          $ref: "#/components/schemas/CoreApiSignedIntentHashBech32m"
        payload_hash:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHash"
        payload_hash_bech32m:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHashBech32m"
    CoreApiIntentHashInput:
      type: string
      description: |
        The intent hash for a user transaction, also known as the transaction id.
        This hash identifies the core content "intent" of the transaction. Each intent can only be committed once.
        This hash gets signed by any signatories on the transaction, to create the signed intent.
        Either hex or Bech32m-encoded strings are supported.
    CoreApiIntentHash:
      type: string
      minLength: 64
      maxLength: 64
      description: |
        The hex-encoded intent hash for a user transaction, also known as the transaction id.
        This hash identifies the core content "intent" of the transaction. Each intent can only be committed once.
        This hash gets signed by any signatories on the transaction, to create the signed intent.
    CoreApiIntentHashBech32m:
      type: string
      description: The Bech32m-encoded human readable `IntentHash`.
    CoreApiSignedIntentHash:
      type: string
      minLength: 64
      maxLength: 64
      description: |
        The hex-encoded signed intent hash for a user transaction.
        This hash identifies the transaction intent, plus additional signatures.
        This hash is signed by the notary, to create the submittable NotarizedTransaction.
    CoreApiSignedIntentHashBech32m:
      type: string
      description: The Bech32m-encoded human readable `SignedIntentHash`.
    CoreApiNotarizedTransactionHashInput:
      type: string
      description: |
        This hash identifies the full submittable notarized transaction - ie the signed intent, plus the notary signature.
        This hash should either be hex or Bech32m-encoded.
    CoreApiNotarizedTransactionHash:
      type: string
      minLength: 64
      maxLength: 64
      description: |
        The hex-encoded notarized transaction hash for a user transaction.
        This hash identifies the full submittable notarized transaction - ie the signed intent, plus the notary signature.
    CoreApiNotarizedTransactionHashBech32m:
      type: string
      description: The Bech32m-encoded human readable `NotarizedTransactionHash`.
    CoreApiLedgerPayloadHash:
      type: string
      minLength: 64
      maxLength: 64
      description: |
        The hex-encoded ledger payload transaction hash.
        This is a wrapper for both user transactions, and system transactions such as genesis and round changes.
    CoreApiLedgerPayloadHashBech32m:
      type: string
      description: The Bech32m-encoded human readable `LedgerPayloadHash`.
    CoreApiCommittedIntentMetadata:
      type: object
      required:
        - state_version
        - payload_hash
        - payload_hash_bech32m
        - is_same_transaction
      properties:
        state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: State version of a committed transaction which had the same intent.
        payload_hash:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHash"
        payload_hash_bech32m:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHashBech32m"
        is_same_transaction:
          type: boolean
          description: |
            Whether the intent was committed in a transaction with the same payload.
            This is a convenience field, which can also be computed using `payload_hash` by a client
            knowing the payload of the submitted transaction.
######################################
# GENERAL / SHARED MODELS - Receipts #
######################################
    CoreApiFeeSummary:
      type: object
      required:
        - execution_cost_units_consumed
        - finalization_cost_units_consumed
        - xrd_total_execution_cost
        - xrd_total_finalization_cost
        - xrd_total_storage_cost
        - xrd_total_royalty_cost
        - xrd_total_tipping_cost
      properties:
        execution_cost_units_consumed:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the amount of cost units consumed by the transaction execution.
        finalization_cost_units_consumed:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the amount of cost units consumed by the transaction finalization.
        xrd_total_execution_cost:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD burned in the transaction as part of execution costs.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_total_finalization_cost:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD burned in the transaction as part of finalization costs.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_total_royalty_cost:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD paid in royalties as part of the transaction.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_total_storage_cost:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD paid in state expansion costs as part of the transaction.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_total_tipping_cost:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD tipped to validators in the transaction.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiCostingParameters:
      type: object
      required:
        - execution_cost_unit_price
        - execution_cost_unit_limit
        - execution_cost_unit_loan
        - finalization_cost_unit_price
        - finalization_cost_unit_limit
        - xrd_usd_price
        - xrd_storage_price
        - xrd_archive_storage_price
        - tip_percentage
      properties:
        execution_cost_unit_price:
          type: string
          description: |
            The string-encoded decimal representing the XRD price of a single cost unit of transaction execution.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        execution_cost_unit_limit:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the maximum amount of cost units available for the transaction execution.
        execution_cost_unit_loan:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the maximum number of cost units which can be used before fee is locked from a vault.
        finalization_cost_unit_price:
          type: string
          description: |
            The string-encoded decimal representing the XRD price of a single cost unit of transaction finalization.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        finalization_cost_unit_limit:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the maximum amount of cost units available for the transaction finalization.
        xrd_usd_price:
          type: string
          description: |
            The string-encoded decimal representing what amount of XRD is consumed by a Royalty of 1 USD.
            This is fixed for a given protocol version, so is not an accurate representation of the XRD price.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_storage_price:
          type: string
          description: |
            The string-encoded decimal representing the price of 1 byte of state storage, expressed in XRD.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_archive_storage_price:
          type: string
          description: |
            The string-encoded decimal representing the price of 1 byte of archive storage, expressed in XRD.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        tip_percentage:
          type: integer
          format: int32
          minimum: 0
          maximum: 65535
          description: An integer between `0` and `65535`, giving the validator tip as a percentage amount. A value of `1` corresponds to 1% of the fee.
    CoreApiFeeSource:
      type: object
      required:
        - from_vaults
      properties:
        from_vaults:
          type: array
          description: A breakdown of which vaults were used to pay the fee.
          items:
            $ref: "#/components/schemas/CoreApiPaymentFromVault"
    CoreApiPaymentFromVault:
      type: object
      required:
        - vault_entity
        - xrd_amount
      properties:
        vault_entity:
          $ref: "#/components/schemas/CoreApiEntityReference"
        xrd_amount:
          type: string
          description: |
            The string-encoded decimal representing the amount of fee in XRD paid by this vault.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiFeeDestination:
      type: object
      required:
        - to_proposer
        - to_validator_set
        - to_burn
        - to_royalty_recipients
      properties:
        to_proposer:
          type: string
          description: |
            The string-encoded decimal representing the amount of fee in XRD paid to the proposer.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        to_validator_set:
          type: string
          description: |
            The string-encoded decimal representing the amount of fee in XRD paid to the validator set.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        to_burn:
          type: string
          description: |
            The string-encoded decimal representing the amount of fee burnt, in XRD.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        to_royalty_recipients:
          type: array
          description: |
            A breakdown of where the royalties were paid to.
          items:
            $ref: "#/components/schemas/CoreApiPaymentToRoyaltyRecipient"
    CoreApiPaymentToRoyaltyRecipient:
      type: object
      required:
        - royalty_recipient
        - xrd_amount
      properties:
        royalty_recipient:
          $ref: "#/components/schemas/CoreApiEntityReference"
        xrd_amount:
          type: string
          description: |
            The string-encoded decimal representing the amount of fee in XRD paid as royalty to this recipient.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiProposerReward:
      type: object
      required:
        - validator_index
        - xrd_amount
      properties:
        validator_index:
          $ref: "#/components/schemas/CoreApiActiveValidatorIndex"
        xrd_amount:
          type: string
          description: |
            The string-encoded decimal representing the amount of reward in XRD.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiStateUpdates:
      type: object
      description: Transaction state updates (only present if status is Succeeded or Failed)
      required:
        - deleted_partitions
        - created_substates
        - updated_substates
        - deleted_substates
        - new_global_entities
      properties:
        deleted_partitions:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiPartitionId"
        created_substates:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiCreatedSubstate"
        updated_substates:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiUpdatedSubstate"
        deleted_substates:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiDeletedSubstate"
        new_global_entities:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiEntityReference"
    CoreApiNextEpoch:
      type: object
      required:
        - epoch
        - validators
      properties:
        epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the new epoch
        validators:
          type: array
          items:
            $ref: '#/components/schemas/CoreApiActiveValidator'
          description: Active validator set for the new epoch, ordered by stake descending.
        significant_protocol_update_readiness:
          type: array
          items:
            $ref: '#/components/schemas/CoreApiSignificantProtocolUpdateReadinessEntry'
    CoreApiSignificantProtocolUpdateReadinessEntry:
      type: object
      required:
        - readiness_signal_name
        - signalled_stake
      properties:
        readiness_signal_name:
          type: string
        signalled_stake:
          type: string
    CoreApiCreatedSubstate:
      type: object
      required:
        - substate_id
        - value
        - system_structure
      properties:
        substate_id:
          $ref: "#/components/schemas/CoreApiSubstateId"
        value:
          $ref: "#/components/schemas/CoreApiSubstateValue"
          description: The initial value assigned to the substate.
        system_structure:
          $ref: "#/components/schemas/CoreApiSubstateSystemStructure"
          description: A structure with type references describing the substate's schema.
    CoreApiUpdatedSubstate:
      type: object
      required:
        - substate_id
        - new_value
        - system_structure
      properties:
        substate_id:
          $ref: "#/components/schemas/CoreApiSubstateId"
        new_value:
          $ref: "#/components/schemas/CoreApiSubstateValue"
          description: The new value assigned to the substate.
        previous_value:
          $ref: "#/components/schemas/CoreApiSubstateValue"
          description: The previous value of the substate. Only returned if enabled in SubstateFormatOptions on your request (default false).
        system_structure:
          $ref: "#/components/schemas/CoreApiSubstateSystemStructure"
          description: A structure with type references describing the substate's schema.
    CoreApiSubstateValue:
      type: object
      properties:
        substate_hex:
          type: string
          description: The hex-encoded, SBOR-encoded substate data bytes. Only returned if enabled in SubstateFormatOptions on your request (default false).
        substate_data_hash:
          type: string
          description: The hex-encoded Blake2b-256 hash of the substate data bytes. Only returned if enabled in SubstateFormatOptions on your request (default false).
        substate_data:
          $ref: "#/components/schemas/CoreApiSubstate"
          description: The typed substate value. Only returned if enabled in SubstateFormatOptions on your request (default true).
    CoreApiDeletedSubstate:
      type: object
      required:
        - substate_id
        - system_structure
      properties:
        substate_id:
          $ref: "#/components/schemas/CoreApiSubstateId"
        previous_value:
          $ref: "#/components/schemas/CoreApiSubstateValue"
          description: The previous value of the substate. Only returned if enabled in SubstateFormatOptions on your request (default false).
        system_structure:
          $ref: "#/components/schemas/CoreApiSubstateSystemStructure"
          description: A structure with type references describing the substate's schema.
    CoreApiEntityReference:
      type: object
      required:
        - entity_type
        - is_global
        - entity_address
      properties:
        entity_type:
          $ref: "#/components/schemas/CoreApiEntityType"
        is_global:
          type: boolean
        entity_address:
          $ref: "#/components/schemas/CoreApiEntityAddress"
    CoreApiPartitionId:
      type: object
      required:
        - entity_type
        - entity_address
        - entity_module
        - partition_kind
        - partition_number
      properties:
        entity_type:
          $ref: "#/components/schemas/CoreApiEntityType"
        entity_address:
          $ref: "#/components/schemas/CoreApiEntityAddress"
        entity_module:
          $ref: "#/components/schemas/CoreApiEntityModule"
        partition_kind:
          $ref: "#/components/schemas/CoreApiPartitionKind"
        partition_number:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
    CoreApiSubstateId:
      allOf:
        - $ref: "#/components/schemas/CoreApiPartitionId"
        - type: object
          required:
            - substate_type
            - substate_key
          properties:
            substate_type:
              $ref: "#/components/schemas/CoreApiSubstateType"
            substate_key:
              $ref: "#/components/schemas/CoreApiSubstateKey"
    CoreApiEntityModule:
      type: string
      enum:
        - TypeInfo
        - Metadata
        - RoleAssignment
        - Royalty
        - Main
        - Schema
        - BootLoader
    CoreApiPartitionKind:
      type: string
      description: |
        The type of the partition:
        - Field
          - Has key: TupleKey(u8) also known as an offset
          - No iteration exposed to engine
          - Is versioned / locked substate-by-substate
        - KeyValue ("ConcurrentMap")
          - Has key: MapKey(Vec<u8>)
          - No iteration exposed to engine
          - Is versioned / locked substate-by-substate
        - Index
          - Has key: MapKey(Vec<u8>)
          - Iteration exposed to engine via the MapKey's database key (ie hash of the key)
          - Is versioned / locked in its entirety
        - SortedIndex
          - Has key: SortedU16Key(U16, Vec<u8>)
          - Iteration exposed to engine via the user-controlled U16 prefix and then the MapKey's database key (ie hash of the key)
          - Is versioned / locked in its entirety
      enum:
        - Field
        - KeyValue
        - Index
        - SortedIndex
    CoreApiPartitionDescriptionType:
      type: string
      enum:
        - Logical
        - Physical
    CoreApiPartitionDescription:
      type: object
      required:
        - type
        - value
      properties:
        type:
          $ref: '#/components/schemas/CoreApiPartitionDescriptionType'
        value:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          description: |
            An absolute or relative partition description, depending on the `type`:
            - if `Physical`, then this is a partition number,
            - if `Logical`, then this is a partition offset.
    CoreApiBlueprintPayloadDefType:
      type: string
      enum:
        - Static
        - Generic
    CoreApiBlueprintPayloadDef:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiBlueprintPayloadDefType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match BlueprintPayloadDefType
          Static: '#/components/schemas/CoreApiStaticBlueprintPayloadDef'
          Generic: '#/components/schemas/CoreApiGenericBlueprintPayloadDef'
    CoreApiStaticBlueprintPayloadDef:
      allOf:
        - $ref: "#/components/schemas/CoreApiBlueprintPayloadDef"
        - type: object
          required:
            - type_id
          properties:
            type_id:
              $ref: "#/components/schemas/CoreApiScopedTypeId"
    CoreApiGenericBlueprintPayloadDef:
      allOf:
        - $ref: "#/components/schemas/CoreApiBlueprintPayloadDef"
        - type: object
          required:
            - generic_index
          properties:
            generic_index:
              type: integer
              format: int32
              minimum: 0
              maximum: 255
              description: An index within the list of generic type substitutions.
    CoreApiFullyScopedTypeId:
      type: object
      description: |
        An identifier for a type in the context of a schema in an entity's schema partition.

        Note - this type provides a schema context even for well-known types where this context
        is effectively irrelevant.
      required:
        - entity_address
        - schema_hash
        - local_type_id
      properties:
        entity_address:
          $ref: '#/components/schemas/CoreApiEntityAddress'
        schema_hash:
          $ref: '#/components/schemas/CoreApiSchemaHash'
        local_type_id:
          $ref: '#/components/schemas/CoreApiLocalTypeId'
    CoreApiScopedTypeId:
      type: object
      description: |
        An identifier for a type in the context of a schema.

        The location of the schema store to locate the schema is not included, and
        is known from context. Currently the schema store will be in the
        schema partition under a node (typically a package).

        Note - this type provides scoping to a schema even for well-known types where
        the schema is irrelevant.
      required:
        - schema_hash
        - local_type_id
      properties:
        schema_hash:
          $ref: '#/components/schemas/CoreApiSchemaHash'
        local_type_id:
          $ref: '#/components/schemas/CoreApiLocalTypeId'
    CoreApiBlueprintTypeIdentifier:
      type: object
      description: |
        An identifier for a defined type in the v1 blueprint version under the given package blueprint.
      required:
        - package_address
        - blueprint_name
        - type_name
      properties:
        package_address:
          $ref: '#/components/schemas/CoreApiPackageAddress'
        blueprint_name:
          type: string
        type_name:
          type: string
    CoreApiSubstateKey:
      type: object
      required:
        - key_type
        - db_sort_key_hex
      properties:
        key_type:
          $ref: '#/components/schemas/CoreApiSubstateKeyType'
        db_sort_key_hex:
          type: string
          description: The hex-encoded bytes of the partially-hashed DB sort key, under the given entity partition
      discriminator:
        propertyName: key_type
        mapping:
          Field: '#/components/schemas/CoreApiFieldSubstateKey'
          Map: '#/components/schemas/CoreApiMapSubstateKey'
          Sorted: '#/components/schemas/CoreApiSortedSubstateKey'
    CoreApiSubstateKeyType:
      type: string
      enum:
        - Field
        - Map
        - Sorted
    CoreApiFieldSubstateKey:
      allOf:
        - $ref: "#/components/schemas/CoreApiSubstateKey"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int32
              minimum: 0
              maximum: 255
    CoreApiMapSubstateKey:
      allOf:
        - $ref: "#/components/schemas/CoreApiSubstateKey"
        - type: object
          required:
            - key_hex
          properties:
            key_hex:
              type: string
              description: The hex-encoded bytes of the substate key
    CoreApiSortedSubstateKey:
      allOf:
        - $ref: "#/components/schemas/CoreApiSubstateKey"
        - type: object
          required:
            - sort_prefix_hex
            - key_hex
          properties:
            sort_prefix_hex:
              type: string
              description: The hex-encoded bytes of the sorted part of the key
            key_hex:
              type: string
              description: The hex-encoded remaining bytes of the key
    CoreApiResourceAddress:
      type: string
      description: The Bech32m-encoded human readable version of the resource address
    CoreApiComponentAddress:
      type: string
      description: The Bech32m-encoded human readable version of the component address
    CoreApiPackageAddress:
      type: string
      description: The Bech32m-encoded human readable version of the package address
    CoreApiGlobalAddress:
      type: string
      description: The Bech32m-encoded human readable version of any global address
    CoreApiInstantMs:
      type: object
      required:
        - unix_timestamp_ms
        - date_time
      properties:
        unix_timestamp_ms:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^14`, marking the unix timestamp in ms.
        date_time:
          type: string
          description: |
            The RFC 3339 / ISO 8601 string representation of the timestamp. Will always use "Z"
            (denoting UTC) and include milliseconds (even if `000`).
            E.g.: `2023-01-26T18:30:09.453Z`.
    CoreApiScryptoInstant:
      type: object
      required:
        - unix_timestamp_seconds
      properties:
        unix_timestamp_seconds:
          type: string
          description: |
            A decimal string-encoded 64-bit signed integer, marking the unix timestamp in seconds.

            Note: this field accurately represents the full range of possible on-ledger values (i.e.
            `-2^63 <= seconds < 2^63`). This is contrary to the `InstantMs` type used in other
            places of this API.
        date_time:
          type: string
          description: |
            The RFC 3339 / ISO 8601 string representation of the timestamp. Will always use "Z"
            (denoting UTC) and a second-precision (i.e. *skipping* the `.000` milliseconds part).
            E.g.: `2023-01-26T18:30:09Z`.

            Note: This field will *not* be present if the actual on-ledger `unix_timestamp_seconds`
            value is outside the basic range supported by the RFC 3339 / ISO 8601 standard, which
            starts at year 1583 (i.e. the beginning of the Gregorian calendar) and ends at year
            9999 (inclusive).
    CoreApiInstructionResourceChanges:
      type: object
      required:
        - index
        - resource_changes
      properties:
        index:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
        resource_changes:
          type: array
          items:
            $ref: '#/components/schemas/CoreApiResourceChange'
    CoreApiResourceChange:
      type: object
      required:
        - resource_address
        - component_entity
        - vault_entity
        - amount
      properties:
        resource_address:
          $ref: "#/components/schemas/CoreApiResourceAddress"
        component_entity:
          $ref: "#/components/schemas/CoreApiEntityReference"
        vault_entity:
          $ref: "#/components/schemas/CoreApiEntityReference"
        amount:
          type: string
          description: |
            The string-encoded decimal representing the XRD amount put or taken from the vault.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiEvent:
      description: Event emitted by a transaction.
      type: object
      required:
        - type
        - data
      properties:
        type:
          $ref: "#/components/schemas/CoreApiEventTypeIdentifier"
        data:
          $ref: "#/components/schemas/CoreApiSborData"
    CoreApiEventTypeIdentifier:
      description: Identifier of a specific event schema.
      type: object
      required:
        - emitter
        - type_reference
        - name
      properties:
        emitter:
          $ref: "#/components/schemas/CoreApiEventEmitterIdentifier"
        type_reference:
          $ref: '#/components/schemas/CoreApiPackageTypeReference'
        name:
          type: string
    CoreApiEventEmitterIdentifierType:
      type: string
      enum:
        - Function
        - Method
    CoreApiEventEmitterIdentifier:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiEventEmitterIdentifierType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match EventEmitterIdentifierType
          Function: '#/components/schemas/CoreApiFunctionEventEmitterIdentifier'
          Method: '#/components/schemas/CoreApiMethodEventEmitterIdentifier'
    CoreApiFunctionEventEmitterIdentifier:
      allOf:
        - $ref: "#/components/schemas/CoreApiEventEmitterIdentifier"
        - type: object
          required:
            - package_address
            - blueprint_name
          properties:
            package_address:
              $ref: "#/components/schemas/CoreApiPackageAddress"
            blueprint_name:
              type: string
              description: The blueprint under the package which emitted the event.
    CoreApiMethodEventEmitterIdentifier:
      allOf:
        - $ref: "#/components/schemas/CoreApiEventEmitterIdentifier"
        - type: object
          required:
            - entity
            - object_module_id
          properties:
            entity:
              $ref: "#/components/schemas/CoreApiEntityReference"
            object_module_id:
              $ref: "#/components/schemas/CoreApiModuleId"

#################################################
# GENERAL / SHARED MODELS - keys and signatures #
#################################################
    CoreApiPublicKeyType:
      type: string
      enum:
        - EcdsaSecp256k1
        - EddsaEd25519
    CoreApiPublicKey:
      type: object
      required:
        - key_type
      properties:
        key_type:
          $ref: "#/components/schemas/CoreApiPublicKeyType"
      discriminator:
        propertyName: key_type
        mapping:
          # NOTE: These need to match PublicKeyType
          EcdsaSecp256k1: '#/components/schemas/CoreApiEcdsaSecp256k1PublicKey'
          EddsaEd25519: '#/components/schemas/CoreApiEddsaEd25519PublicKey'
    CoreApiEcdsaSecp256k1PublicKey:
      allOf:
        - $ref: "#/components/schemas/CoreApiPublicKey"
        - type: object
          required:
            - key_hex
          properties:
            key_hex:
              type: string
              minLength: 66
              maxLength: 66
              description: The hex-encoded compressed ECDSA Secp256k1 public key (33 bytes)
    CoreApiEddsaEd25519PublicKey:
      allOf:
        - $ref: "#/components/schemas/CoreApiPublicKey"
        - type: object
          required:
            - key_hex
          properties:
            key_hex:
              type: string
              minLength: 64
              maxLength: 64
              description: The hex-encoded compressed EdDSA Ed25519 public key (32 bytes)
    CoreApiSignature:
      type: object
      required:
        - key_type
      properties:
        key_type:
          $ref: "#/components/schemas/CoreApiPublicKeyType"
      discriminator:
        propertyName: key_type
        mapping:
          # NOTE: These need to match PublicKeyType
          EcdsaSecp256k1: '#/components/schemas/CoreApiEcdsaSecp256k1Signature'
          EddsaEd25519: '#/components/schemas/CoreApiEddsaEd25519Signature'
    CoreApiEcdsaSecp256k1Signature:
      allOf:
        - $ref: "#/components/schemas/CoreApiSignature"
        - type: object
          required:
            - signature_hex
          properties:
            signature_hex:
              type: string
              minLength: 130
              maxLength: 130
              description: A hex-encoded recoverable ECDSA Secp256k1 signature (65 bytes). The first byte is the recovery id, the remaining 64 bytes are the compact signature, ie `CONCAT(R, s)` where `R` and `s` are each 32-bytes in padded big-endian format.
    CoreApiEddsaEd25519Signature:
      allOf:
        - $ref: "#/components/schemas/CoreApiSignature"
        - type: object
          required:
            - signature_hex
          properties:
            signature_hex:
              type: string
              minLength: 128
              maxLength: 128
              description: A hex-encoded EdDSA Ed25519 signature (64 bytes). This is `CONCAT(R, s)` where `R` and `s` are each 32-bytes in padded big-endian format.
    CoreApiSignatureWithPublicKey:
      type: object
      required:
        - key_type
      properties:
        key_type:
          $ref: "#/components/schemas/CoreApiPublicKeyType"
      discriminator:
        propertyName: key_type
        mapping:
          # NOTE: These need to match PublicKeyType
          EcdsaSecp256k1: '#/components/schemas/CoreApiEcdsaSecp256k1SignatureWithPublicKey'
          EddsaEd25519: '#/components/schemas/CoreApiEddsaEd25519SignatureWithPublicKey'
    CoreApiEcdsaSecp256k1SignatureWithPublicKey:
      allOf:
        - $ref: "#/components/schemas/CoreApiSignatureWithPublicKey"
        - type: object
          required:
            - recoverable_signature
          description: Because ECDSA has recoverable signatures, this only includes a signature
          properties:
            recoverable_signature:
              $ref: '#/components/schemas/CoreApiEcdsaSecp256k1Signature'
    CoreApiEddsaEd25519SignatureWithPublicKey:
      allOf:
        - $ref: "#/components/schemas/CoreApiSignatureWithPublicKey"
        - type: object
          required:
            - public_key
            - signature
          description: The EdDSA public key and signature
          properties:
            public_key:
              $ref: '#/components/schemas/CoreApiEddsaEd25519PublicKey'
            signature:
              $ref: '#/components/schemas/CoreApiEddsaEd25519Signature'
##########################################
# GENERAL / SHARED MODELS - Access Rules #
##########################################
    CoreApiAccessRuleType:
      type: string
      enum:
        - Protected
        - AllowAll
        - DenyAll
    CoreApiAccessRule:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/CoreApiAccessRuleType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match AccessRuleType options above
          Protected: '#/components/schemas/CoreApiProtectedAccessRule'
          AllowAll: '#/components/schemas/CoreApiAllowAllAccessRule'
          DenyAll: '#/components/schemas/CoreApiDenyAllAccessRule'
    CoreApiProtectedAccessRule:
      allOf:
        - $ref: '#/components/schemas/CoreApiAccessRule'
        - type: object
          required:
            - access_rule
          properties:
            access_rule:
              $ref: '#/components/schemas/CoreApiAccessRuleNode'
    CoreApiAllowAllAccessRule:
      allOf:
        - $ref: '#/components/schemas/CoreApiAccessRule'
        - type: object
    CoreApiDenyAllAccessRule:
      allOf:
        - $ref: '#/components/schemas/CoreApiAccessRule'
        - type: object
    CoreApiAccessRuleNodeType:
      type: string
      enum:
        - ProofRule
        - AnyOf
        - AllOf
    CoreApiAccessRuleNode:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/CoreApiAccessRuleNodeType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match AccessRuleNodeType options above
          ProofRule: '#/components/schemas/CoreApiProofAccessRuleNode'
          AnyOf: '#/components/schemas/CoreApiAnyOfAccessRuleNode'
          AllOf: '#/components/schemas/CoreApiAllOfAccessRuleNode'
    CoreApiProofAccessRuleNode:
      allOf:
        - $ref: '#/components/schemas/CoreApiAccessRuleNode'
        - type: object
          required:
            - proof_rule
          properties:
            proof_rule:
              $ref: '#/components/schemas/CoreApiProofRule'
    CoreApiAnyOfAccessRuleNode:
      allOf:
        - $ref: '#/components/schemas/CoreApiAccessRuleNode'
        - type: object
          required:
            - access_rules
          properties:
            access_rules:
              type: array
              items:
                $ref: '#/components/schemas/CoreApiAccessRuleNode'
    CoreApiAllOfAccessRuleNode:
      allOf:
        - $ref: '#/components/schemas/CoreApiAccessRuleNode'
        - type: object
          required:
            - access_rules
          properties:
            access_rules:
              type: array
              items:
                $ref: '#/components/schemas/CoreApiAccessRuleNode'
    CoreApiProofRuleType:
      type: string
      enum:
        - Require
        - AmountOf
        - AllOf
        - AnyOf
        - CountOf
    CoreApiProofRule:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/CoreApiProofRuleType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match ProofRuleType options above
          Require: '#/components/schemas/CoreApiRequireProofRule'
          AmountOf: '#/components/schemas/CoreApiAmountOfProofRule'
          AllOf: '#/components/schemas/CoreApiAllOfProofRule'
          AnyOf: '#/components/schemas/CoreApiAnyOfProofRule'
          CountOf: '#/components/schemas/CoreApiCountOfProofRule'
    CoreApiRequireProofRule:
      allOf:
        - $ref: '#/components/schemas/CoreApiProofRule'
        - type: object
          required:
            - requirement
          properties:
            requirement:
              $ref: '#/components/schemas/CoreApiRequirement'
    CoreApiAmountOfProofRule:
      allOf:
        - $ref: '#/components/schemas/CoreApiProofRule'
        - type: object
          required:
            - amount
            - resource
          properties:
            amount:
              type: string
            resource:
              $ref: '#/components/schemas/CoreApiResourceAddress'
    CoreApiAllOfProofRule:
      allOf:
        - $ref: '#/components/schemas/CoreApiProofRule'
        - type: object
          required:
            - list
          properties:
            list:
              type: array
              items:
                $ref: '#/components/schemas/CoreApiRequirement'
    CoreApiAnyOfProofRule:
      allOf:
        - $ref: '#/components/schemas/CoreApiProofRule'
        - type: object
          required:
            - list
          properties:
            list:
              type: array
              items:
                $ref: '#/components/schemas/CoreApiRequirement'
    CoreApiCountOfProofRule:
      allOf:
        - $ref: '#/components/schemas/CoreApiProofRule'
        - type: object
          required:
            - count
            - list
          properties:
            count:
              type: integer
            list:
              type: array
              items:
                $ref: '#/components/schemas/CoreApiRequirement'
    CoreApiRequirement:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/CoreApiRequirementType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match RequirementType options below
          Resource: '#/components/schemas/CoreApiResourceRequirement'
          NonFungible: '#/components/schemas/CoreApiNonFungibleRequirement'
    CoreApiRequirementType:
      type: string
      enum:
        - Resource
        - NonFungible
    CoreApiResourceRequirement:
      allOf:
        - $ref: '#/components/schemas/CoreApiRequirement'
        - type: object
          required:
            - resource
          properties:
            resource:
              $ref: '#/components/schemas/CoreApiResourceAddress'
    CoreApiNonFungibleRequirement:
      allOf:
        - $ref: '#/components/schemas/CoreApiRequirement'
        - type: object
          required:
            - non_fungible
          properties:
            non_fungible:
              $ref: '#/components/schemas/CoreApiNonFungibleGlobalId'
    CoreApiOwnerRole:
      type: object
      required:
        - rule
        - updater
      properties:
        rule:
          $ref: '#/components/schemas/CoreApiAccessRule'
        updater:
          $ref: '#/components/schemas/CoreApiOwnerRoleUpdater'
    CoreApiOwnerRoleUpdater:
      type: string
      enum:
        - None
        - Owner
        - Object
#######################################
# GENERAL / SHARED MODELS - Resources #
#######################################
    CoreApiResourceType:
      type: string
      enum:
        - Fungible
        - NonFungible
    CoreApiNonFungibleIdType:
      type: string
      enum:
        - String
        - Integer
        - Bytes
        - RUID
    CoreApiNonFungibleLocalId:
      type: object
      required:
        - simple_rep
        - id_type
        - sbor_hex
      properties:
        simple_rep:
          $ref: '#/components/schemas/CoreApiNonFungibleLocalIdSimpleRepresentation'
        id_type:
          $ref: '#/components/schemas/CoreApiNonFungibleIdType'
        sbor_hex:
          type: string
          description: The hex-encoded SBOR-encoded bytes of its non-fungible id
    CoreApiNonFungibleLocalIdSimpleRepresentation:
      type: string
      description: |
        The simple string representation of the non-fungible id.
        * For string ids, this is `<the-string-id>`
        * For integer ids, this is `#the-integer-id#`
        * For bytes ids, this is `[the-lower-case-hex-representation]`
        * For RUID ids, this is `{...-...-...-...}` where `...` are each 16 hex characters.
        A given non-fungible resource has a fixed `NonFungibleIdType`, so this representation uniquely identifies this non-fungible
        under the given resource address.
    CoreApiNonFungibleGlobalId:
      type: object
      required:
        - resource_address
        - local_id
      properties:
        resource_address:
          $ref: "#/components/schemas/CoreApiResourceAddress"
        local_id:
          $ref: "#/components/schemas/CoreApiNonFungibleLocalId"
    CoreApiResourceAmount:
      type: object
      required:
        - resource_type
        - resource_address
      properties:
        resource_type:
          $ref: '#/components/schemas/CoreApiResourceType'
        resource_address:
          $ref: '#/components/schemas/CoreApiResourceAddress'
      discriminator:
        propertyName: resource_type
        mapping:
          # NOTE: These need to match ResourceType options
          Fungible: '#/components/schemas/CoreApiFungibleResourceAmount'
          NonFungible: '#/components/schemas/CoreApiNonFungibleResourceAmount'
    CoreApiFungibleResourceAmount:
      allOf:
        - $ref: '#/components/schemas/CoreApiResourceAmount'
        - type: object
          required:
            - amount
          properties:
            amount:
              type: string
              description: |
                The string-encoded decimal representing the amount of this resource (some decimal for fungible resources, a whole integer for non-fungible resources).
                A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiNonFungibleResourceAmount:
      allOf:
        - $ref: '#/components/schemas/CoreApiResourceAmount'
        - type: object
          required:
            - amount
            - non_fungible_ids
          properties:
            amount:
              type: string
              description: |
                The string-encoded decimal representing the amount of this resource (some decimal for fungible resources, a whole integer for non-fungible resources).
                A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
            non_fungible_ids:
              type: array
              items:
                $ref: '#/components/schemas/CoreApiNonFungibleLocalId'
    CoreApiPresentedBadgeType:
      type: string
      enum:
        - Resource
        - NonFungible
    CoreApiPresentedBadge:
      type: object
      required:
        - type
        - resource_address
      properties:
        type:
          $ref: '#/components/schemas/CoreApiPresentedBadgeType'
        resource_address:
          $ref: '#/components/schemas/CoreApiResourceAddress'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match PresentedBadgeType options above
          Resource: '#/components/schemas/CoreApiResourcePresentedBadge'
          NonFungible: '#/components/schemas/CoreApiNonFungiblePresentedBadge'
    CoreApiResourcePresentedBadge:
      allOf:
        - $ref: '#/components/schemas/CoreApiPresentedBadge'
        - type: object
    CoreApiNonFungiblePresentedBadge:
      allOf:
        - $ref: '#/components/schemas/CoreApiPresentedBadge'
        - type: object
          required:
            - local_id
          properties:
            local_id:
              $ref: '#/components/schemas/CoreApiNonFungibleLocalIdSimpleRepresentation'
##################################
# GENERAL / SHARED MODELS - SBOR #
##################################
    CoreApiDataStruct:
      type: object
      required:
        - struct_data
        - owned_entities
        - referenced_entities
      properties:
        struct_data:
          $ref: '#/components/schemas/CoreApiSborData'
          description: The struct data
        owned_entities:
          type: array
          items:
            $ref: '#/components/schemas/CoreApiEntityReference'
        referenced_entities:
          type: array
          items:
            $ref: '#/components/schemas/CoreApiEntityReference'
    CoreApiSborData:
      description: |
        Various representations of an SBOR payload.
        Some endpoints may allow opting in/out of each representation.
      type: object
      properties:
        hex:
          type: string
          description: The hex-encoded, raw SBOR-encoded data
        programmatic_json:
          description: The (untyped) unannotated programmatic SBOR JSON
#####################################
# GENERAL / SHARED MODELS - Royalty #
#####################################
    CoreApiBlueprintRoyaltyConfig:
      type: object
      required:
        - is_enabled
      properties:
        is_enabled:
          type: boolean
        method_rules:
          description: The royalty rules by method. The array is only present if royalties are enabled.
          type: array
          items:
            $ref: '#/components/schemas/CoreApiBlueprintMethodRoyalty'
    CoreApiBlueprintMethodRoyalty:
      type: object
      required:
        - method_name
      properties:
        method_name:
          type: string
        royalty_amount:
          description: The due royalty; missing field denotes a free method.
          $ref: '#/components/schemas/CoreApiRoyaltyAmount'
    CoreApiRoyaltyAmount:
      type: object
      required:
        - amount
        - unit
      properties:
        amount:
          $ref: '#/components/schemas/CoreApiDecimal'
        unit:
          type: string
          enum:
            - XRD
            - USD
########################################
# GENERAL / SHARED MODELS - validators #
########################################
    CoreApiActiveValidator:
      type: object
      required:
        - address
        - key
        - stake
      properties:
        address:
          $ref: '#/components/schemas/CoreApiComponentAddress'
        key:
          $ref: '#/components/schemas/CoreApiEcdsaSecp256k1PublicKey'
        stake:
          type: string
          description: |
            A string-encoded decimal representing the validator's voting power for this epoch.
            This is a snapshot of the amount of XRD staked to the validator at the start of the epoch.
#####################################
# GENERAL / SHARED MODELS - schemas #
#####################################
    CoreApiScryptoSchema:
      type: object
      required:
        - sbor_data
      properties:
        sbor_data:
          $ref: '#/components/schemas/CoreApiSborData'
    CoreApiBlueprintDefinition:
      type: object
      required:
        - interface
        - function_exports
        - hook_exports
      properties:
        interface:
          $ref: '#/components/schemas/CoreApiBlueprintInterface'
        function_exports:
          type: object
          description: A map from the function name to its export
          additionalProperties:
            $ref: '#/components/schemas/CoreApiPackageExport'
        hook_exports:
          type: array
          description: |
            A map from certain object lifecycle hooks to a callback "package export".
            There is at most one callback registered for each `ObjectHook`.
          items:
            $ref: '#/components/schemas/CoreApiHookExport'
    CoreApiHookExport:
      type: object
      required:
        - object_hook
        - export
      properties:
        object_hook:
          $ref: '#/components/schemas/CoreApiObjectHook'
        export:
          $ref: '#/components/schemas/CoreApiPackageExport'
    CoreApiObjectHook:
      type: string
      enum:
        - OnVirtualize
        - OnMove
        - OnDrop
    CoreApiBlueprintDependencies:
      type: object
      required:
        - dependencies
      properties:
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/CoreApiGlobalAddress'
    CoreApiBlueprintInterface:
      type: object
      required:
        - generic_type_parameters
        - is_transient
        - features
        - state
        - functions
        - events
        - types
      properties:
        outer_blueprint:
          type: string
        generic_type_parameters:
          description: |
            Generic (SBOR) type parameters which need to be filled by a concrete instance
            of this blueprint.
          type: array
          items:
            $ref: '#/components/schemas/CoreApiGenericTypeParameter'
        is_transient:
          type: boolean
          description: If true, an instantiation of this blueprint cannot be persisted. EG buckets and proofs are transient.
        features:
          type: array
          items:
            type: string
        state:
          $ref: '#/components/schemas/CoreApiIndexedStateSchema'
        functions:
          type: object
          description: A map from the function name to the FunctionSchema
          additionalProperties:
            $ref: '#/components/schemas/CoreApiFunctionSchema'
        events:
          type: object
          description: A map from the event name to the event payload type reference.
          additionalProperties:
            $ref: '#/components/schemas/CoreApiBlueprintPayloadDef'
        types:
          type: object
          description: |
            A map from the registered type name to the concrete type,
            resolved against a schema from the package's schema partition.
          additionalProperties:
            $ref: '#/components/schemas/CoreApiScopedTypeId'
    CoreApiIndexedStateSchema:
      type: object
      required:
        - collections
        - num_partitions
      properties:
        fields:
          $ref: '#/components/schemas/CoreApiBlueprintSchemaFieldPartition'
        collections:
          type: array
          items:
            $ref: '#/components/schemas/CoreApiBlueprintSchemaCollectionPartition'
        num_partitions:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
    CoreApiGenericTypeParameter:
      type: object
      required:
        - constraints
      properties:
        constraints:
          $ref: '#/components/schemas/CoreApiGenericTypeParameterConstraints'
    CoreApiGenericTypeParameterConstraints:
      type: string
      enum:
        - Any
      description: |
        The constraints on the concrete type provided to fill the generic type parameter.
        Note: currently, we only support the wildcard (i.e. `Any`) generic type.
    CoreApiSubstateSystemStructureType:
      type: string
      enum:
        - SystemField
        - SystemSchema
        - KeyValueStoreEntry
        - ObjectField
        - ObjectKeyValuePartitionEntry
        - ObjectIndexPartitionEntry
        - ObjectSortedIndexPartitionEntry
    CoreApiSubstateSystemStructure:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiSubstateSystemStructureType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match SubstateSystemStructureType
          SystemField: '#/components/schemas/CoreApiSystemFieldStructure'
          SystemSchema: '#/components/schemas/CoreApiSystemSchemaStructure'
          KeyValueStoreEntry: '#/components/schemas/CoreApiKeyValueStoreEntryStructure'
          ObjectField: '#/components/schemas/CoreApiObjectFieldStructure'
          ObjectKeyValuePartitionEntry: '#/components/schemas/CoreApiObjectKeyValuePartitionEntryStructure'
          ObjectIndexPartitionEntry: '#/components/schemas/CoreApiObjectIndexPartitionEntryStructure'
          ObjectSortedIndexPartitionEntry: '#/components/schemas/CoreApiObjectSortedIndexPartitionEntryStructure'
    CoreApiSystemFieldStructure:
      allOf:
        - $ref: "#/components/schemas/CoreApiSubstateSystemStructure"
        - type: object
          required:
            - field_kind
          properties:
            field_kind:
              $ref: "#/components/schemas/CoreApiSystemFieldKind"
    CoreApiSystemSchemaStructure:
      allOf:
        - $ref: "#/components/schemas/CoreApiSubstateSystemStructure"
        - type: object
    CoreApiKeyValueStoreEntryStructure:
      allOf:
        - $ref: "#/components/schemas/CoreApiSubstateSystemStructure"
        - type: object
          required:
            - key_full_type_id
            - value_full_type_id
          properties:
            key_full_type_id:
              $ref: "#/components/schemas/CoreApiFullyScopedTypeId"
            value_full_type_id:
              $ref: '#/components/schemas/CoreApiFullyScopedTypeId'
    CoreApiObjectFieldStructure:
      allOf:
        - $ref: "#/components/schemas/CoreApiSubstateSystemStructure"
        - type: object
          required:
            - value_schema
          properties:
            value_schema:
              $ref: "#/components/schemas/CoreApiObjectSubstateTypeReference"
    CoreApiObjectKeyValuePartitionEntryStructure:
      allOf:
        - $ref: "#/components/schemas/CoreApiSubstateSystemStructure"
        - $ref: "#/components/schemas/CoreApiKeyValueBasedStructure"
    CoreApiObjectIndexPartitionEntryStructure:
      allOf:
        - $ref: "#/components/schemas/CoreApiSubstateSystemStructure"
        - $ref: "#/components/schemas/CoreApiKeyValueBasedStructure"
    CoreApiObjectSortedIndexPartitionEntryStructure:
      allOf:
        - $ref: "#/components/schemas/CoreApiSubstateSystemStructure"
        - $ref: "#/components/schemas/CoreApiKeyValueBasedStructure"
    CoreApiKeyValueBasedStructure:
      type: object
      required:
        - key_schema
        - value_schema
      properties:
        key_schema:
          $ref: "#/components/schemas/CoreApiObjectSubstateTypeReference"
        value_schema:
          $ref: "#/components/schemas/CoreApiObjectSubstateTypeReference"
    CoreApiSystemFieldKind:
      type: string
      enum:
        # Note: the weird ordering here maintains backwards compatibility (of enum ordinals):
        - VmBoot
        - TypeInfo
        - SystemBoot
        - KernelBoot
    CoreApiObjectSubstateTypeReferenceType:
      type: string
      enum:
        - Package
        - ObjectInstance
    CoreApiObjectSubstateTypeReference:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiObjectSubstateTypeReferenceType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match ObjectSubstateTypeReferenceType
          Package: '#/components/schemas/CoreApiPackageObjectSubstateTypeReference'
          ObjectInstance: '#/components/schemas/CoreApiObjectInstanceTypeReference'
    CoreApiPackageObjectSubstateTypeReference:
      allOf:
        - $ref: "#/components/schemas/CoreApiObjectSubstateTypeReference"
        - $ref: "#/components/schemas/CoreApiPackageTypeReference"
    CoreApiObjectInstanceTypeReference:
      allOf:
        - $ref: "#/components/schemas/CoreApiObjectSubstateTypeReference"
        - type: object
          required:
            - resolved_full_type_id
            - generic_index
          properties:
            resolved_full_type_id:
              $ref: "#/components/schemas/CoreApiFullyScopedTypeId"
            generic_index:
              description: |
                The index of the generic parameter in the instance definition.
                Was called the `instance_type_index`.
              type: integer
              format: int32
              minimum: 0
              maximum: 255
    CoreApiPackageTypeReference:
      type: object
      required:
        - full_type_id
      properties:
        full_type_id:
          $ref: "#/components/schemas/CoreApiFullyScopedTypeId"
    CoreApiPackageExport:
      type: object
      required:
        - code_hash
        - export_name
      properties:
        code_hash:
          $ref: '#/components/schemas/CoreApiCodeHash'
        export_name:
          type: string
    CoreApiCodeHash:
      type: string
      minLength: 64
      maxLength: 64
      description: The hex-encoded code hash, capturing the vm-type and the code itself.
    CoreApiSchemaHash:
      type: string
      minLength: 64
      maxLength: 64
      description: The hex-encoded schema hash, capturing the identity of an SBOR schema.
    CoreApiAuthConfig:
      type: object
      required:
        - function_auth_type
        - method_auth_type
      properties:
        function_auth_type:
          $ref: '#/components/schemas/CoreApiFunctionAuthType'
        function_access_rules:
          type: object
          description: |
            A map from a function name to AccessRule.
            Only exists if `function_auth_type` is set to `FunctionAccessRules`.
          additionalProperties:
            $ref: '#/components/schemas/CoreApiAccessRule'
        method_auth_type:
          $ref: '#/components/schemas/CoreApiMethodAuthType'
        method_roles:
          $ref: '#/components/schemas/CoreApiStaticRoleDefinitionAuthTemplate'
    CoreApiFunctionAuthType:
      type: string
      enum:
        - AllowAll
        - FunctionAccessRules
        - RootOnly
    CoreApiMethodAuthType:
      type: string
      enum:
        - AllowAll
        - StaticRoleDefinition
    CoreApiStaticRoleDefinitionAuthTemplate:
      type: object
      required:
        - role_specification
        - method_accessibility_map
      properties:
        role_specification:
          $ref: '#/components/schemas/CoreApiRoleSpecification'
        roles:
          type: object
          description: A map from role name to role details
          additionalProperties:
            $ref: '#/components/schemas/CoreApiRoleDetails'
        method_accessibility_map:
          type: object
          description: A map from a method identifier to MethodAccessibility
          additionalProperties:
            $ref: '#/components/schemas/CoreApiMethodAccessibility'
    CoreApiRoleSpecification:
      type: string
      enum:
        - Normal
        - UseOuter
    CoreApiRoleDetails:
      type: object
      required:
        - updater_roles
      properties:
        updater_roles:
          type: array
          items:
            type: string
    CoreApiMethodAccessibilityType:
      type: string
      enum:
        - Public
        - OuterObjectOnly
        - RoleProtected
        - OwnPackageOnly
    CoreApiMethodAccessibility:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/CoreApiMethodAccessibilityType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match MethodAccessibilityType options above
          Public: '#/components/schemas/CoreApiPublicMethodAccessibility'
          OuterObjectOnly: '#/components/schemas/CoreApiOuterObjectOnlyMethodAccessibility'
          RoleProtected: '#/components/schemas/CoreApiRoleProtectedMethodAccessibility'
          OwnPackageOnly: '#/components/schemas/CoreApiOwnPackageOnlyMethodAccessibility'
    CoreApiPublicMethodAccessibility:
      allOf:
        - $ref: '#/components/schemas/CoreApiMethodAccessibility'
        - type: object
    CoreApiOuterObjectOnlyMethodAccessibility:
      allOf:
        - $ref: '#/components/schemas/CoreApiMethodAccessibility'
        - type: object
    CoreApiRoleProtectedMethodAccessibility:
      allOf:
        - $ref: '#/components/schemas/CoreApiMethodAccessibility'
        - type: object
          required:
            - allowed_roles
          properties:
            allowed_roles:
              type: array
              items:
                type: string
    CoreApiOwnPackageOnlyMethodAccessibility:
      allOf:
        - $ref: '#/components/schemas/CoreApiMethodAccessibility'
        - type: object
    CoreApiBlueprintSchemaFieldPartition:
      type: object
      description: The fields partition of the blueprint.
      required:
        - partition_description
        - fields
      properties:
        partition_description:
          $ref: '#/components/schemas/CoreApiPartitionDescription'
        fields:
          type: array
          description: The field substates for this blueprint.
          items:
            $ref: '#/components/schemas/CoreApiFieldSchema'
    CoreApiFieldSchema:
      type: object
      required:
        - field_type_ref
      properties:
        field_type_ref:
          $ref: '#/components/schemas/CoreApiBlueprintPayloadDef'
        condition:
          $ref: '#/components/schemas/CoreApiFieldSchemaFeatureCondition'
        transient_default_value_hex:
          type: string
          description: The hex-encoded default value of this field. Only present if this field is transient.
    CoreApiFieldSchemaFeatureConditionType:
      type: string
      enum:
        - Always
        - IfOwnFeature
        - IfOuterObjectFeature
    CoreApiFieldSchemaFeatureCondition:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/CoreApiFieldSchemaFeatureConditionType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match FieldSchemaFeatureConditionType options
          Always: '#/components/schemas/CoreApiFieldSchemaFeatureConditionAlways'
          IfOwnFeature: '#/components/schemas/CoreApiFieldSchemaFeatureConditionIfOwnFeature'
          IfOuterObjectFeature: '#/components/schemas/CoreApiFieldSchemaFeatureConditionIfOuterObjectFeature'
    CoreApiFieldSchemaFeatureConditionAlways:
      allOf:
        - $ref: "#/components/schemas/CoreApiFieldSchemaFeatureCondition"
        - type: object
    CoreApiFieldSchemaFeatureConditionIfOwnFeature:
      allOf:
        - $ref: "#/components/schemas/CoreApiFieldSchemaFeatureCondition"
        - type: object
          required:
            - feature_name
          properties:
            feature_name:
              type: string
    CoreApiFieldSchemaFeatureConditionIfOuterObjectFeature:
      allOf:
        - $ref: "#/components/schemas/CoreApiFieldSchemaFeatureCondition"
        - type: object
          required:
            - feature_name
          properties:
            feature_name:
              type: string
    CoreApiBlueprintSchemaCollectionPartition:
      type: object
      description: The fields partition of the blueprint.
      required:
        - partition_description
        - collection_schema
      properties:
        partition_description:
          $ref: '#/components/schemas/CoreApiPartitionDescription'
        collection_schema:
          $ref: '#/components/schemas/CoreApiBlueprintCollectionSchema'
    CoreApiBlueprintCollectionSchema:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiBlueprintCollectionSchemaType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match PublicKeyType
          KeyValue: '#/components/schemas/CoreApiKeyValueBlueprintCollectionSchema'
          Index: '#/components/schemas/CoreApiIndexBlueprintCollectionSchema'
          SortedIndex: '#/components/schemas/CoreApiSortedIndexBlueprintCollectionSchema'
    CoreApiBlueprintCollectionSchemaType:
      type: string
      enum:
        - KeyValue
        - Index
        - SortedIndex
    CoreApiKeyValueBlueprintCollectionSchema:
      allOf:
        - $ref: "#/components/schemas/CoreApiBlueprintCollectionSchema"
        - type: object
          required:
            - key_type_ref
            - value_type_ref
            - allow_ownership
          properties:
            key_type_ref:
              $ref: "#/components/schemas/CoreApiBlueprintPayloadDef"
            value_type_ref:
              $ref: "#/components/schemas/CoreApiBlueprintPayloadDef"
            allow_ownership:
              type: boolean
              description: Whether the entries of the key-value partition are allowed to own child nodes.
    CoreApiIndexBlueprintCollectionSchema:
      allOf:
        - $ref: "#/components/schemas/CoreApiBlueprintCollectionSchema"
        - type: object
          required:
            - key_type_ref
            - value_type_ref
            - allow_ownership
          properties:
            key_type_ref:
              $ref: "#/components/schemas/CoreApiBlueprintPayloadDef"
            value_type_ref:
              $ref: "#/components/schemas/CoreApiBlueprintPayloadDef"
            allow_ownership:
              type: boolean
              description: Whether the entries of the index partition are allowed to own child nodes.
    CoreApiSortedIndexBlueprintCollectionSchema:
      allOf:
        - $ref: "#/components/schemas/CoreApiBlueprintCollectionSchema"
        - type: object
          required:
            - key_type_ref
            - value_type_ref
            - allow_ownership
          properties:
            key_type_ref:
              $ref: "#/components/schemas/CoreApiBlueprintPayloadDef"
            value_type_ref:
              $ref: "#/components/schemas/CoreApiBlueprintPayloadDef"
            allow_ownership:
              type: boolean
              description: Whether the entries of the sorted index partition are allowed to own child nodes.
    CoreApiBlueprintTypeReference:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiBlueprintTypeReferenceKind"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match PublicKeyType
          BlueprintSchema: '#/components/schemas/CoreApiBlueprintSchemaBlueprintTypeReference'
          InstanceSchema: '#/components/schemas/CoreApiInstanceSchemaBlueprintTypeReference'
    CoreApiBlueprintTypeReferenceKind:
      type: string
      enum:
        - BlueprintSchema
        - InstanceSchema
    CoreApiBlueprintSchemaBlueprintTypeReference:
      allOf:
        - $ref: "#/components/schemas/CoreApiBlueprintTypeReference"
        - type: object
          required:
            - local_type_id
          properties:
            local_type_id:
              $ref: "#/components/schemas/CoreApiLocalTypeId"
    CoreApiInstanceSchemaBlueprintTypeReference:
      allOf:
        - $ref: "#/components/schemas/CoreApiBlueprintTypeReference"
        - type: object
          required:
            - instance_provided_type_index
          properties:
            instance_provided_type_index:
              type: integer
              format: int32
              minimum: 0
              maximum: 255
              description: Provided by an instance's schema at the given index in its provided types array.
    CoreApiLocalTypeId:
      type: object
      required:
        - kind
        - id
        - as_sbor
      properties:
        kind:
          type: string
          description: The location against which to resolve this type reference.
          enum:
            - WellKnown
            - SchemaLocal
        id:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: |
            A reference to a type, interpreted according to `kind`:
            - If `WellKnown`, then it is a pointer to a well known scrypto type with that ID,
            - If `SchemaLocal`, then it is an index into the given schema.
        as_sbor:
          $ref: '#/components/schemas/CoreApiSborData'
          description: |
            The SBOR encoding of the LocalTypeId.
            This is useful for passing to the Radix Engine toolkit along with a schema.
    CoreApiVirtualLazyLoadSchema:
      type: object
      required:
        - export_name
      properties:
        export_name:
          type: string
    CoreApiFunctionSchema:
      type: object
      required:
        - input
        - output
      properties:
        receiver_info:
          $ref: '#/components/schemas/CoreApiReceiverInfo'
        input:
          $ref: '#/components/schemas/CoreApiBlueprintPayloadDef'
          description: |
            The reference to the function's parameter struct.
        output:
          $ref: '#/components/schemas/CoreApiBlueprintPayloadDef'
          description: |
            The reference to the function output struct.
    CoreApiReceiverInfo:
      type: object
      required:
        - receiver
        - reference_type
      properties:
        receiver:
          type: string
          enum:
            - SelfRef
            - SelfRefMut
        reference_type:
          $ref: '#/components/schemas/CoreApiReferenceType'
    CoreApiReferenceType:
      type: object
      required:
        - raw_bits
        - normal
        - direct_access
      properties:
        raw_bits:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
        normal:
          type: boolean
        direct_access:
          type: boolean
#####################################################
# GENERAL / SHARED MODELS - general substate models #
#####################################################
    CoreApiEntityType:
      type: string
      enum:
        - GlobalPackage
        - GlobalConsensusManager
        - GlobalValidator
        - GlobalGenericComponent
        - GlobalAccount
        - GlobalIdentity
        - GlobalAccessController
        - GlobalVirtualSecp256k1Account
        - GlobalVirtualSecp256k1Identity
        - GlobalVirtualEd25519Account
        - GlobalVirtualEd25519Identity
        - GlobalFungibleResource
        - InternalFungibleVault
        - GlobalNonFungibleResource
        - InternalNonFungibleVault
        - InternalGenericComponent
        - InternalKeyValueStore
        - GlobalOneResourcePool
        - GlobalTwoResourcePool
        - GlobalMultiResourcePool
        - GlobalTransactionTracker
        - GlobalAccountLocker
    CoreApiEntityAddress:
      type: string
      description: Bech32m-encoded human readable version of the entity's address (ie the entity's node id)
    CoreApiAttachedModuleId:
      type: string
      enum:
        - Metadata
        - Royalty
        - RoleAssignment
    CoreApiModuleId:
      type: string
      enum:
        - Main
        - Metadata
        - Royalty
        - RoleAssignment
    CoreApiSubstate:
      type: object
      required:
        - substate_type
        - is_locked
      properties:
        substate_type:
          $ref: '#/components/schemas/CoreApiSubstateType'
        is_locked:
          type: boolean
      discriminator:
        propertyName: substate_type
        mapping:
          # NOTE:
          # There is an important convention to these names, for consistency:
          #
          # For each distinct typed substate, form [SubstateType] = [ModuleSpecifier][SubstateSpecifier][SubstateTypeVersion]
          # - [ModuleSpecifier] is either [ModuleName]Module for non-main modules, or [EntityType] for main modules
          # - [SubstateSpecifier] is either:
          #   - Field[SubstateDescriptor] for Field partitions
          #   - [SubstateDescriptor]Entry for Collection partitions (KeyValueStore, Index and SortedIndex)
          # - [SubstateTypeVersion] is empty ("") for V1 substates, but will eg be V2/V3/V4 for newer substate versions
          #
          # And then define:
          # - [SubstateName] = [SubstateType]Substate
          # - [SubstateValue] = [SubstateType]Value
          #
          # Which are used as follows:
          # - The below mapping has entries of: [SubstateType]: '#/components/schemas/CoreApi[SubstateName]'
          # - [SubstateType] MUST match the enum SubstateType type defined below
          # - [SubstateName] MUST equal the name of a type below. Such a type must have:
          #   - value - which references the type [SubstateValue]
          #   - key (if it's in a collection partition) - which references a substate key type [X]Key for some X.
          #   - is_locked - this is added to all substates via inclusion on the `Substate` object
          BootLoaderModuleFieldSystemBoot: '#/components/schemas/CoreApiBootLoaderModuleFieldSystemBootSubstate'
          BootLoaderModuleFieldVmBoot: '#/components/schemas/CoreApiBootLoaderModuleFieldVmBootSubstate'
          BootLoaderModuleFieldKernelBoot: '#/components/schemas/CoreApiBootLoaderModuleFieldKernelBootSubstate'
          TypeInfoModuleFieldTypeInfo: '#/components/schemas/CoreApiTypeInfoModuleFieldTypeInfoSubstate'
          RoleAssignmentModuleFieldOwnerRole: '#/components/schemas/CoreApiRoleAssignmentModuleFieldOwnerRoleSubstate'
          RoleAssignmentModuleRuleEntry: '#/components/schemas/CoreApiRoleAssignmentModuleRuleEntrySubstate'
          RoyaltyModuleFieldState: '#/components/schemas/CoreApiRoyaltyModuleFieldStateSubstate'
          RoyaltyModuleMethodRoyaltyEntry: '#/components/schemas/CoreApiRoyaltyModuleMethodRoyaltyEntrySubstate'
          MetadataModuleEntry: '#/components/schemas/CoreApiMetadataModuleEntrySubstate'
          PackageFieldRoyaltyAccumulator: '#/components/schemas/CoreApiPackageFieldRoyaltyAccumulatorSubstate'
          PackageCodeVmTypeEntry: '#/components/schemas/CoreApiPackageCodeVmTypeEntrySubstate'
          PackageCodeOriginalCodeEntry: '#/components/schemas/CoreApiPackageCodeOriginalCodeEntrySubstate'
          PackageCodeInstrumentedCodeEntry: '#/components/schemas/CoreApiPackageCodeInstrumentedCodeEntrySubstate'
          SchemaEntry: '#/components/schemas/CoreApiSchemaEntrySubstate'
          PackageBlueprintDefinitionEntry: '#/components/schemas/CoreApiPackageBlueprintDefinitionEntrySubstate'
          PackageBlueprintDependenciesEntry: '#/components/schemas/CoreApiPackageBlueprintDependenciesEntrySubstate'
          PackageBlueprintRoyaltyEntry: '#/components/schemas/CoreApiPackageBlueprintRoyaltyEntrySubstate'
          PackageBlueprintAuthTemplateEntry: '#/components/schemas/CoreApiPackageBlueprintAuthTemplateEntrySubstate'
          FungibleResourceManagerFieldDivisibility: '#/components/schemas/CoreApiFungibleResourceManagerFieldDivisibilitySubstate'
          FungibleResourceManagerFieldTotalSupply: '#/components/schemas/CoreApiFungibleResourceManagerFieldTotalSupplySubstate'
          NonFungibleResourceManagerFieldIdType: '#/components/schemas/CoreApiNonFungibleResourceManagerFieldIdTypeSubstate'
          NonFungibleResourceManagerFieldTotalSupply: '#/components/schemas/CoreApiNonFungibleResourceManagerFieldTotalSupplySubstate'
          NonFungibleResourceManagerFieldMutableFields: '#/components/schemas/CoreApiNonFungibleResourceManagerFieldMutableFieldsSubstate'
          NonFungibleResourceManagerDataEntry: '#/components/schemas/CoreApiNonFungibleResourceManagerDataEntrySubstate'
          FungibleVaultFieldBalance: '#/components/schemas/CoreApiFungibleVaultFieldBalanceSubstate'
          FungibleVaultFieldFrozenStatus: '#/components/schemas/CoreApiFungibleVaultFieldFrozenStatusSubstate'
          NonFungibleVaultFieldBalance: '#/components/schemas/CoreApiNonFungibleVaultFieldBalanceSubstate'
          NonFungibleVaultFieldFrozenStatus: '#/components/schemas/CoreApiNonFungibleVaultFieldFrozenStatusSubstate'
          NonFungibleVaultContentsIndexEntry: '#/components/schemas/CoreApiNonFungibleVaultContentsIndexEntrySubstate'
          ConsensusManagerFieldConfig: '#/components/schemas/CoreApiConsensusManagerFieldConfigSubstate'
          ConsensusManagerFieldState: '#/components/schemas/CoreApiConsensusManagerFieldStateSubstate'
          ConsensusManagerFieldCurrentValidatorSet: '#/components/schemas/CoreApiConsensusManagerFieldCurrentValidatorSetSubstate'
          ConsensusManagerFieldCurrentProposalStatistic: '#/components/schemas/CoreApiConsensusManagerFieldCurrentProposalStatisticSubstate'
          ConsensusManagerFieldCurrentTimeRoundedToMinutes: '#/components/schemas/CoreApiConsensusManagerFieldCurrentTimeRoundedToMinutesSubstate'
          ConsensusManagerFieldCurrentTime: '#/components/schemas/CoreApiConsensusManagerFieldCurrentTimeSubstate'
          ConsensusManagerFieldValidatorRewards: '#/components/schemas/CoreApiConsensusManagerFieldValidatorRewardsSubstate'
          ConsensusManagerRegisteredValidatorsByStakeIndexEntry: '#/components/schemas/CoreApiConsensusManagerRegisteredValidatorsByStakeIndexEntrySubstate'
          ValidatorFieldState: '#/components/schemas/CoreApiValidatorFieldStateSubstate'
          ValidatorFieldProtocolUpdateReadinessSignal: '#/components/schemas/CoreApiValidatorFieldProtocolUpdateReadinessSignalSubstate'
          AccountFieldState: '#/components/schemas/CoreApiAccountFieldStateSubstate'
          AccountVaultEntry: '#/components/schemas/CoreApiAccountVaultEntrySubstate'
          AccountResourcePreferenceEntry: '#/components/schemas/CoreApiAccountResourcePreferenceEntrySubstate'
          AccountAuthorizedDepositorEntry: '#/components/schemas/CoreApiAccountAuthorizedDepositorEntrySubstate'
          AccountLockerAccountClaimsEntry: '#/components/schemas/CoreApiAccountLockerAccountClaimsEntrySubstate'
          AccessControllerFieldState: '#/components/schemas/CoreApiAccessControllerFieldStateSubstate'
          GenericScryptoComponentFieldState: '#/components/schemas/CoreApiGenericScryptoComponentFieldStateSubstate'
          GenericKeyValueStoreEntry: '#/components/schemas/CoreApiGenericKeyValueStoreEntrySubstate'
          OneResourcePoolFieldState: '#/components/schemas/CoreApiOneResourcePoolFieldStateSubstate'
          TwoResourcePoolFieldState: '#/components/schemas/CoreApiTwoResourcePoolFieldStateSubstate'
          MultiResourcePoolFieldState: '#/components/schemas/CoreApiMultiResourcePoolFieldStateSubstate'
          TransactionTrackerFieldState: '#/components/schemas/CoreApiTransactionTrackerFieldStateSubstate'
          TransactionTrackerCollectionEntry: '#/components/schemas/CoreApiTransactionTrackerCollectionEntrySubstate'
    CoreApiSubstateType:
      type: string
      enum:
        - BootLoaderModuleFieldVmBoot
        - TypeInfoModuleFieldTypeInfo
        - RoleAssignmentModuleFieldOwnerRole
        - RoleAssignmentModuleRuleEntry
        - RoleAssignmentModuleMutabilityEntry
        - RoyaltyModuleFieldState
        - RoyaltyModuleMethodRoyaltyEntry
        - MetadataModuleEntry
        - PackageFieldRoyaltyAccumulator
        - PackageCodeVmTypeEntry
        - PackageCodeOriginalCodeEntry
        - PackageCodeInstrumentedCodeEntry
        - SchemaEntry
        - PackageBlueprintDefinitionEntry
        - PackageBlueprintDependenciesEntry
        - PackageBlueprintRoyaltyEntry
        - PackageBlueprintAuthTemplateEntry
        - PackageFieldFunctionAccessRules
        - FungibleResourceManagerFieldDivisibility
        - FungibleResourceManagerFieldTotalSupply
        - NonFungibleResourceManagerFieldIdType
        - NonFungibleResourceManagerFieldTotalSupply
        - NonFungibleResourceManagerFieldMutableFields
        - NonFungibleResourceManagerDataEntry
        - FungibleVaultFieldBalance
        - FungibleVaultFieldFrozenStatus
        - NonFungibleVaultFieldBalance
        - NonFungibleVaultFieldFrozenStatus
        - NonFungibleVaultContentsIndexEntry
        - ConsensusManagerFieldConfig
        - ConsensusManagerFieldState
        - ConsensusManagerFieldCurrentValidatorSet
        - ConsensusManagerFieldCurrentProposalStatistic
        - ConsensusManagerFieldCurrentTimeRoundedToMinutes
        - ConsensusManagerFieldCurrentTime
        - ConsensusManagerFieldValidatorRewards
        - ConsensusManagerRegisteredValidatorsByStakeIndexEntry
        - ValidatorFieldState
        - ValidatorFieldProtocolUpdateReadinessSignal
        - AccountFieldState
        - AccountVaultEntry
        - AccountResourcePreferenceEntry
        - AccountAuthorizedDepositorEntry
        - AccessControllerFieldState
        - GenericScryptoComponentFieldState
        - GenericKeyValueStoreEntry
        - OneResourcePoolFieldState
        - TwoResourcePoolFieldState
        - MultiResourcePoolFieldState
        - TransactionTrackerFieldState
        - TransactionTrackerCollectionEntry
        - AccountLockerAccountClaimsEntry
        - BootLoaderModuleFieldSystemBoot
        - BootLoaderModuleFieldKernelBoot
################################################
# GENERAL / SHARED MODELS - substate key types #
################################################
    CoreApiObjectRoleKey:
      type: object
      required:
        - object_module_id
        - role_key
      properties:
        object_module_id:
          $ref: "#/components/schemas/CoreApiModuleId"
        role_key:
          type: string
    CoreApiMainMethodKey:
      type: object
      required:
        - method_name
      properties:
        method_name:
          type: string
    CoreApiMetadataKey:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    CoreApiPackageCodeKey:
      type: object
      required:
        - code_hash
      properties:
        code_hash:
          $ref: '#/components/schemas/CoreApiCodeHash'
    CoreApiSchemaKey:
      type: object
      required:
        - schema_hash
      properties:
        schema_hash:
          $ref: '#/components/schemas/CoreApiSchemaHash'
    CoreApiBlueprintVersionKey:
      type: object
      required:
        - blueprint_name
        - blueprint_version
      properties:
        blueprint_name:
          type: string
          description: The first part of the substate key `(blueprint_name, blueprint_version)`.
        blueprint_version:
          type: string
          description: The second part of the substate key `(blueprint_name, blueprint_version)`.
    CoreApiLocalNonFungibleKey:
      type: object
      required:
        - non_fungible_local_id
      properties:
        non_fungible_local_id:
          $ref: '#/components/schemas/CoreApiNonFungibleLocalId'
    CoreApiActiveValidatorKey:
      type: object
      required:
        - stake_weighting
        - validator_address
      properties:
        stake_weighting:
          type: integer
          description: |
            The divided stake, giving a weighting for the validator,
            used as part of the sort key.
          format: int32
          minimum: 0
          maximum: 65535
        validator_address:
          $ref: '#/components/schemas/CoreApiComponentAddress'
    CoreApiResourceKey:
      type: object
      required:
        - resource_address
      properties:
        resource_address:
          $ref: '#/components/schemas/CoreApiComponentAddress'
    CoreApiAuthorizedDepositorKey:
      type: object
      required:
        - badge
      properties:
        badge:
          $ref: '#/components/schemas/CoreApiAuthorizedDepositorBadge'
    CoreApiAuthorizedDepositorBadgeType:
      type: string
      enum:
        - Resource
        - NonFungible
    CoreApiAuthorizedDepositorBadge:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/CoreApiAuthorizedDepositorBadgeType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match AuthorizedDepositorBadgeType options above
          Resource: '#/components/schemas/CoreApiResourceAuthorizedDepositorBadge'
          NonFungible: '#/components/schemas/CoreApiNonFungibleAuthorizedDepositorBadge'
    CoreApiResourceAuthorizedDepositorBadge:
      allOf:
        - $ref: '#/components/schemas/CoreApiAuthorizedDepositorBadge'
        - type: object
          required:
            - resource_address
          properties:
            resource_address:
              $ref: '#/components/schemas/CoreApiResourceAddress'
    CoreApiNonFungibleAuthorizedDepositorBadge:
      allOf:
        - $ref: '#/components/schemas/CoreApiAuthorizedDepositorBadge'
        - type: object
          required:
            - non_fungible_global_id
          properties:
            non_fungible_global_id:
              $ref: '#/components/schemas/CoreApiNonFungibleGlobalId'
    CoreApiTransactionIdKey:
      type: object
      required:
        - intent_hash
        - intent_hash_bech32m
      properties:
        intent_hash:
          $ref: "#/components/schemas/CoreApiIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/CoreApiIntentHashBech32m"
    CoreApiAccountAddressKey:
      type: object
      required:
        - account_address
      properties:
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's global address.
    CoreApiGenericKey:
      type: object
      properties:
        key_data:
          description: If it can be decoded as SBOR, this is the data
          $ref: '#/components/schemas/CoreApiSborData'
################################################
# GENERAL / SHARED MODELS - specific substates #
################################################
    CoreApiBootLoaderModuleFieldSystemBootSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiBootLoaderModuleFieldSystemBootValue'
    CoreApiBootLoaderModuleFieldSystemBootValue:
      type: object
      required:
        - system_parameters
      properties:
        system_parameters:
          $ref: '#/components/schemas/CoreApiSystemParameters'
    CoreApiSystemParameters:
      type: object
      required:
        - network_definition
        - costing_module_config
        - costing_parameters
        - limit_parameters
      properties:
        network_definition:
          $ref: "#/components/schemas/CoreApiNetworkDefinition"
        costing_module_config:
          $ref: "#/components/schemas/CoreApiCostingModuleConfig"
        costing_parameters:
          $ref: "#/components/schemas/CoreApiSystemCostingParameters"
        limit_parameters:
          $ref: "#/components/schemas/CoreApiLimitParameters"
    CoreApiCostingModuleConfig:
      type: object
      required:
        - xrd_max_per_function_royalty
        - apply_execution_cost_for_all_system_calls
        - apply_boot_ref_check_costing
      properties:
        xrd_max_per_function_royalty:
          type: string
          description: |
            The string-encoded decimal representing the maximum amount of XRD configurable for a single function's royalty.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        apply_execution_cost_for_all_system_calls:
          type: boolean
          description: Whether to apply execution costing for all system calls.
        apply_boot_ref_check_costing:
          type: boolean
          description: Whether to apply costing for reference checks on boot.
    CoreApiNetworkDefinition:
      type: object
      required:
        - id
        - logical_name
        - hrp_suffix
      properties:
        id:
          $ref: "#/components/schemas/CoreApiNetworkIdentifierByte"
        logical_name:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        hrp_suffix:
          type: string
          description: The network suffix of Bech32m HRPs used for addressing.
    CoreApiSystemCostingParameters:
      type: object
      required:
        - execution_cost_unit_price
        - execution_cost_unit_limit
        - execution_cost_unit_loan
        - finalization_cost_unit_price
        - finalization_cost_unit_limit
        - xrd_usd_price
        - xrd_storage_price
        - xrd_archive_storage_price
      properties:
        execution_cost_unit_price:
          type: string
          description: |
            The string-encoded decimal representing the XRD price of a single cost unit of transaction execution.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        execution_cost_unit_limit:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the maximum amount of cost units available for the transaction execution.
        execution_cost_unit_loan:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the maximum number of cost units which can be used before fee is locked from a vault.
        finalization_cost_unit_price:
          type: string
          description: |
            The string-encoded decimal representing the XRD price of a single cost unit of transaction finalization.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        finalization_cost_unit_limit:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the maximum amount of cost units available for the transaction finalization.
        xrd_usd_price:
          type: string
          description: |
            The string-encoded decimal representing what amount of XRD is consumed by a Royalty of 1 USD.
            This is fixed for a given protocol version, so is not an accurate representation of the XRD price.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_storage_price:
          type: string
          description: |
            The string-encoded decimal representing the price of 1 byte of state storage, expressed in XRD.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_archive_storage_price:
          type: string
          description: |
            The string-encoded decimal representing the price of 1 byte of archive storage, expressed in XRD.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiLimitParameters:
      type: object
      required:
        - max_call_depth
        - max_heap_substate_total_bytes
        - max_track_substate_total_bytes
        - max_substate_key_size
        - max_substate_value_size
        - max_invoke_input_size
        - max_event_size
        - max_log_size
        - max_panic_message_size
        - max_number_of_logs
        - max_number_of_events
      properties:
        max_call_depth:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            call depth allowed during transaction execution.
        max_heap_substate_total_bytes:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of all substates kept on the heap during a single transaction's execution.
        max_track_substate_total_bytes:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of all substates kept in the track during a single transaction's execution.
        max_substate_key_size:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of a Substate's key in the low-level Substate database.
        max_substate_value_size:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of a Substate's value in the low-level Substate database.
        max_invoke_input_size:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of a single call's input parameters.
        max_event_size:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of a single emitted event.
        max_log_size:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of a single logged line.
        max_panic_message_size:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of a single panic message.
        max_number_of_logs:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            count of log lines emitted during a single transaction's execution.
        max_number_of_events:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            count of events emitted during a single transaction's execution.
    CoreApiBootLoaderModuleFieldVmBootSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiBootLoaderModuleFieldVmBootValue'
    CoreApiBootLoaderModuleFieldVmBootValue:
      type: object
      required:
        - scrypto_v1_minor_version
      properties:
        scrypto_v1_minor_version:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
    CoreApiBootLoaderModuleFieldKernelBootSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiBootLoaderModuleFieldKernelBootValue'
    CoreApiBootLoaderModuleFieldKernelBootValue:
      type: object
    CoreApiTypeInfoModuleFieldTypeInfoSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiTypeInfoModuleFieldTypeInfoValue'
    CoreApiTypeInfoModuleFieldTypeInfoValue:
      type: object
      required:
        - details
      properties:
        details:
          $ref: '#/components/schemas/CoreApiTypeInfoDetails'
    CoreApiTypeInfoType:
      type: string
      enum:
        - Object
        - KeyValueStore
    CoreApiTypeInfoDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/CoreApiTypeInfoType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match TypeInfoType options above
          Object: '#/components/schemas/CoreApiObjectTypeInfoDetails'
          KeyValueStore: '#/components/schemas/CoreApiKeyValueStoreTypeInfoDetails'
    CoreApiObjectTypeInfoDetails:
      allOf:
        - $ref: '#/components/schemas/CoreApiTypeInfoDetails'
        - type: object
          required:
            - module_versions
            - blueprint_info
            - global
          properties:
            module_versions:
              type: array
              items:
                $ref: '#/components/schemas/CoreApiModuleVersion'
            blueprint_info:
              $ref: '#/components/schemas/CoreApiBlueprintInfo'
            global:
              type: boolean
    CoreApiModuleVersion:
      type: object
      required:
        - module
        - version
      properties:
        module:
          $ref: '#/components/schemas/CoreApiAttachedModuleId'
        version:
          type: string
          description: A string of `Major.Minor.Patch` where Major, Minor and Patch are all u32s.
    CoreApiBlueprintInfo:
      type: object
      required:
        - package_address
        - blueprint_name
        - blueprint_version
        - features
        - generic_substitutions
      properties:
        package_address:
          $ref: '#/components/schemas/CoreApiPackageAddress'
        blueprint_name:
          type: string
        blueprint_version:
          type: string
        outer_object:
          $ref: '#/components/schemas/CoreApiGlobalAddress'
        features:
          type: array
          items:
            type: string
        generic_substitutions:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiGenericSubstitution"
    CoreApiKeyValueStoreTypeInfoDetails:
      allOf:
        - $ref: '#/components/schemas/CoreApiTypeInfoDetails'
        - type: object
          required:
            - key_value_store_info
          properties:
            key_value_store_info:
              description: The SBOR schema of the KeyValueStore
              $ref: '#/components/schemas/CoreApiKeyValueStoreInfo'
    CoreApiKeyValueStoreInfo:
      type: object
      required:
        - key_generic_substitution
        - value_generic_substitution
        - allow_ownership
      properties:
        key_generic_substitution:
          $ref: "#/components/schemas/CoreApiGenericSubstitution"
        value_generic_substitution:
          $ref: "#/components/schemas/CoreApiGenericSubstitution"
        allow_ownership:
          type: boolean
          description: Whether the entries of the key-value partition are allowed to own child nodes.
    CoreApiGenericSubstitutionType:
      type: string
      enum:
        - Local
        - Remote
    CoreApiGenericSubstitution:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/CoreApiGenericSubstitutionType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match TypeInfoType options above
          Local: '#/components/schemas/CoreApiLocalGenericSubstitution'
          Remote: '#/components/schemas/CoreApiRemoteGenericSubstitution'
    CoreApiLocalGenericSubstitution:
      allOf:
        - $ref: '#/components/schemas/CoreApiGenericSubstitution'
        - type: object
          description: |
            The generic substitution is provided by the instance itself.
            The `scoped_type_id` can be expanded to a `FullyScopedTypeId` by including the current entity's address.
          required:
            - scoped_type_id
          properties:
            scoped_type_id:
              $ref: '#/components/schemas/CoreApiScopedTypeId'
    CoreApiRemoteGenericSubstitution:
      allOf:
        - $ref: '#/components/schemas/CoreApiGenericSubstitution'
        - type: object
          description: |
            The generic substitution is provided remotely by a blueprint type.
            The `resolved_full_type_id` is added by the node, and is always present in the model returned from the transaction stream API.
            Other APIs may not resolve the type from the blueprint definition.
          required:
            - blueprint_type_identifier
          properties:
            blueprint_type_identifier:
              $ref: '#/components/schemas/CoreApiBlueprintTypeIdentifier'
            resolved_full_type_id:
              $ref: '#/components/schemas/CoreApiFullyScopedTypeId'
    CoreApiRoleAssignmentModuleFieldOwnerRoleSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiRoleAssignmentModuleFieldOwnerRoleValue'
    CoreApiRoleAssignmentModuleFieldOwnerRoleValue:
      type: object
      required:
        - owner_role
      properties:
        owner_role:
          $ref: "#/components/schemas/CoreApiOwnerRole"
    CoreApiRoleAssignmentModuleRuleEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/CoreApiObjectRoleKey'
            value:
              $ref: '#/components/schemas/CoreApiRoleAssignmentModuleRuleEntryValue'
    CoreApiRoleAssignmentModuleRuleEntryValue:
      type: object
      required:
        - access_rule
      properties:
        access_rule:
          $ref: '#/components/schemas/CoreApiAccessRule'
    CoreApiRoyaltyModuleFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiRoyaltyModuleFieldStateValue'
    CoreApiRoyaltyModuleFieldStateValue:
      type: object
      required:
        - is_enabled
        - vault_entity
      properties:
        is_enabled:
          type: boolean
        vault_entity:
          $ref: "#/components/schemas/CoreApiEntityReference"
    CoreApiRoyaltyModuleMethodRoyaltyEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/CoreApiMainMethodKey'
            value:
              $ref: '#/components/schemas/CoreApiRoyaltyModuleMethodRoyaltyEntryValue'
    CoreApiRoyaltyModuleMethodRoyaltyEntryValue:
      type: object
      description: If missing, it represents a free method.
      properties:
        royalty_amount:
          description: The component royalty. If missing, it represents a free method.
          $ref: '#/components/schemas/CoreApiRoyaltyAmount'
    CoreApiMetadataModuleEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/CoreApiMetadataKey'
            value:
              $ref: '#/components/schemas/CoreApiMetadataModuleEntryValue'
    CoreApiMetadataModuleEntryValue:
      type: object
      description: If missing, it represents a non-existing or deleted value.
      required:
        - data_struct
      properties:
        data_struct:
          $ref: '#/components/schemas/CoreApiDataStruct'
    CoreApiTransactionTrackerFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiTransactionTrackerFieldStateValue'
    CoreApiTransactionTrackerFieldStateValue:
      type: object
      required:
        - start_epoch
        - start_partition
        - partition_range_start_inclusive
        - partition_range_end_inclusive
        - epochs_per_partition
      properties:
        start_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
        start_partition:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        partition_range_start_inclusive:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        partition_range_end_inclusive:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        epochs_per_partition:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
    CoreApiTransactionTrackerCollectionEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/CoreApiTransactionIdKey'
            value:
              $ref: '#/components/schemas/CoreApiTransactionTrackerCollectionEntryValue'
    CoreApiTransactionTrackerCollectionEntryValue:
      type: object
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/CoreApiTransactionTrackerTransactionStatus"
    CoreApiTransactionTrackerTransactionStatus:
      type: string
      enum:
        - CommittedSuccess
        - CommittedFailure
        - Cancelled
    CoreApiPackageFieldRoyaltyAccumulatorSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiPackageFieldRoyaltyAccumulatorValue'
    CoreApiPackageFieldRoyaltyAccumulatorValue:
      type: object
      required:
        - vault_entity
      properties:
        vault_entity:
          $ref: "#/components/schemas/CoreApiEntityReference"
    CoreApiPackageCodeVmTypeEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/CoreApiPackageCodeKey'
            value:
              $ref: '#/components/schemas/CoreApiPackageCodeVmTypeEntryValue'
    CoreApiPackageCodeVmTypeEntryValue:
      type: object
      required:
        - vm_type
      properties:
        vm_type:
          $ref: '#/components/schemas/CoreApiVmType'
    CoreApiVmType:
      type: string
      enum:
        - Native
        - ScryptoV1
    CoreApiPackageCodeOriginalCodeEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/CoreApiPackageCodeKey'
            value:
              $ref: '#/components/schemas/CoreApiPackageCodeOriginalCodeEntryValue'
    CoreApiPackageCodeOriginalCodeEntryValue:
      type: object
      required:
        - code_hex
      properties:
        code_hex:
          type: string
          description: |
            Either the hex-encoded WASM package code (if Scrypto), or the native package identifier.
    CoreApiPackageCodeInstrumentedCodeEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/CoreApiPackageCodeKey'
            value:
              $ref: '#/components/schemas/CoreApiPackageCodeInstrumentedCodeEntryValue'
    CoreApiPackageCodeInstrumentedCodeEntryValue:
      type: object
      required:
        - code_hex
      properties:
        code_hex:
          type: string
          description: |
            The hex-encoded instrumented WASM package code.
    CoreApiSchemaEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/CoreApiSchemaKey'
            value:
              $ref: '#/components/schemas/CoreApiSchemaEntryValue'
    CoreApiSchemaEntryValue:
      type: object
      required:
        - schema
      properties:
        schema:
          $ref: '#/components/schemas/CoreApiScryptoSchema'
    CoreApiPackageBlueprintDefinitionEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/CoreApiBlueprintVersionKey'
            value:
              $ref: '#/components/schemas/CoreApiPackageBlueprintDefinitionEntryValue'
    CoreApiPackageBlueprintDefinitionEntryValue:
      type: object
      required:
        - definition
      properties:
        definition:
          $ref: '#/components/schemas/CoreApiBlueprintDefinition'
    CoreApiPackageBlueprintDependenciesEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/CoreApiBlueprintVersionKey'
            value:
              $ref: '#/components/schemas/CoreApiPackageBlueprintDependenciesEntryValue'
    CoreApiPackageBlueprintDependenciesEntryValue:
      type: object
      required:
        - dependencies
      properties:
        dependencies:
          $ref: '#/components/schemas/CoreApiBlueprintDependencies'
    CoreApiPackageBlueprintRoyaltyEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/CoreApiBlueprintVersionKey'
            value:
              $ref: '#/components/schemas/CoreApiPackageBlueprintRoyaltyEntryValue'
    CoreApiPackageBlueprintRoyaltyEntryValue:
      type: object
      required:
        - royalty_config
      properties:
        royalty_config:
          $ref: '#/components/schemas/CoreApiBlueprintRoyaltyConfig'
    CoreApiPackageBlueprintAuthTemplateEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/CoreApiBlueprintVersionKey'
            value:
              $ref: '#/components/schemas/CoreApiPackageBlueprintAuthTemplateEntryValue'
    CoreApiPackageBlueprintAuthTemplateEntryValue:
      type: object
      required:
        - auth_config
      properties:
        auth_config:
          description: The configuration of the package blueprint.
          $ref: '#/components/schemas/CoreApiAuthConfig'
    CoreApiFungibleResourceManagerFieldDivisibilitySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiFungibleResourceManagerFieldDivisibilityValue'
    CoreApiFungibleResourceManagerFieldDivisibilityValue:
      type: object
      required:
        - divisibility
      properties:
        divisibility:
          type: integer
          minimum: 0
          maximum: 18
    CoreApiFungibleResourceManagerFieldTotalSupplySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiFungibleResourceManagerFieldTotalSupplyValue'
    CoreApiFungibleResourceManagerFieldTotalSupplyValue:
      type: object
      required:
        - total_supply
      properties:
        total_supply:
          type: string
          description: |
            The string-encoded decimal representing the total supply of this resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiNonFungibleResourceManagerFieldIdTypeSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiNonFungibleResourceManagerFieldIdTypeValue'
    CoreApiNonFungibleResourceManagerFieldIdTypeValue:
      type: object
      required:
        - non_fungible_id_type
      properties:
        non_fungible_id_type:
          $ref: '#/components/schemas/CoreApiNonFungibleIdType'
    CoreApiNonFungibleResourceManagerFieldTotalSupplySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiNonFungibleResourceManagerFieldTotalSupplyValue'
    CoreApiNonFungibleResourceManagerFieldTotalSupplyValue:
      type: object
      required:
        - total_supply
      properties:
        total_supply:
          type: string
          description: |
            The string-encoded decimal representing the total supply of this resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiNonFungibleResourceManagerFieldMutableFieldsSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiNonFungibleResourceManagerFieldMutableFieldsValue'
    CoreApiNonFungibleResourceManagerFieldMutableFieldsValue:
      type: object
      required:
        - mutable_fields
      properties:
        mutable_fields:
          type: array
          description: The fields of the NF Metadata which are mutable.
          items:
            $ref: '#/components/schemas/CoreApiMutableField'
    CoreApiMutableField:
      type: object
      required:
        - name
        - index
      properties:
        name:
          type: string
        index:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
    CoreApiNonFungibleResourceManagerDataEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          description: |
            If the NF has been burned, the value is deleted and empty.
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/CoreApiLocalNonFungibleKey'
            value:
              $ref: '#/components/schemas/CoreApiNonFungibleResourceManagerDataEntryValue'
    CoreApiNonFungibleResourceManagerDataEntryValue:
      type: object
      description: |
        If missing, it represents a burned Non-Fungible.
        A Non-Fungible with that local id cannot be minted again - the id is not re-usable.
      required:
        - data_struct
      properties:
        data_struct:
          $ref: '#/components/schemas/CoreApiDataStruct'
    CoreApiFungibleVaultFieldBalanceSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiFungibleVaultFieldBalanceValue'
    CoreApiFungibleVaultFieldBalanceValue:
      type: object
      required:
        - amount
      properties:
        amount:
          type: string
          description: |
            The string-encoded decimal representing the token amount in the vault.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiFungibleVaultFieldFrozenStatusSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiFungibleVaultFieldFrozenStatusValue'
    CoreApiFungibleVaultFieldFrozenStatusValue:
      type: object
      required:
        - frozen_status
      properties:
        frozen_status:
          $ref: '#/components/schemas/CoreApiFrozenStatus'
    CoreApiFrozenStatus:
      type: object
      required:
        - is_withdraw_frozen
        - is_deposit_frozen
        - is_burn_frozen
      properties:
        is_withdraw_frozen:
          type: boolean
        is_deposit_frozen:
          type: boolean
        is_burn_frozen:
          type: boolean
    CoreApiNonFungibleVaultFieldBalanceSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiNonFungibleVaultFieldBalanceValue'
    CoreApiNonFungibleVaultFieldBalanceValue:
      type: object
      required:
        - amount
      properties:
        amount:
          type: string
          description: |
            The string-encoded decimal representing the token amount in the vault.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiNonFungibleVaultFieldFrozenStatusSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiNonFungibleVaultFieldFrozenStatusValue'
    CoreApiNonFungibleVaultFieldFrozenStatusValue:
      type: object
      required:
        - frozen_status
      properties:
        frozen_status:
          $ref: '#/components/schemas/CoreApiFrozenStatus'
    CoreApiNonFungibleVaultContentsIndexEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/CoreApiLocalNonFungibleKey'
            value:
              $ref: '#/components/schemas/CoreApiNonFungibleVaultContentsIndexEntryValue'
    CoreApiNonFungibleVaultContentsIndexEntryValue:
      type: object
      description: |
        This object is empty, and always present on this substate.
        Note that when a non-fungible is withdrawn from the vault, the full substate is deleted, which is marked
        by a DeletedSubstate action (rather than deletion of the value property in an UpdateSubstate action).
        This is because this is an Index entry, not a KeyValueStore entry.
      required:
        - is_present
      properties:
        is_present:
          description: |
            This is a dummy property which is always set to true and means nothing.
            It exists just to ensure this object has a well-defined type in OpenAPI schemas.
          type: boolean
    CoreApiConsensusManagerFieldConfigSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiConsensusManagerFieldConfigValue'
    CoreApiConsensusManagerFieldConfigValue:
      type: object
      required:
        - max_validators
        - epoch_change_condition
        - num_unstake_epochs
        - total_emission_xrd_per_epoch
        - min_validator_reliability
        - num_owner_stake_units_unlock_epochs
        - num_fee_increase_delay_epochs
        - validator_creation_usd_equivalent_cost
        - validator_creation_xrd_cost
      properties:
        max_validators:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, specifying the maximum number of validators
            in the active validator set.
        epoch_change_condition:
          $ref: '#/components/schemas/CoreApiEpochChangeCondition'
        num_unstake_epochs:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, specifying the minimum number of epochs
            before an unstaker can withdraw their XRD.
        total_emission_xrd_per_epoch:
          $ref: '#/components/schemas/CoreApiDecimal'
        min_validator_reliability:
          description: |
            A proportion (between 0 and 1) which a validator needs to exceed to get emissions in an epoch.
          $ref: '#/components/schemas/CoreApiDecimal'
        num_owner_stake_units_unlock_epochs:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, specifying the minimum number of epochs
            before an owner can take their stake units after attempting to withdraw them.
        num_fee_increase_delay_epochs:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, specifying the minimum number of epochs
            before a fee increase takes effect.
        validator_creation_usd_equivalent_cost:
          type: string
          description: |
            The defining decimal cost of a validator in USD.
            This is turned into an XRD cost through the current protocol-based USD/XRD multiplier.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        validator_creation_xrd_cost:
          type: string
          description: |
            The decimal amount of XRD required to be passed in a bucket to create a validator.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiConsensusManagerFieldValidatorRewardsSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiConsensusManagerFieldValidatorRewardsValue'
    CoreApiConsensusManagerFieldValidatorRewardsValue:
      type: object
      required:
        - proposer_rewards
        - rewards_vault
      properties:
        proposer_rewards:
          type: array
          items:
            $ref: '#/components/schemas/CoreApiProposerReward'
        rewards_vault:
          $ref: '#/components/schemas/CoreApiEntityReference'
    CoreApiEpochChangeCondition:
      type: object
      required:
        - min_round_count
        - max_round_count
        - target_duration_millis
      properties:
        min_round_count:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, specifying the minimum number of rounds per epoch
        max_round_count:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, specifying the maximum number of rounds per epoch
        target_duration_millis:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, specifying the target number of milliseconds per epoch,
            assuming the round number is within the min and max range.
    CoreApiConsensusManagerFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiConsensusManagerFieldStateValue'
    CoreApiConsensusManagerFieldStateValue:
      type: object
      required:
        - epoch
        - round
        - is_started
        - effective_epoch_start
        - actual_epoch_start
      properties:
        epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the current epoch
        round:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the current round in an epoch
        is_started:
          type: boolean
        effective_epoch_start:
          description: |
            The effective time the epoch started. A drift-free measure, used to work out when the
            epoch should ideally end.

            Note: in abnormal cases (e.g. Byzantine network quorum), this on-ledger field may be set
            to an arbitrary, extreme value allowed by 64-bit signed integer. The API will still
            clamp the timestamp to `0 <= ms <= 100000000000000 (== 10^14)`, which translates to
            `1970-01-01T00:00:00.000Z <= t <= 5138-11-16T09:46:40.000Z`.
          $ref: '#/components/schemas/CoreApiInstantMs'
        actual_epoch_start:
          description: |
            The actual time the epoch started. Not used by any logic, but the difference between
            this and the effective start gives a measure of the time it took for the end-of-epoch
            to be noticed.

            Note: in abnormal cases (e.g. Byzantine network quorum), this on-ledger field may be set
            to an arbitrary, extreme value allowed by 64-bit signed integer. The API will still
            clamp the timestamp to `0 <= ms <= 100000000000000 (== 10^14)`, which translates to
            `1970-01-01T00:00:00.000Z <= t <= 5138-11-16T09:46:40.000Z`.
          $ref: '#/components/schemas/CoreApiInstantMs'
        current_leader:
          $ref: '#/components/schemas/CoreApiActiveValidatorIndex'
    CoreApiConsensusManagerFieldCurrentProposalStatisticSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiConsensusManagerFieldCurrentProposalStatisticValue'
    CoreApiConsensusManagerFieldCurrentProposalStatisticValue:
      type: object
      required:
        - completed
        - missed
      properties:
        completed:
          type: array
          description: The number of successfully completed proposals this epoch for each validator, indexed by the validator order in the active set.
          items:
            type: integer
            format: int64
            minimum: 0
            maximum: 10000000000
        missed:
          type: array
          description: The number of missed proposals this epoch for each validator, indexed by the validator order in the active set.
          items:
            type: integer
            format: int64
            minimum: 0
            maximum: 10000000000
    CoreApiConsensusManagerFieldCurrentValidatorSetSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiConsensusManagerFieldCurrentValidatorSetValue'
    CoreApiConsensusManagerFieldCurrentValidatorSetValue:
      type: object
      required:
        - validator_set
      properties:
        validator_set:
          type: array
          items:
            $ref: '#/components/schemas/CoreApiActiveValidator'
    CoreApiConsensusManagerRegisteredValidatorsByStakeIndexEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/CoreApiActiveValidatorKey'
            value:
              $ref: '#/components/schemas/CoreApiConsensusManagerRegisteredValidatorsByStakeIndexEntryValue'
    CoreApiConsensusManagerRegisteredValidatorsByStakeIndexEntryValue:
      type: object
      required:
        - active_validator
      properties:
        active_validator:
          $ref: "#/components/schemas/CoreApiActiveValidator"
    CoreApiConsensusManagerFieldCurrentTimeRoundedToMinutesSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiConsensusManagerFieldCurrentTimeRoundedToMinutesValue'
    CoreApiConsensusManagerFieldCurrentTimeRoundedToMinutesValue:
      type: object
      required:
        - proposer_timestamp_rounded_down_to_minute
      properties:
        proposer_timestamp_rounded_down_to_minute:
          $ref: '#/components/schemas/CoreApiInstantMs'
          description: |
            The latest round proposer's timestamp (rounded down to the current minute).
            An honest quorum of validators keeps this aligned with wall-clock time, and non-decreasing.

            Note: in abnormal cases (e.g. Byzantine network quorum), this on-ledger field may be set
            to an arbitrary, extreme value allowed by 64-bit signed integer. The API will still
            clamp the timestamp to `0 <= ms <= 100000000000000 (== 10^14)`, which translates to
            `1970-01-01T00:00:00.000Z <= t <= 5138-11-16T09:46:40.000Z`.
    CoreApiConsensusManagerFieldCurrentTimeSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiConsensusManagerFieldCurrentTimeValue'
    CoreApiConsensusManagerFieldCurrentTimeValue:
      type: object
      required:
        - proposer_timestamp
      properties:
        proposer_timestamp:
          $ref: '#/components/schemas/CoreApiInstantMs'
          description: |
            The latest round proposer's timestamp.
            An honest quorum of validators keeps this aligned with wall-clock time, and non-decreasing.

            Note: in abnormal cases (e.g. Byzantine network quorum), this on-ledger field may be set
            to an arbitrary, extreme value allowed by 64-bit signed integer. The API will still
            clamp the timestamp to `0 <= ms <= 100000000000000 (== 10^14)`, which translates to
            `1970-01-01T00:00:00.000Z <= t <= 5138-11-16T09:46:40.000Z`.
    CoreApiValidatorFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiValidatorFieldStateValue'
    CoreApiValidatorFieldStateValue:
      type: object
      required:
        - public_key
        - is_registered
        - accepts_delegated_stake
        - validator_fee_factor
        - stake_unit_resource_address
        - stake_xrd_vault
        - claim_token_resource_address
        - pending_xrd_withdraw_vault
        - locked_owner_stake_unit_vault
        - pending_owner_stake_unit_unlock_vault
        - pending_owner_stake_unit_withdrawals
        - already_unlocked_owner_stake_unit_amount
      properties:
        sorted_key:
          $ref: '#/components/schemas/CoreApiSubstateKey'
        public_key:
          $ref: '#/components/schemas/CoreApiEcdsaSecp256k1PublicKey'
        is_registered:
          type: boolean
        accepts_delegated_stake:
          type: boolean
        validator_fee_factor:
          description: The proportion of the emission that the validator owner keeps.
          $ref: '#/components/schemas/CoreApiDecimal'
        validator_fee_change_request:
          $ref: '#/components/schemas/CoreApiValidatorFeeChangeRequest'
        stake_unit_resource_address:
          $ref: '#/components/schemas/CoreApiResourceAddress'
        stake_xrd_vault:
          $ref: '#/components/schemas/CoreApiEntityReference'
        claim_token_resource_address:
          $ref: '#/components/schemas/CoreApiResourceAddress'
        pending_xrd_withdraw_vault:
          $ref: '#/components/schemas/CoreApiEntityReference'
        locked_owner_stake_unit_vault:
          $ref: '#/components/schemas/CoreApiEntityReference'
        pending_owner_stake_unit_unlock_vault:
          $ref: '#/components/schemas/CoreApiEntityReference'
        pending_owner_stake_unit_withdrawals:
          type: array
          items:
            $ref: '#/components/schemas/CoreApiPendingOwnerStakeWithdrawal'
        already_unlocked_owner_stake_unit_amount:
          $ref: '#/components/schemas/CoreApiDecimal'
    CoreApiValidatorFeeChangeRequest:
      type: object
      required:
        - epoch_effective
        - new_fee_factor
      properties:
        epoch_effective:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch at which the fee change becomes effective.
        new_fee_factor:
          $ref: '#/components/schemas/CoreApiDecimal'
    CoreApiPendingOwnerStakeWithdrawal:
      type: object
      required:
        - epoch_unlocked
        - stake_unit_amount
      properties:
        epoch_unlocked:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch when the stake units are unlocked for withdrawal.
        stake_unit_amount:
          $ref: '#/components/schemas/CoreApiDecimal'
    CoreApiValidatorFieldProtocolUpdateReadinessSignalSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiValidatorFieldProtocolUpdateReadinessSignalValue'
    CoreApiValidatorFieldProtocolUpdateReadinessSignalValue:
      type: object
      properties:
        protocol_version_name:
          description: |
            If present, indicates the validator is currently signalling readiness for the given protocol version.
            Is validated to be exactly 32 chars long (if it exists).
          type: string
    CoreApiAccountFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiAccountFieldStateValue'
    CoreApiAccountFieldStateValue:
      type: object
      required:
        - default_deposit_rule
      properties:
        default_deposit_rule:
          $ref: '#/components/schemas/CoreApiDefaultDepositRule'
    CoreApiDefaultDepositRule:
      type: string
      description: |
        This setting has the following interpretations:
        - Allow: Allows the deposit of all resources - the deny list is honored in this state.
        - Reject: Disallows the deposit of all resources - the allow list is honored in this state.
        - AllowExisting: Only deposits of existing resources *or* XRD are accepted - both allow and deny lists are honored in this mode.
      enum:
        - Accept
        - Reject
        - AllowExisting
    CoreApiAccountVaultEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/CoreApiResourceKey'
            value:
              $ref: '#/components/schemas/CoreApiAccountVaultEntryValue'
    CoreApiAccountVaultEntryValue:
      type: object
      required:
        - vault
      properties:
        vault:
          $ref: '#/components/schemas/CoreApiEntityReference'
    CoreApiAccountResourcePreferenceEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/CoreApiResourceKey'
            value:
              $ref: '#/components/schemas/CoreApiAccountResourcePreferenceEntryValue'
    CoreApiAccountResourcePreferenceEntryValue:
      type: object
      required:
        - resource_preference
      properties:
        resource_preference:
          $ref: '#/components/schemas/CoreApiResourcePreference'
    CoreApiResourcePreference:
      type: string
      enum:
        - Allowed
        - Disallowed
    CoreApiAccountAuthorizedDepositorEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/CoreApiAuthorizedDepositorKey'
            value:
              $ref: '#/components/schemas/CoreApiAccountAuthorizedDepositorEntryValue'
    CoreApiAccountAuthorizedDepositorEntryValue:
      type: object
      description: Empty value. The existence of the key implies the depositor is authorized.
      required:
        - is_authorized
      properties:
        is_authorized:
          description: |
            This is always true. This field is just added to ensure we return some data as the value,
            so a present entry is not confused by clients for a deleted/missing entry (which would imply
            not authorized).
          type: boolean
    CoreApiAccountLockerAccountClaimsEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/CoreApiAccountAddressKey'
              description: An account which can claim the contents of associated vaults.
            value:
              $ref: '#/components/schemas/CoreApiAccountLockerAccountClaimsEntryValue'
    CoreApiAccountLockerAccountClaimsEntryValue:
      type: object
      required:
        - resource_vaults
      properties:
        resource_vaults:
          $ref: '#/components/schemas/CoreApiEntityReference'
          description: An owned Key-Value Store entity, which maps each `ResourceAddress` to its corresponding `Vault`.
    CoreApiAccessControllerFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiAccessControllerFieldStateValue'
    CoreApiAccessControllerFieldStateValue:
      type: object
      required:
        - controlled_vault
        - recovery_badge_resource_address
        - is_primary_role_locked
        - has_primary_role_badge_withdraw_attempt
        - has_recovery_role_badge_withdraw_attempt
      properties:
        controlled_vault:
          $ref: "#/components/schemas/CoreApiEntityReference"
        xrd_fee_vault:
          $ref: "#/components/schemas/CoreApiEntityReference"
          description: |
            An optional helper vault storing some amount of XRD that can be used by any of the roles
            for locking fees.
        timed_recovery_delay_minutes:
          nullable: true
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: |
            An integer between `0` and `2^32 - 1`, specifying the amount of time (in minutes) that
            it takes for timed recovery to be done. When not present, then timed recovery can not be
            performed through this access controller.
        recovery_badge_resource_address:
          $ref: "#/components/schemas/CoreApiResourceAddress"
        is_primary_role_locked:
          type: boolean
          description: Whether the primary role is currently locked.
        primary_role_recovery_attempt:
          $ref: "#/components/schemas/CoreApiPrimaryRoleRecoveryAttempt"
          description: The current attempt to recover a primary role, if any.
        has_primary_role_badge_withdraw_attempt:
          type: boolean
          description: Whether the primary role badge withdraw is currently being attempted.
        recovery_role_recovery_attempt:
          $ref: "#/components/schemas/CoreApiRecoveryRoleRecoveryAttempt"
          description: The current attempt to recover a recovery role, if any.
        has_recovery_role_badge_withdraw_attempt:
          type: boolean
          description: Whether the recovery role badge withdraw is currently being attempted.
    CoreApiPrimaryRoleRecoveryAttempt:
      type: object
      required:
        - recovery_proposal
      properties:
        recovery_proposal:
          $ref: "#/components/schemas/CoreApiRecoveryProposal"
          description: A new set of rules being proposed for different roles.
    CoreApiRecoveryRoleRecoveryAttempt:
      type: object
      required:
        - recovery_proposal
      properties:
        recovery_proposal:
          $ref: "#/components/schemas/CoreApiRecoveryProposal"
          description: A new set of rules being proposed for different roles.
        allow_timed_recovery_after:
          $ref: "#/components/schemas/CoreApiScryptoInstant"
          description: The time after which the recovery is allowed. Only present if this is a timed recovery.
    CoreApiRecoveryProposal:
      type: object
      required:
        - primary_role
        - recovery_role
        - confirmation_role
      properties:
        primary_role:
          $ref: "#/components/schemas/CoreApiAccessRule"
        recovery_role:
          $ref: "#/components/schemas/CoreApiAccessRule"
        confirmation_role:
          $ref: "#/components/schemas/CoreApiAccessRule"
        timed_recovery_delay_minutes:
          nullable: true
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: |
            An integer between `0` and `2^32 - 1`, specifying the optional proposal delay of timed recoveries.
    CoreApiGenericScryptoComponentFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiGenericScryptoComponentFieldStateValue'
    CoreApiGenericScryptoComponentFieldStateValue:
      type: object
      required:
        - data_struct
      properties:
        data_struct:
          $ref: '#/components/schemas/CoreApiDataStruct'
    CoreApiGenericKeyValueStoreEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/CoreApiGenericKey'
            value:
              $ref: '#/components/schemas/CoreApiGenericKeyValueStoreEntryValue'
    CoreApiGenericKeyValueStoreEntryValue:
      type: object
      description: If not present, the entry has been deleted.
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/CoreApiDataStruct'
    CoreApiOneResourcePoolFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiOneResourcePoolFieldStateValue'
    CoreApiOneResourcePoolFieldStateValue:
      type: object
      required:
        - vault
        - pool_unit_resource_address
      properties:
        vault:
          $ref: '#/components/schemas/CoreApiEntityReference'
        pool_unit_resource_address:
          $ref: '#/components/schemas/CoreApiResourceAddress'
    CoreApiTwoResourcePoolFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiTwoResourcePoolFieldStateValue'
    CoreApiTwoResourcePoolFieldStateValue:
      type: object
      required:
        - vaults
        - pool_unit_resource_address
      properties:
        vaults:
          type: array
          minItems: 2
          maxItems: 2
          items:
            $ref: '#/components/schemas/CoreApiPoolVault'
        pool_unit_resource_address:
          $ref: '#/components/schemas/CoreApiResourceAddress'
    CoreApiMultiResourcePoolFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/CoreApiSubstate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/CoreApiMultiResourcePoolFieldStateValue'
    CoreApiMultiResourcePoolFieldStateValue:
      type: object
      required:
        - vaults
        - pool_unit_resource_address
      properties:
        vaults:
          type: array
          minItems: 3
          items:
            $ref: '#/components/schemas/CoreApiPoolVault'
        pool_unit_resource_address:
          $ref: '#/components/schemas/CoreApiResourceAddress'
    CoreApiPoolVault:
      type: object
      required:
        - vault
        - resource_address
      properties:
        vault:
          $ref: '#/components/schemas/CoreApiEntityReference'
        resource_address:
          $ref: '#/components/schemas/CoreApiResourceAddress'
##########################################
# REQUEST: /lts/transaction/construction #
##########################################
    CoreApiLtsTransactionConstructionRequest:
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
    CoreApiLtsTransactionConstructionResponse:
      type: object
      required:
        - current_epoch
        - ledger_clock
      properties:
        current_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the current epoch
        ledger_clock:
          $ref: '#/components/schemas/CoreApiInstantMs'
          description: |
            The latest round proposer's timestamp (rounded down to the current minute).
            This is provided so that the client can detect if the node is synced up or not.

            Note: in abnormal cases (e.g. Byzantine network quorum), this on-ledger field may be set
            to an arbitrary, extreme value allowed by 64-bit signed integer. The API will still
            clamp the timestamp to `0 <= ms <= 100000000000000 (== 10^14)`, which translates to
            `1970-01-01T00:00:00.000Z <= t <= 5138-11-16T09:46:40.000Z`.
####################################
# REQUEST: /lts/transaction/status #
####################################
    CoreApiLtsTransactionStatusRequest:
      type: object
      required:
        - network
        - intent_hash
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        intent_hash:
          $ref: "#/components/schemas/CoreApiIntentHashInput"
    CoreApiLtsTransactionStatusResponse:
      type: object
      required:
        - intent_status
        - status_description
        - known_payloads
      properties:
        intent_status:
          $ref: "#/components/schemas/CoreApiLtsTransactionIntentStatus"
        status_description:
          type: string
          description: |
            An explanation as to why the intent status is resolved as it is.
        committed_state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: |
            The resultant state version when the transaction was committed.
            This is only present if the intent was committed (as a Success or Failure).
            This can be considered to be the auto-incrementing primary key for a committed transaction, and can be used e.g. to look up
            details on the transaction's outcome from the `/lts/stream/transaction-outcomes` endpoint.
        invalid_from_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected.
            Only present if the intent status is InMempool or Unknown and we know about a payload.
        known_payloads:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLtsTransactionPayloadDetails"
    CoreApiLtsTransactionPayloadDetails:
      type: object
      required:
        - payload_hash
        - payload_hash_bech32m
        - status
      properties:
        payload_hash:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHash"
        payload_hash_bech32m:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHashBech32m"
        state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: |
            State version of a committed transaction.
            This field will be present only if the `status` is `Committed*`.
        status:
          $ref: "#/components/schemas/CoreApiLtsTransactionPayloadStatus"
        error_message:
          description: An explanation for the error, if failed or rejected
          type: string
    CoreApiLtsTransactionIntentStatus:
      type: string
      description: |
        The status of the transaction intent, as determined by the node.
        FateUncertain or FateUncertainButLikelyRejection mean that it's still possible that a payload containing the transaction
      enum:
        - CommittedSuccess
        - CommittedFailure
        - PermanentRejection
        - InMempool
        - NotSeen
        - FateUncertain
        - FateUncertainButLikelyRejection
    CoreApiLtsTransactionPayloadStatus:
      type: string
      description: |
        The status of the transaction payload, as per this node.
        A NotInMempool status means that it wasn't rejected at last execution attempt, but it's not currently in the mempool either.
      enum:
        - CommittedSuccess
        - CommittedFailure
        - PermanentlyRejected
        - TransientlyRejected
        - InMempool
        - NotInMempool
####################################
# REQUEST: /lts/transaction/submit #
####################################
    CoreApiLtsTransactionSubmitRequest:
      type: object
      required:
        - network
        - notarized_transaction_hex
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        notarized_transaction_hex:
          description: A hex-encoded, compiled notarized transaction.
          type: string
        force_recalculate:
          description: If true, the transaction validity is freshly recalculated without using any caches (defaults false)
          type: boolean
    CoreApiLtsTransactionSubmitResponse:
      type: object
      required:
        - duplicate
      properties:
        duplicate:
          description: Is true if the transaction is a duplicate of an existing transaction in the mempool.
          type: boolean
    CoreApiLtsTransactionSubmitErrorResponse:
      allOf:
        - $ref: "#/components/schemas/CoreApiErrorResponse"
        - type: object
          properties:
            details:
              $ref: "#/components/schemas/CoreApiLtsTransactionSubmitErrorDetails"
    CoreApiLtsTransactionSubmitErrorDetailsType:
      type: string
      enum:
        - PriorityThresholdNotMet
        - IntentAlreadyCommitted
        - Rejected
    CoreApiLtsTransactionSubmitErrorDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiLtsTransactionSubmitErrorDetailsType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match LtsTransactionSubmitErrorDetailsType
          PriorityThresholdNotMet: "#/components/schemas/CoreApiLtsTransactionSubmitPriorityThresholdNotMetErrorDetails"
          IntentAlreadyCommitted: "#/components/schemas/CoreApiLtsTransactionSubmitIntentAlreadyCommitted"
          Rejected: "#/components/schemas/CoreApiLtsTransactionSubmitRejectedErrorDetails"
    CoreApiLtsTransactionSubmitPriorityThresholdNotMetErrorDetails:
      allOf:
        - $ref: "#/components/schemas/CoreApiLtsTransactionSubmitErrorDetails"
        - type: object
          required:
            - tip_percentage
          properties:
            tip_percentage:
              type: integer
              format: int32
              minimum: 0
              maximum: 65535
              description: |
                Tip percentage of the submitted (and rejected) transaction.
            min_tip_percentage_required:
              type: integer
              format: int32
              minimum: 0
              maximum: 65535
              description: |
                A lower bound for tip percentage at current mempool state. Anything lower than this will very likely result in a mempool rejection.
                A missing value means there is no tip that can guarantee submission.
    CoreApiLtsTransactionSubmitIntentAlreadyCommitted:
      allOf:
        - $ref: "#/components/schemas/CoreApiLtsTransactionSubmitErrorDetails"
        - type: object
          required:
            - committed_as
          properties:
            committed_as:
              $ref: "#/components/schemas/CoreApiCommittedIntentMetadata"
              description: |
                Details of an already-committed transaction that had the same intent.
    CoreApiLtsTransactionSubmitRejectedErrorDetails:
      allOf:
        - $ref: "#/components/schemas/CoreApiLtsTransactionSubmitErrorDetails"
        - type: object
          description: |
            Indicates that the transaction was executed and resulted in a rejection,
            therefore the transaction is not being added into the mempool.
          required:
            - error_message
            - is_fresh
            - is_payload_rejection_permanent
            - is_intent_rejection_permanent
          properties:
            error_message:
              type: string
              description: An explanation of the error
            is_fresh:
              type: boolean
              description: |
                Whether (true) this rejected status has just been calculated fresh, or (false) the status is from the pending
                transaction result cache.
            is_payload_rejection_permanent:
              type: boolean
              description: |
                Whether the rejection of this payload is known to be permanent.
            is_intent_rejection_permanent:
              type: boolean
              description: |
                Whether the rejection of this intent is known to be permanent - this is a stronger statement than the payload rejection
                being permanent, as it implies any payloads containing the intent will also be permanently rejected.
            retry_from_timestamp:
              $ref: "#/components/schemas/CoreApiInstantMs"
              description: |
                The time after which the node will consider recalculating the validity of the transaction.
                Only present if the rejection is temporary, and not due to the header specifying a "from epoch" in the future.
            retry_from_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, marking the epoch after which the node will consider recalculating the validity of the transaction.
                Only present if the rejection is temporary due to a header specifying a "from epoch" in the future.
            invalid_from_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected.
                Only present if the rejection isn't permanent.
##############################################################
# REQUEST: /lts/state/account-all-fungible-resource-balances #
##############################################################
    CoreApiLtsStateAccountAllFungibleResourceBalancesRequest:
      type: object
      required:
        - network
        - account_address
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
    CoreApiLtsStateAccountAllFungibleResourceBalancesResponse:
      type: object
      required:
        - state_version
        - ledger_header_summary
        - account_address
        - fungible_resource_balances
      properties:
        state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: The state version at which the query was performed.
        ledger_header_summary:
          $ref: "#/components/schemas/CoreApiLedgerHeaderSummary"
          description: The excerpt from the ledger header committed at the `state_version`.
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        fungible_resource_balances:
          description: A list containing all resource balances for the requested account.
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLtsFungibleResourceBalance"
    CoreApiLtsFungibleResourceBalance:
      type: object
      required:
        - fungible_resource_address
        - amount
      properties:
        fungible_resource_address:
          $ref: "#/components/schemas/CoreApiResourceAddress"
        amount:
          type: string
          description: |
            The string-encoded decimal representing the amount of the fungible resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
#########################################################
# REQUEST: /lts/state/account-fungible-resource-balance #
#########################################################
    CoreApiLtsStateAccountFungibleResourceBalanceRequest:
      type: object
      required:
        - network
        - account_address
        - resource_address
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        resource_address:
          $ref: "#/components/schemas/CoreApiResourceAddress"
    CoreApiLtsStateAccountFungibleResourceBalanceResponse:
      type: object
      required:
        - state_version
        - ledger_header_summary
        - account_address
        - fungible_resource_balance
      properties:
        state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: The state version at which the query was performed.
        ledger_header_summary:
          $ref: "#/components/schemas/CoreApiLedgerHeaderSummary"
          description: The excerpt from the ledger header committed at the `state_version`.
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        fungible_resource_balance:
          $ref: "#/components/schemas/CoreApiLtsFungibleResourceBalance"
#########################################################
# REQUEST: /lts/state/account-deposit-behaviour #
#########################################################
    CoreApiLtsStateAccountDepositBehaviourRequest:
      type: object
      required:
        - network
        - account_address
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        account_address:
          description: The Bech32m-encoded human readable version of the account's address.
          type: string
        resource_addresses:
          description: The resource addresses to check the deposit behaviours of.
          type: array
          maxItems: 20
          items:
            $ref: "#/components/schemas/CoreApiResourceAddress"
        badge:
          description: The depositor badge to check against the account's set of authorized depositors.
          $ref: '#/components/schemas/CoreApiPresentedBadge'
    CoreApiLtsStateAccountDepositBehaviourResponse:
      type: object
      required:
        - state_version
        - ledger_header_summary
        - default_deposit_rule
      properties:
        state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: The state version at which the query was performed.
        ledger_header_summary:
          $ref: "#/components/schemas/CoreApiLedgerHeaderSummary"
          description: The excerpt from the ledger header committed at the `state_version`.
        default_deposit_rule:
          $ref: '#/components/schemas/CoreApiDefaultDepositRule'
        is_badge_authorized_depositor:
          type: boolean
          description: |
            Whether the input `badge` belongs to the account's set of authorized depositors.
            This field will only be present if any badge was passed in the request.
        resource_specific_behaviours:
          type: object
          description: |
            A map from one of the input `resource_addresses` to its specific deposit behavior configured for this account.
            This field will only be present if an array of specific resource addresses was passed in the request (even if empty).
          additionalProperties:
            $ref: '#/components/schemas/CoreApiResourceSpecificDepositBehaviour'
    CoreApiResourceSpecificDepositBehaviour:
      type: object
      required:
        - vault_exists
        - is_xrd
        - allows_try_deposit
      properties:
        resource_preference:
          $ref: '#/components/schemas/CoreApiResourcePreference'
          description: Whether the resource is on the allow or the deny list (no preference when missing).
        vault_exists:
          type: boolean
          description: |
            Whether the account contains a vault for the resource (even if 0 balance).
            This plays a role when `DefaultDepositRule` is `AllowExisting`.
        is_xrd:
          type: boolean
          description: |
            Whether the resource represents the native XRD fungible.
            XRD is a special case which does not require `vault_exists = true` to satisfy the `AllowExisting` rule.
        allows_try_deposit:
          type: boolean
          description: |
            The fully resolved `try_deposit_*` ability of this resource (which takes all the inputs
            into account, including the authorized depositor badge, the default deposit rule and
            the above resource-specific circumstances).
#############################################
# REQUEST: /lts/stream/transaction-outcomes #
#############################################
    CoreApiLtsStreamTransactionOutcomesRequest:
      description: |
        A request to retrieve a sublist of committed transactions from the ledger.
      type: object
      required:
        - network
        - from_state_version
        - limit
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        from_state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: The first (resultant) state version to be returned
        limit:
          description: The maximum number of transactions that will be returned.
          type: integer
    CoreApiLtsStreamTransactionOutcomesResponse:
      type: object
      required:
        - from_state_version
        - count
        - max_ledger_state_version
        - committed_transaction_outcomes
      properties:
        from_state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: |
            The first (resultant) state version in the returned response (if any).
            This matches the `from_state_version` in the request.
        count:
          type: integer
          format: int32
          minimum: 0
          maximum: 10000
          description: An integer between `0` and `10000`, giving the total count of transactions in the returned response
        max_ledger_state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: The maximum state version currently committed on this node's ledger.
        committed_transaction_outcomes:
          description: A committed transaction outcomes list starting from the `from_state_version` (inclusive).
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLtsCommittedTransactionOutcome"
    CoreApiLtsCommittedTransactionStatus:
      type: string
      # These should align with LtsTransactionIntentStatus / LtsTransactionPayloadStatus
      enum:
        - Success
        - Failure
      description: The status of the transaction
    CoreApiLtsCommittedTransactionOutcome:
      description: |
        For the given transaction, contains the status, total fee summary and individual entity resource balance changes.
        The balance changes accounts for the fee payments as well.
      type: object
      required:
        - state_version
        - proposer_timestamp_ms
        - accumulator_hash
        - status
        - fungible_entity_balance_changes
        - non_fungible_entity_balance_changes
        - resultant_account_fungible_balances
        - total_fee
      properties:
        state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: The resultant state version after the transaction has been committed
        proposer_timestamp_ms:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^14`, marking the proposer timestamp in ms.
        accumulator_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded transaction accumulator hash. This hash captures the order of all transactions on ledger.
            This hash is `ACC_{N+1} = combine(ACC_N, LEDGER_HASH_{N}))` (where `combine()` is an arbitrary deterministic function we use).
        user_transaction_identifiers:
          description: Only present if the transaction is a user-submitted notarized transaction.
          $ref: "#/components/schemas/CoreApiTransactionIdentifiers"
        status:
          $ref: "#/components/schemas/CoreApiLtsCommittedTransactionStatus"
        fungible_entity_balance_changes:
          description: |
            A list of all fungible balance updates which occurred in this transaction, aggregated by the global entity (such as account)
            which owns the vaults which were updated.
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLtsEntityFungibleBalanceChanges"
        non_fungible_entity_balance_changes:
          description: |
            Non fungible changes per entity and resource
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLtsEntityNonFungibleBalanceChanges"
        resultant_account_fungible_balances:
          description: |
            A list of the resultant fungible account balances for any balances which changed in this transaction.
            Only balances for accounts are returned, not any other kind of entity.
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLtsResultantAccountFungibleBalances"
        total_fee:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD paid as fee (execution, validator tip and royalties).
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiLtsEntityFungibleBalanceChanges:
      type: object
      required:
        - entity_address
        - fee_balance_changes
        - non_fee_balance_changes
      properties:
        entity_address:
          type: string
          description: The Bech32m-encoded human readable version of the entity's address
        fee_balance_change:
          $ref: "#/components/schemas/CoreApiLtsFungibleResourceBalanceChange"
          description: |
            If present, this field indicates the entity contributed to the payment of the fee.
            The change in balance will always be negative.
            NOTE: This property is deprecated but kept for backwards compatibility. This entry is duplicated in
            `fee_balance_changes`.
        fee_balance_changes:
          type: array
          description: |
            If present, this field indicates fee-related balance changes, for example:

            - Payment of the fee (including tip and royalty)
            - Distribution of royalties
            - Distribution of the fee and tip to the consensus-manager, for distributing to the relevant
              validator/s at end of epoch

            See https://www.radixdlt.com/blog/how-fees-work-in-babylon for further information on how
            fee payment works at Babylon.
          items:
            $ref: "#/components/schemas/CoreApiLtsFeeFungibleResourceBalanceChange"
        non_fee_balance_changes:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLtsFungibleResourceBalanceChange"
    CoreApiLtsFungibleResourceBalanceChange:
      type: object
      required:
        - resource_address
        - balance_change
      properties:
        resource_address:
          type: string
          description: |
            The Bech32m-encoded human readable version of the fungible resource's address
        balance_change:
          type: string
          description: |
            The string-encoded decimal representing the amount of change for the fungible resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiLtsFeeFungibleResourceBalanceChange:
      type: object
      required:
        - type
        - resource_address
        - balance_change
      properties:
        type:
          $ref: "#/components/schemas/CoreApiLtsFeeFungibleResourceBalanceChangeType"
        resource_address:
          type: string
          description: |
            The Bech32m-encoded human readable version of the fungible resource's address
        balance_change:
          type: string
          description: |
            The string-encoded decimal representing the amount of change for the fungible resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CoreApiLtsFeeFungibleResourceBalanceChangeType:
      type: string
      enum:
        - FeePayment
        - FeeDistributed
        - TipDistributed
        - RoyaltyDistributed
    CoreApiLtsEntityNonFungibleBalanceChanges:
      type: object
      required:
        - entity_address
        - resource_address
        - added
        - removed
      properties:
        entity_address:
          type: string
          description: The Bech32m-encoded human readable version of the entity's address
        resource_address:
          type: string
          description: |
            The Bech32m-encoded human readable version of the non-fungible resource's address
        added:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLtsNonFungibleLocalId"
        removed:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLtsNonFungibleLocalId"
    CoreApiLtsNonFungibleLocalId:
      type: string
      description: |
        The simple string representation of the non-fungible id.
        * For string ids, this is `<the-string-id>`
        * For integer ids, this is `#the-integer-id#`
        * For bytes ids, this is `[the-lower-case-hex-representation]`
        * For RUID ids, this is `{...-...-...-...}` where `...` are each 16 hex characters.
        A given non-fungible resource has a fixed local id kind, so this representation uniquely
        identifies this non-fungible under the given resource address.
    CoreApiLtsResultantAccountFungibleBalances:
      type: object
      required:
        - account_address
        - resultant_balances
      properties:
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        resultant_balances:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLtsResultantFungibleBalance"
    CoreApiLtsResultantFungibleBalance:
      type: object
      required:
        - resource_address
        - resultant_balance
      properties:
        resource_address:
          type: string
          description: |
            The Bech32m-encoded human readable version of the fungible resource's address
        resultant_balance:
          type: string
          description: |
            The string-encoded decimal representing the resultant balance of the fungible resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
#####################################################
# REQUEST: /lts/stream/account-transaction-outcomes #
#####################################################
    CoreApiLtsStreamAccountTransactionOutcomesRequest:
      description: |
        A request to retrieve a sublist of committed transactions from the ledger.
      type: object
      required:
        - network
        - account_address
        - from_state_version
        - limit
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        from_state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: The first (resultant) state version to be returned
        limit:
          description: The maximum number of transactions that will be returned.
          type: integer
    CoreApiLtsStreamAccountTransactionOutcomesResponse:
      type: object
      required:
        - from_state_version
        - count
        - max_ledger_state_version
        - committed_transaction_outcomes
      properties:
        from_state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: |
            The first (resultant) state version in the returned response (if any).
            This matches the `from_state_version` in the request.
        count:
          type: integer
          format: int32
          minimum: 0
          maximum: 10000
          description: An integer between `0` and `10000`, giving the total count of transactions in the returned response
        max_ledger_state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: The maximum state version currently committed on this node's ledger.
        committed_transaction_outcomes:
          description: A committed transaction outcomes list starting from the `from_state_version` (inclusive).
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLtsCommittedTransactionOutcome"
##########################################
# REQUEST: /status/network-configuration #
##########################################
    CoreApiNetworkConfigurationResponse:
      type: object
      required:
        - version
        - network
        - network_id
        - network_hrp_suffix
        - usd_price_in_xrd
        - address_types
        - well_known_addresses
      properties:
        version:
          description: Different versions regarding the node, network and api.
          type: object
          required:
            - core_version
            - api_version
          properties:
            core_version:
              type: string
            api_version:
              type: string
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        network_id:
          $ref: "#/components/schemas/CoreApiNetworkIdentifierByte"
        network_hrp_suffix:
          type: string
          description: The network suffix used for Bech32m HRPs used for addressing.
        usd_price_in_xrd:
          type: string
          description: |
            The current value of the protocol-based USD/XRD multiplier (i.e. an amount of XRDs to be paid for 1 USD).
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        address_types:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiAddressType"
        well_known_addresses:
          type: object
          description: Key addresses for this network.
          required:
            - xrd
            - secp256k1_signature_virtual_badge
            - ed25519_signature_virtual_badge
            - package_of_direct_caller_virtual_badge
            - global_caller_virtual_badge
            - system_transaction_badge
            - package_owner_badge
            - validator_owner_badge
            - account_owner_badge
            - identity_owner_badge
            - package_package
            - resource_package
            - account_package
            - identity_package
            - consensus_manager_package
            - access_controller_package
            - transaction_processor_package
            - metadata_module_package
            - royalty_module_package
            - role_assignment_module_package
            - genesis_helper_package
            - faucet_package
            - pool_package
            - consensus_manager
            - genesis_helper
            - faucet
            - transaction_tracker
          properties:
            xrd:
              type: string
            secp256k1_signature_virtual_badge:
              type: string
            ed25519_signature_virtual_badge:
              type: string
            package_of_direct_caller_virtual_badge:
              type: string
            global_caller_virtual_badge:
              type: string
            system_transaction_badge:
              type: string
            package_owner_badge:
              type: string
            validator_owner_badge:
              type: string
            account_owner_badge:
              type: string
            identity_owner_badge:
              type: string
            package_package:
              type: string
            resource_package:
              type: string
            account_package:
              type: string
            identity_package:
              type: string
            consensus_manager_package:
              type: string
            access_controller_package:
              type: string
            transaction_processor_package:
              type: string
            metadata_module_package:
              type: string
            royalty_module_package:
              type: string
            role_assignment_module_package:
              type: string
            genesis_helper_package:
              type: string
            faucet_package:
              type: string
            pool_package:
              type: string
            locker_package:
              type: string
            consensus_manager:
              type: string
            genesis_helper:
              type: string
            faucet:
              type: string
            transaction_tracker:
              type: string
    CoreApiAddressType:
      type: object
      required:
        - hrp_prefix
        - entity_type
        - address_byte_prefix
        - address_byte_length
      properties:
        hrp_prefix:
          type: string
        entity_type:
          $ref: "#/components/schemas/CoreApiEntityType"
        address_byte_prefix:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        address_byte_length:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
###################################
# REQUEST: /status/network-status #
###################################
    CoreApiNetworkStatusRequest:
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
    CoreApiNetworkStatusResponse:
      type: object
      required:
        - pre_genesis_state_identifier
        - current_protocol_version
      properties:
        pre_genesis_state_identifier:
          $ref: "#/components/schemas/CoreApiCommittedStateIdentifier"
          description: |
            The ledger state identifier of a fresh ledger before any genesis transactions.
        genesis_epoch_round:
          $ref: "#/components/schemas/CoreApiEpochRound"
          description: |
            The epoch details for the genesis epoch and round.
            The genesis epoch will be the last Olympia epoch + 1, and have a "fake" round-number 1 (because there is no round for the genesis transaction).
            In the Gateway, this can be used for the epoch and round number before the first RoundUpdate transaction.
            It is not present until genesis has been run.
        post_genesis_state_identifier:
          $ref: "#/components/schemas/CoreApiCommittedStateIdentifier"
          description: |
            The ledger state after the genesis transactions have been executed.
            It is not present until genesis has been run.
        post_genesis_epoch_round:
          $ref: "#/components/schemas/CoreApiEpochRound"
          description: |
            The post-genesis epoch and round.
        current_state_identifier:
          $ref: "#/components/schemas/CoreApiCommittedStateIdentifier"
          description: |
            The current state identifier at the top of the node's copy of the ledger (ie as of the latest committed transaction).
            It is not present until genesis has been run.
        current_epoch_round:
          $ref: "#/components/schemas/CoreApiEpochRound"
          description: |
            The current epoch and round of the ledger.
            It is not present until genesis has been run.
        current_protocol_version:
          type: string
          description: |
            A descriptor for the current protocol version that the node is running.
    CoreApiEpochRound:
      type: object
      required:
        - epoch
        - round
      properties:
        epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch.
            Only present if the rejection is temporary due to a header specifying a "from epoch" in the future.
        round:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the current round in an epoch
    CoreApiCommittedStateIdentifier:
      allOf:
        - type: object
          required:
            - state_version
          properties:
            state_version:
              $ref: "#/components/schemas/CoreApiStateVersion"
              description: The state version, which increments with each transaction, starting at `0` pre-genesis.
        - $ref: "#/components/schemas/CoreApiLedgerHashes"
##############################
# REQUEST: /status/scenarios #
##############################
    CoreApiScenariosRequest:
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
    CoreApiScenariosResponse:
      type: object
      required:
        - executed_scenarios
      properties:
        executed_scenarios:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiExecutedScenario"
          description: |
            Scenarios executed as part of Genesis and Protocol Updates, in their execution order.
    CoreApiExecutedScenario:
      type: object
      required:
        - sequence_number
        - logical_name
        - committed_transactions
        - addresses
      properties:
        sequence_number:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000000
          description: An index of the Scenario (reflecting its execution order).
        logical_name:
          type: string
        committed_transactions:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiExecutedScenarioTransaction"
          description: Transactions successfully committed by the Scenario.
        addresses:
          type: object
          description: |
            Well-named addresses touched/created by the Scenario, keyed by their name.
          additionalProperties:
            $ref: "#/components/schemas/CoreApiDescribedAddress"
    CoreApiExecutedScenarioTransaction:
      type: object
      required:
        - logical_name
        - state_version
        - intent_hash
        - intent_hash_bech32m
      properties:
        logical_name:
          type: string
        state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
        intent_hash:
          $ref: "#/components/schemas/CoreApiIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/CoreApiIntentHashBech32m"
    CoreApiDescribedAddress:
      type: string
      description: An arbitrary Bech32m-encoded human readable address (its type should be inferred from `logical_name`).
##########################
# REQUEST: /mempool/list #
##########################
    CoreApiMempoolListRequest:
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
    CoreApiMempoolListResponse:
      type: object
      required:
        - contents
      properties:
        contents:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiMempoolTransactionHashes"
    CoreApiMempoolTransactionHashes:
      type: object
      required:
        - intent_hash
        - intent_hash_bech32m
        - payload_hash
        - payload_hash_bech32m
      properties:
        intent_hash:
          $ref: "#/components/schemas/CoreApiIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/CoreApiIntentHashBech32m"
        payload_hash:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHash"
        payload_hash_bech32m:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHashBech32m"
#################################
# REQUEST: /mempool/transaction #
#################################
    CoreApiMempoolTransactionRequest:
      type: object
      required:
        - network
        - payload_hashes
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        payload_hashes:
          description: A list of payload hashes to attempt to read. Each hash must be either hex, or in Bech32m format.
          type: array
          items:
            $ref: "#/components/schemas/CoreApiNotarizedTransactionHashInput"
    CoreApiMempoolTransactionResponse:
      type: object
      required:
        - count
        - payloads
      properties:
        count:
          type: integer
          format: int32
          description: An integer giving the total count of payload hashes checked in the returned response.
        payloads:
          type: array
          description: |
            An array containing pairs of payload hash (query) and payload hex or error (response).
            Note that this response is bounded - this means it is not guaranteed all queries will be processed.
            Please query missing payload hashes again.
          items:
            type: object
            required:
              - hash
              - hash_bech32m
            properties:
              hash:
                $ref: "#/components/schemas/CoreApiNotarizedTransactionHash"
              hash_bech32m:
                $ref: "#/components/schemas/CoreApiNotarizedTransactionHashBech32m"
              hex:
                type: string
                description: The hex-encoded full notarized transaction payload - returned only if found in mempool.
              error:
                type: string
                description: |
                  Error message why `hex` field is missing: the transaction was not found in the mempool or the provided hash is invalid.
###############################
# REQUEST: /transaction/parse #
###############################
    CoreApiTransactionParseRequest:
      type: object
      required:
        - network
        - payload_hex
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        payload_hex:
          type: string
          description: |
            A hex-encoded payload of a full transaction or a partial transaction - either a notarized transaction,
            a signed transaction intent an unsigned transaction intent, or a ledger payload.
        parse_mode:
          type: string
          enum:
            - Any
            - Notarized
            - Signed
            - Unsigned
            - Ledger
          description: |
            The type of transaction payload that should be assumed. If omitted, "Any" is used - where the payload is
            attempted to be parsed as each of the following in turn: Notarized, Signed, Unsigned, Ledger.
        validation_mode:
          type: string
          enum:
            - None
            - Static
            - Full
          description: |
            The type of validation that should be performed, if the payload correctly decompiles as a Notarized Transaction.
            This is only relevant for Notarized payloads. If omitted, "Static" is used.
        response_mode:
          type: string
          enum:
            - Basic
            - Full
          description: |
            The amount of information to return in the response.
            "Basic" includes the type, validity information, and any relevant identifiers.
            "Full" also includes the fully parsed information.
            If omitted, "Full" is used.
        transaction_format_options:
          $ref: "#/components/schemas/CoreApiTransactionFormatOptions"
    CoreApiTransactionParseResponse:
      type: object
      required:
        - parsed
        - is_valid
      properties:
        parsed:
          $ref: "#/components/schemas/CoreApiParsedTransaction"
    CoreApiParsedTransactionType:
      type: string
      description: The type of the parsed (partial) transaction payload
      enum:
        - NotarizedTransaction
        - SignedTransactionIntent
        - TransactionIntent
        - LedgerTransaction
    CoreApiParsedTransaction:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiParsedTransactionType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match ParsedTransactionType
          NotarizedTransaction: '#/components/schemas/CoreApiParsedNotarizedTransaction'
          SignedTransactionIntent: '#/components/schemas/CoreApiParsedSignedTransactionIntent'
          TransactionIntent: '#/components/schemas/CoreApiParsedTransactionIntent'
          LedgerTransaction: '#/components/schemas/CoreApiParsedLedgerTransaction'
    CoreApiParsedNotarizedTransaction:
      allOf:
        - $ref: "#/components/schemas/CoreApiParsedTransaction"
        - type: object
          required:
            - identifiers
          properties:
            notarized_transaction:
              $ref: "#/components/schemas/CoreApiNotarizedTransaction"
            identifiers:
              $ref: "#/components/schemas/CoreApiParsedNotarizedTransactionIdentifiers"
            validation_error:
              type: object
              description: |
                If the transaction is known to not be valid, this gives a reason.
                Different levels of validation are performed, dependent on the validation mode.
                Note that, even if validation mode is Static or Full, the transaction may
                still be rejected or fail due to issues at runtime (eg if the loan cannot be repaid).
              required:
                - reason
                - is_permanent
              properties:
                reason:
                  type: string
                  description: |
                    The error message.
                is_permanent:
                  type: boolean
                  description: |
                    Whether the error is known to be permanent, or not.
                    This relates to whether the transaction would be rejected permanently or temporarily if submitted.
    CoreApiParsedNotarizedTransactionIdentifiers:
      type: object
      required:
        - intent_hash
        - intent_hash_bech32m
        - signed_intent_hash
        - signed_intent_hash_bech32m
        - payload_hash
        - payload_hash_bech32m
        - ledger_hash
        - ledger_hash_bech32m
      properties:
        intent_hash:
          $ref: "#/components/schemas/CoreApiIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/CoreApiIntentHashBech32m"
        signed_intent_hash:
          $ref: "#/components/schemas/CoreApiSignedIntentHash"
        signed_intent_hash_bech32m:
          $ref: "#/components/schemas/CoreApiSignedIntentHashBech32m"
        payload_hash:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHash"
        payload_hash_bech32m:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHashBech32m"
        ledger_hash:
          $ref: "#/components/schemas/CoreApiLedgerPayloadHash"
        ledger_hash_bech32m:
          $ref: "#/components/schemas/CoreApiLedgerPayloadHashBech32m"
    CoreApiParsedSignedTransactionIntent:
      allOf:
        - $ref: "#/components/schemas/CoreApiParsedTransaction"
        - type: object
          required:
            - identifiers
          properties:
            signed_intent:
              $ref: "#/components/schemas/CoreApiSignedTransactionIntent"
            identifiers:
              $ref: "#/components/schemas/CoreApiParsedSignedTransactionIntentIdentifiers"
    CoreApiParsedSignedTransactionIntentIdentifiers:
      type: object
      required:
        - intent_hash
        - intent_hash_bech32m
        - signed_intent_hash
        - signed_intent_hash_bech32m
      properties:
        intent_hash:
          $ref: "#/components/schemas/CoreApiIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/CoreApiIntentHashBech32m"
        signed_intent_hash:
          $ref: "#/components/schemas/CoreApiSignedIntentHash"
        signed_intent_hash_bech32m:
          $ref: "#/components/schemas/CoreApiSignedIntentHashBech32m"
    CoreApiParsedTransactionIntent:
      allOf:
        - $ref: "#/components/schemas/CoreApiParsedTransaction"
        - type: object
          required:
            - identifiers
          properties:
            intent:
              $ref: "#/components/schemas/CoreApiTransactionIntent"
            identifiers:
              $ref: "#/components/schemas/CoreApiParsedTransactionIntentIdentifiers"
    CoreApiParsedTransactionIntentIdentifiers:
      type: object
      required:
        - intent_hash
        - intent_hash_bech32m
      properties:
        intent_hash:
          $ref: "#/components/schemas/CoreApiIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/CoreApiIntentHashBech32m"
    CoreApiParsedLedgerTransaction:
      allOf:
        - $ref: "#/components/schemas/CoreApiParsedTransaction"
        - type: object
          required:
            - identifiers
          properties:
            ledger_transaction:
              $ref: "#/components/schemas/CoreApiLedgerTransaction"
            identifiers:
              $ref: "#/components/schemas/CoreApiParsedLedgerTransactionIdentifiers"
    CoreApiParsedLedgerTransactionIdentifiers:
      type: object
      required:
        - ledger_hash
        - ledger_hash_bech32m
      properties:
        intent_hash:
          $ref: "#/components/schemas/CoreApiIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/CoreApiIntentHashBech32m"
        signed_intent_hash:
          $ref: "#/components/schemas/CoreApiSignedIntentHash"
        signed_intent_hash_bech32m:
          $ref: "#/components/schemas/CoreApiSignedIntentHashBech32m"
        payload_hash:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHash"
        payload_hash_bech32m:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHashBech32m"
        ledger_hash:
          $ref: "#/components/schemas/CoreApiLedgerPayloadHash"
        ledger_hash_bech32m:
          $ref: "#/components/schemas/CoreApiLedgerPayloadHashBech32m"
################################
# REQUEST: /transaction/submit #
################################
    CoreApiTransactionSubmitRequest:
      type: object
      required:
        - network
        - notarized_transaction_hex
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        notarized_transaction_hex:
          description: A hex-encoded, compiled notarized transaction.
          type: string
        force_recalculate:
          description: If true, the transaction validity is freshly recalculated without using any caches (defaults false)
          type: boolean
    CoreApiTransactionSubmitResponse:
      type: object
      required:
        - duplicate
      properties:
        duplicate:
          description: Is true if the transaction is a duplicate of an existing transaction in the mempool.
          type: boolean
    CoreApiTransactionSubmitErrorResponse:
      allOf:
        - $ref: "#/components/schemas/CoreApiErrorResponse"
        - type: object
          properties:
            details:
              $ref: "#/components/schemas/CoreApiTransactionSubmitErrorDetails"
    CoreApiTransactionSubmitErrorDetailsType:
      type: string
      enum:
        - PriorityThresholdNotMet
        - IntentAlreadyCommitted
        - Rejected
    CoreApiTransactionSubmitErrorDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiTransactionSubmitErrorDetailsType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match TransactionSubmitErrorDetailsType
          PriorityThresholdNotMet: '#/components/schemas/CoreApiTransactionSubmitPriorityThresholdNotMetErrorDetails'
          IntentAlreadyCommitted: '#/components/schemas/CoreApiTransactionSubmitIntentAlreadyCommitted'
          Rejected: '#/components/schemas/CoreApiTransactionSubmitRejectedErrorDetails'
    CoreApiTransactionSubmitPriorityThresholdNotMetErrorDetails:
      allOf:
        - $ref: "#/components/schemas/CoreApiTransactionSubmitErrorDetails"
        - type: object
          required:
            - tip_percentage
          properties:
            tip_percentage:
              type: integer
              format: int32
              minimum: 0
              maximum: 65535
              description: |
                Tip percentage of the submitted (and rejected) transaction.
            min_tip_percentage_required:
              type: integer
              format: int32
              minimum: 0
              maximum: 65535
              description: |
                A lower bound for tip percentage at current mempool state. Anything lower than this will very likely result in a mempool rejection.
                A missing value means there is no tip that can guarantee submission.
    CoreApiTransactionSubmitIntentAlreadyCommitted:
      allOf:
        - $ref: "#/components/schemas/CoreApiTransactionSubmitErrorDetails"
        - type: object
          required:
            - committed_as
          properties:
            committed_as:
              $ref: "#/components/schemas/CoreApiCommittedIntentMetadata"
              description: |
                Details of an already-committed transaction that had the same intent.
    CoreApiTransactionSubmitRejectedErrorDetails:
      allOf:
        - $ref: "#/components/schemas/CoreApiTransactionSubmitErrorDetails"
        - type: object
          description: |
            Indicates that the transaction was executed and resulted in a rejection,
            therefore the transaction is not being added into the mempool.
          required:
            - error_message
            - is_fresh
            - is_payload_rejection_permanent
            - is_intent_rejection_permanent
          properties:
            error_message:
              type: string
              description: An explanation of the error
            is_fresh:
              type: boolean
              description: |
                Whether (true) this rejected status has just been calculated fresh, or (false) the status is from the pending
                transaction result cache.
            is_payload_rejection_permanent:
              type: boolean
              description: |
                Whether the rejection of this payload is known to be permanent.
            is_intent_rejection_permanent:
              type: boolean
              description: |
                Whether the rejection of this intent is known to be permanent - this is a stronger statement than the payload rejection
                being permanent, as it implies any payloads containing the intent will also be permanently rejected.
            retry_from_timestamp:
              $ref: "#/components/schemas/CoreApiInstantMs"
              description: |
                The time after which the node will consider recalculating the validity of the transaction.
                Only present if the rejection is temporary, and not due to the header specifying a "from epoch" in the future.
            retry_from_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, marking the epoch after which the node will consider recalculating the validity of the transaction.
                Only present if the rejection is temporary due to a header specifying a "from epoch" in the future.
            invalid_from_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected.
                Only present if the rejection isn't permanent.
################################
# REQUEST: /transaction/status #
################################
    CoreApiTransactionStatusRequest:
      type: object
      required:
        - network
        - intent_hash
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        intent_hash:
          $ref: "#/components/schemas/CoreApiIntentHashInput"
    CoreApiTransactionStatusResponse:
      type: object
      required:
        - intent_status
        - status_description
        - known_payloads
      properties:
        intent_status:
          $ref: "#/components/schemas/CoreApiTransactionIntentStatus"
        status_description:
          type: string
          description: |
            An explanation as to why the intent status is resolved as it is.
        invalid_from_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected.
            Only present if the intent status is InMempool or Unknown and we know about a payload.
        known_payloads:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiTransactionPayloadDetails"
    CoreApiTransactionPayloadDetails:
      type: object
      required:
        - payload_hash
        - payload_hash_bech32m
        - status
      properties:
        payload_hash:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHash"
        payload_hash_bech32m:
          $ref: "#/components/schemas/CoreApiNotarizedTransactionHashBech32m"
        state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: |
            State version of a committed transaction.
            This field will be present only if the `status` is `Committed*`.
        status:
          $ref: "#/components/schemas/CoreApiTransactionPayloadStatus"
          description: |
            The status of the transaction payload, as per this node.
            A NotInMempool status means that it wasn't rejected at last execution attempt, but it's not currently in the mempool either.
        error_message:
          description: An explanation for the error, if failed or rejected
          type: string
    CoreApiTransactionPayloadStatus:
      type: string
      enum:
        - CommittedSuccess
        - CommittedFailure
        - PermanentlyRejected
        - TransientlyRejected
        - InMempool
        - NotInMempool
    CoreApiTransactionIntentStatus:
      type: string
      description: |
        The status of the transaction intent, as determined by the node.
        FateUncertain or FateUncertainButLikelyRejection mean that it's still possible that a payload containing the transaction
      enum:
        - CommittedSuccess
        - CommittedFailure
        - PermanentRejection
        - InMempool
        - NotSeen
        - FateUncertain
        - FateUncertainButLikelyRejection
#################################
# REQUEST: /transaction/receipt #
#################################
    CoreApiTransactionReceiptRequest:
      type: object
      required:
        - network
        - intent_hash
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        intent_hash:
          $ref: "#/components/schemas/CoreApiIntentHashInput"
        transaction_format_options:
          $ref: "#/components/schemas/CoreApiTransactionFormatOptions"
    CoreApiTransactionReceiptResponse:
      type: object
      required:
        - committed
      properties:
        committed:
          $ref: "#/components/schemas/CoreApiCommittedTransaction"
#####################################
# REQUEST: /transaction/callpreview #
#####################################
    CoreApiTransactionCallPreviewRequest:
      type: object
      required:
        - network
        - target
        - arguments
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        at_ledger_state:
          $ref: "#/components/schemas/CoreApiLedgerStateSelector"
        target:
          $ref: "#/components/schemas/CoreApiTargetIdentifier"
        arguments:
          type: array
          description: Argument list
          items:
            type: string
            description: SBOR-encoded argument, formatted as a hex-string
    CoreApiTargetIdentifierType:
      type: string
      enum:
        - Method
        - Function
    CoreApiTargetIdentifier:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/CoreApiTargetIdentifierType'
      discriminator:
        propertyName: type
        mapping:
          Method: '#/components/schemas/CoreApiComponentMethodTargetIdentifier'
          Function: '#/components/schemas/CoreApiBlueprintFunctionTargetIdentifier'
    CoreApiComponentMethodTargetIdentifier:
      allOf:
        - $ref: '#/components/schemas/CoreApiTargetIdentifier'
        - type: object
          required:
            - component_address
            - method_name
          properties:
            component_address:
              $ref: "#/components/schemas/CoreApiComponentAddress"
            method_name:
              type: string
    CoreApiBlueprintFunctionTargetIdentifier:
      allOf:
        - $ref: '#/components/schemas/CoreApiTargetIdentifier'
        - type: object
          required:
            - package_address
            - blueprint_name
            - function_name
          properties:
            package_address:
              $ref: "#/components/schemas/CoreApiPackageAddress"
            blueprint_name:
              type: string
            function_name:
              type: string
    CoreApiTransactionCallPreviewResponse:
      type: object
      required:
        - at_ledger_state
        - status
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/CoreApiLedgerStateSummary"
          description: A summarized state of the ledger on top of which the preview was performed.
        status:
          $ref: "#/components/schemas/CoreApiTransactionStatus"
        output:
          $ref: "#/components/schemas/CoreApiSborData"
        error_message:
          type: string
          description: Error message (only present if status is Failed or Rejected)
#################################
# REQUEST: /transaction/preview #
#################################
    CoreApiTransactionPreviewRequest:
      type: object
      required:
        - network
        - manifest
        - start_epoch_inclusive
        - end_epoch_exclusive
        - cost_unit_limit
        - tip_percentage
        - nonce
        - signer_public_keys
        - flags
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        at_ledger_state:
          $ref: "#/components/schemas/CoreApiLedgerStateSelector"
        manifest:
          description: A text-representation of a transaction manifest
          type: string
        blobs_hex:
          description: An array of hex-encoded blob data (optional)
          type: array
          items:
            type: string
        start_epoch_inclusive:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the epoch at which the transaction starts being valid
        end_epoch_exclusive:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the epoch at which the transaction is no longer valid
        notary_public_key:
          $ref: "#/components/schemas/CoreApiPublicKey"
          description: The notary public key to use (optional)
        notary_is_signatory:
          type: boolean
          description: Whether the notary should count as a signatory (optional, default false)
        tip_percentage:
          type: integer
          format: int32
          minimum: 0
          maximum: 65535
          description: An integer between `0` and `65535`, giving the validator tip as a percentage amount. A value of `1` corresponds to 1% of the fee.
        nonce:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: |
            An integer between `0` and `2^32 - 1`, chosen to allow a unique intent to be created (to enable submitting an otherwise identical/duplicate intent).
        signer_public_keys:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiPublicKey"
          description: A list of public keys to be used as transaction signers
        message:
          description: An optional transaction message. Only affects the costing.
          $ref: "#/components/schemas/CoreApiTransactionMessage"
        flags:
          type: object
          required:
            - use_free_credit
            - assume_all_signature_proofs
            - skip_epoch_check
          properties:
            use_free_credit:
              type: boolean
            assume_all_signature_proofs:
              type: boolean
            skip_epoch_check:
              type: boolean
            # This was added later so isn't required; for backwards compatibility
            disable_auth_checks:
              description: |
                Can be used to skip performing auth checks during runtime.

                This could be used to e.g.:
                * Preview protocol update style transactions
                * Mint resources for previewing trades with resources you don't own. If doing this, be warned:
                  * Only resources which were potentially mintable/burnable at creation time
                  will be mintable/burnable, due to feature flags on the resource.
                  * Please see the below warning about unexpected results if using this approach.

                Please be warned - this mode of operation is quite a departure from normal operation:
                * Calculated fees will likely be lower than a standard execution
                * This mode can subtly break invariants some dApp code might rely on, or result in unexpected
                behaviour, so the resulting execution result might not be valid for your needs. For example,
                if I used this flag to mint pool units to preview a redemption (or some dApp interaction which
                behind the scenes redeemed them), they'd redeem for less than they're currently worth,
                because the blueprint code relies on the total supply of the pool units to calculate their
                redemption worth, and you've just inflated the total supply through the mint operation.
              type: boolean
    CoreApiTransactionPreviewResponse:
      type: object
      required:
        - at_ledger_state
        - encoded_receipt
        - receipt
        - instruction_resource_changes
        - logs
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/CoreApiLedgerStateSummary"
          description: A summarized state of the ledger on top of which the preview was performed.
        encoded_receipt:
          type: string
          description: The hex-sbor-encoded receipt
        receipt:
          $ref: "#/components/schemas/CoreApiTransactionReceipt"
        instruction_resource_changes:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiInstructionResourceChanges"
        logs:
          type: array
          items:
            type: object
            required:
              - level
              - message
            properties:
              level:
                type: string
              message:
                type: string
############################
# REQUEST: /stream/proofs #
###########################
    CoreApiStreamProofsRequest:
      description: |
        A request to retrieve a sublist of proofs.
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        filter:
          $ref: "#/components/schemas/CoreApiStreamProofsFilter"
        max_page_size:
          description: If specified, the maximum number of proofs that will be returned.
          type: integer
        continuation_token:
          $ref: "#/components/schemas/CoreApiContinuationToken"
    CoreApiStreamProofsFilterType:
      type: string
      enum:
        - Any
        - NewEpochs
        - ProtocolUpdateInitializations
        - ProtocolUpdateExecution
    CoreApiStreamProofsFilter:
      type: object
      description: If not provided, defaults to "Any".
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiStreamProofsFilterType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match StreamProofsFilterType
          Any: '#/components/schemas/CoreApiStreamProofsFilterAny'
          NewEpochs: '#/components/schemas/CoreApiStreamProofsFilterNewEpochs'
          ProtocolUpdateInitializations: '#/components/schemas/CoreApiStreamProofsFilterProtocolUpdateInitializations'
          ProtocolUpdateExecution: '#/components/schemas/CoreApiStreamProofsFilterProtocolUpdateExecution'
    CoreApiStreamProofsFilterAny:
      allOf:
        - $ref: "#/components/schemas/CoreApiStreamProofsFilter"
        - type: object
          properties:
            from_state_version:
              $ref: "#/components/schemas/CoreApiStateVersion"
              description:
                The first proof to be returned should be at this state version or above.
                If empty, it starts from 0.
    CoreApiStreamProofsFilterNewEpochs:
      allOf:
        - $ref: "#/components/schemas/CoreApiStreamProofsFilter"
        - type: object
          properties:
            from_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description:
                The first proof to be returned should be the proof starting this epoch.
                If empty, it starts from the first epoch proof after genesis.
                The network status endpoint can be used to find the current epoch.
    CoreApiStreamProofsFilterProtocolUpdateInitializations:
      allOf:
        - $ref: "#/components/schemas/CoreApiStreamProofsFilter"
        - type: object
          properties:
            from_state_version:
              $ref: "#/components/schemas/CoreApiStateVersion"
              description:
                The first proof to be returned should be at this state version or above.
                If empty, it starts from 0.
    CoreApiStreamProofsFilterProtocolUpdateExecution:
      allOf:
        - $ref: "#/components/schemas/CoreApiStreamProofsFilter"
        - type: object
          properties:
            protocol_version:
              type: string
              description: |
                The protocol version name to filter to.
            from_state_version:
              $ref: "#/components/schemas/CoreApiStateVersion"
              description:
                The first proof to be returned should be at this state version or above.
                If empty, it starts from 0.
    CoreApiStreamProofsResponse:
      type: object
      required:
        - page
      properties:
        page:
          description: A page of ledger proofs stored by this node.
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLedgerProof"
        continuation_token:
          $ref: "#/components/schemas/CoreApiContinuationToken"
    CoreApiStreamProofsErrorResponse:
      allOf:
        - $ref: "#/components/schemas/CoreApiErrorResponse"
        - type: object
          properties:
            details:
              $ref: "#/components/schemas/CoreApiStreamProofsErrorDetails"
    CoreApiStreamProofsErrorDetailsType:
      type: string
      enum:
        - RequestedStateVersionOutOfBounds
        - RequestedEpochOutOfBounds
    CoreApiStreamProofsErrorDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiStreamProofsErrorDetailsType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match StreamProofsErrorDetailsType
          RequestedStateVersionOutOfBounds: '#/components/schemas/CoreApiStreamProofsErrorDetailsRequestedStateVersionOutOfBounds'
          RequestedEpochOutOfBounds: '#/components/schemas/CoreApiStreamProofsErrorDetailsRequestedEpochOutOfBounds'
    CoreApiStreamProofsErrorDetailsRequestedStateVersionOutOfBounds:
      allOf:
        - $ref: "#/components/schemas/CoreApiStreamProofsErrorDetails"
        - type: object
          required:
            - max_ledger_state_version
          properties:
            max_ledger_state_version:
              $ref: "#/components/schemas/CoreApiStateVersion"
              description: |
                The maximum state version currently committed on this node's ledger.
                *Note on the bounds:* the requested `from_state_version` cannot be greater than
                `max_ledger_state_version + 1`. Any greater requested value triggers this error.
    CoreApiStreamProofsErrorDetailsRequestedEpochOutOfBounds:
      allOf:
        - $ref: "#/components/schemas/CoreApiStreamProofsErrorDetails"
        - type: object
          required:
            - max_ledger_epoch
          properties:
            max_ledger_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                The maximum completed epoch committed to this node's ledger.
                *Note on the bounds:* the requested `from_epoch` cannot be greater than
                `max_ledger_epoch + 1`. Any greater requested value triggers this error.
    CoreApiEpochEndLedgerProof:
      type: object
      required:
        - end_of_epoch
        - ledger_proof
      properties:
        end_of_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
        ledger_proof:
          $ref: "#/components/schemas/CoreApiLedgerProof"
#################################
# REQUEST: /stream/transactions #
#################################
    CoreApiStreamTransactionsRequest:
      description: |
        A request to retrieve a sublist of committed transactions from the ledger.
      type: object
      required:
        - network
        - from_state_version
        - limit
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        from_state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: The first (resultant) state version to be returned
        limit:
          description: The maximum number of transactions that will be returned.
          type: integer
        sbor_format_options:
          $ref: "#/components/schemas/CoreApiSborFormatOptions"
        transaction_format_options:
          $ref: "#/components/schemas/CoreApiTransactionFormatOptions"
        substate_format_options:
          $ref: "#/components/schemas/CoreApiSubstateFormatOptions"
        include_proofs:
          description: Whether to include LedgerProofs (default false)
          type: boolean
    CoreApiStreamTransactionsResponse:
      type: object
      required:
        - from_state_version
        - count
        - max_ledger_state_version
        - transactions
      properties:
        previous_state_identifiers:
          $ref: "#/components/schemas/CoreApiCommittedStateIdentifier"
          description: |
            Identifiers for the state on top of which the returned transactions were executed (ie `from_state_version - 1`).
            This should be used for sanity-checking that you're reading from the ledger history you're expecting.
            If this is field is missing, the previous state does not exists (`from_state_version` is 0).
        from_state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: |
            The first (resultant) state version in the returned response (if any).
            This matches the `from_state_version` in the request.
        count:
          type: integer
          format: int32
          minimum: 0
          maximum: 10000
          description: An integer between `0` and `10000`, giving the total count of transactions in the returned response
        max_ledger_state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
          description: The maximum state version currently committed on this node's ledger.
        transactions:
          description: A committed transactions list starting from the `from_state_version` (inclusive).
          type: array
          items:
            $ref: "#/components/schemas/CoreApiCommittedTransaction"
        proofs:
          description: A ledger proof list starting from `from_state_version` (inclusive) stored by this node.
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLedgerProof"
    CoreApiStreamTransactionsErrorResponse:
      allOf:
        - $ref: "#/components/schemas/CoreApiErrorResponse"
        - type: object
          properties:
            details:
              $ref: "#/components/schemas/CoreApiStreamTransactionsErrorDetails"
    CoreApiStreamTransactionsErrorDetailsType:
      type: string
      enum:
        - RequestedStateVersionOutOfBounds
    CoreApiStreamTransactionsErrorDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiStreamTransactionsErrorDetailsType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match StreamTransactionsErrorDetailsType
          RequestedStateVersionOutOfBounds: '#/components/schemas/CoreApiRequestedStateVersionOutOfBoundsErrorDetails'
    CoreApiRequestedStateVersionOutOfBoundsErrorDetails:
      allOf:
        - $ref: "#/components/schemas/CoreApiStreamTransactionsErrorDetails"
        - type: object
          required:
            - max_ledger_state_version
          properties:
            max_ledger_state_version:
              $ref: "#/components/schemas/CoreApiStateVersion"
              description: |
                The maximum state version currently committed on this node's ledger - the same as
                would be returned by the `max_ledger_state_version` in a successful response.
                *Note on the bounds:* the requested `from_state_version` cannot be greater than
                `max_ledger_state_version + 1` (which is an edge case returning valid
                `previous_state_identifiers` and an empty `transactions`). Any greater requested
                value triggers this error.
    CoreApiCommittedTransaction:
      type: object
      required:
        - resultant_state_identifiers
        - ledger_transaction
        - receipt
        - proposer_timestamp_ms
      properties:
        resultant_state_identifiers:
          $ref: "#/components/schemas/CoreApiCommittedStateIdentifier"
        ledger_transaction:
          $ref: "#/components/schemas/CoreApiLedgerTransaction"
        receipt:
          $ref: "#/components/schemas/CoreApiTransactionReceipt"
        balance_changes:
          description: |
            All balance changes of a transaction (including those fee-related), aggregated by resource and global entity
            within which the change occurred. Only returned if available and enabled in `TransactionFormatOptions` on your request.
          $ref: "#/components/schemas/CoreApiCommittedTransactionBalanceChanges"
        proposer_timestamp_ms:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^14`, marking the proposer timestamp in ms.
    CoreApiCommittedTransactionBalanceChanges:
      type: object
      required:
        - fungible_entity_balance_changes
        - non_fungible_entity_balance_changes
      properties:
        fungible_entity_balance_changes:
          description: |
            A list of all fungible balance updates which occurred in this transaction, aggregated by the global entity (such as account)
            which owns the vaults which were updated.
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLtsEntityFungibleBalanceChanges"
        non_fungible_entity_balance_changes:
          description: |
            Non fungible changes per entity and resource
          type: array
          items:
            $ref: "#/components/schemas/CoreApiLtsEntityNonFungibleBalanceChanges"
    CoreApiLedgerProofOriginType:
      type: string
      enum:
        - Genesis
        - Consensus
        - ProtocolUpdate
    CoreApiLedgerProofOrigin:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiLedgerProofOriginType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match LedgerProofOriginType
          Genesis: '#/components/schemas/CoreApiGenesisLedgerProofOrigin'
          Consensus: '#/components/schemas/CoreApiConsensusLedgerProofOrigin'
          ProtocolUpdate: '#/components/schemas/CoreApiProtocolUpdateLedgerProofOrigin'
    CoreApiGenesisLedgerProofOrigin:
      allOf:
        - $ref: "#/components/schemas/CoreApiLedgerProofOrigin"
        - type: object
          required:
            - genesis_opaque_hash
          properties:
            genesis_opaque_hash:
              type: string
    CoreApiConsensusLedgerProofOrigin:
      allOf:
        - $ref: "#/components/schemas/CoreApiLedgerProofOrigin"
        - type: object
          required:
            - opaque_hash
            - timestamped_signatures
          properties:
            opaque_hash:
              $ref: "#/components/schemas/CoreApiOpaqueHash"
            timestamped_signatures:
              type: array
              items:
                $ref: "#/components/schemas/CoreApiTimestampedValidatorSignature"
    CoreApiProtocolUpdateLedgerProofOrigin:
      allOf:
        - $ref: "#/components/schemas/CoreApiLedgerProofOrigin"
        - type: object
          required:
            - protocol_version_name
            - batch_idx
          properties:
            protocol_version_name:
              type: string
            batch_idx:
              type: integer
              format: int64
    CoreApiLedgerProof:
      type: object
      required:
        - ledger_header
        - origin
      properties:
        ledger_header:
          $ref: "#/components/schemas/CoreApiLedgerHeader"
        origin:
          $ref: "#/components/schemas/CoreApiLedgerProofOrigin"
    CoreApiLedgerHeader:
      type: object
      required:
        - epoch
        - round
        - state_version
        - hashes
        - consensus_parent_round_timestamp_ms
        - proposer_timestamp_ms
      properties:
        epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the epoch.
        round:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the current round in an epoch
        state_version:
          $ref: "#/components/schemas/CoreApiStateVersion"
        hashes:
          $ref: "#/components/schemas/CoreApiLedgerHashes"
        consensus_parent_round_timestamp_ms:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^14`, marking the consensus parent round timestamp in ms.
        proposer_timestamp_ms:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^14`, marking the proposer timestamp in ms.
        next_epoch:
          $ref: "#/components/schemas/CoreApiNextEpoch"
        next_protocol_version:
          type: string
          description: If present, indicates that this proof triggers the enactment of the given protocol version.
    CoreApiTimestampedValidatorSignature:
      type: object
      required:
        - validator_key
        - validator_address
        - timestamp_ms
        - signature
      properties:
        validator_key:
          $ref: "#/components/schemas/CoreApiEcdsaSecp256k1PublicKey"
        validator_address:
          $ref: "#/components/schemas/CoreApiComponentAddress"
        timestamp_ms:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^14`, marking the unix timestamp in ms.
        signature:
          $ref: "#/components/schemas/CoreApiEcdsaSecp256k1Signature"
    CoreApiOpaqueHash:
      type: string
      minLength: 64
      maxLength: 64
      description: A hex-encoded 32-byte vertex VoteData hash on the consensus side, opaque to ledger.
    CoreApiLedgerTransactionType:
      type: string
      description: The type of the ledger transaction
      enum:
        - Genesis
        - User
        - RoundUpdate
        - Flash
    CoreApiLedgerTransaction:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CoreApiLedgerTransactionType"
        payload_hex:
          type: string
          description: The hex-encoded full ledger transaction payload. Only returned if enabled in TransactionFormatOptions on your request.
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match LedgerTransactionType
          Genesis: '#/components/schemas/CoreApiGenesisLedgerTransaction'
          User: '#/components/schemas/CoreApiUserLedgerTransaction'
          RoundUpdate: '#/components/schemas/CoreApiRoundUpdateLedgerTransaction'
          Flash: '#/components/schemas/CoreApiFlashLedgerTransaction'
    CoreApiGenesisLedgerTransaction:
      allOf:
        - $ref: "#/components/schemas/CoreApiLedgerTransaction"
        - type: object
          required:
            - is_flash
          properties:
            is_flash:
              description: |
                The first genesis "transaction" flashes state into the database to prepare for the bootstrap transaction.
                Such a transaction does not have an associated `system_transaction`
              type: boolean
            system_transaction:
              $ref: "#/components/schemas/CoreApiSystemTransaction"
    CoreApiUserLedgerTransaction:
      allOf:
        - $ref: "#/components/schemas/CoreApiLedgerTransaction"
        - type: object
          required:
            - notarized_transaction
          properties:
            notarized_transaction:
              $ref: "#/components/schemas/CoreApiNotarizedTransaction"
    CoreApiRoundUpdateLedgerTransaction:
      allOf:
        - $ref: "#/components/schemas/CoreApiLedgerTransaction"
        - type: object
          required:
            - round_update_transaction
          properties:
            round_update_transaction:
              $ref: "#/components/schemas/CoreApiRoundUpdateTransaction"
    CoreApiFlashLedgerTransaction:
      allOf:
        - $ref: "#/components/schemas/CoreApiLedgerTransaction"
        - type: object
          required:
            - name
            - flashed_state_updates
          properties:
            name:
              type: string
              description: Human-readable identifier of the flash transaction.
            flashed_state_updates:
              $ref: "#/components/schemas/CoreApiFlashedStateUpdates"
    CoreApiRoundUpdateTransaction:
      type: object
      required:
        - proposer_timestamp
        - epoch
        - round_in_epoch
        - leader_proposal_history
      properties:
        proposer_timestamp:
          $ref: '#/components/schemas/CoreApiInstantMs'
          description: |
            The round proposer's timestamp.

            Note: in abnormal cases (e.g. Byzantine network quorum), this on-ledger field may be set
            to an arbitrary, extreme value allowed by 64-bit signed integer. The API will still
            clamp the timestamp to `0 <= ms <= 100000000000000 (== 10^14)`, which translates to
            `1970-01-01T00:00:00.000Z <= t <= 5138-11-16T09:46:40.000Z`.
        epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch.
        round_in_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the consensus round in the epoch
        leader_proposal_history:
          $ref: '#/components/schemas/CoreApiLeaderProposalHistory'
          description: A recent history (i.e. since the previous `RoundUpdateValidatorTransaction`) of consensus round leaders' reliability. Used for validator emissions calculation.
    CoreApiFlashedStateUpdates:
      type: object
      description: Direct state updates performed by a Flash Transaction.
      required:
        - deleted_partitions
        - set_substates
        - deleted_substates
      properties:
        deleted_partitions:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiPartitionId"
        set_substates:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiFlashSetSubstate"
        deleted_substates:
          type: array
          items:
            $ref: "#/components/schemas/CoreApiSubstateId"
    CoreApiFlashSetSubstate:
      type: object
      required:
        - substate_id
        - value
      properties:
        substate_id:
          $ref: "#/components/schemas/CoreApiSubstateId"
        value:
          $ref: "#/components/schemas/CoreApiSubstateValue"
          description: The new value set on the substate.
    CoreApiLeaderProposalHistory:
      type: object
      required:
        - gap_round_leaders
        - current_leader
        - is_fallback
      properties:
        gap_round_leaders:
          type: array
          description: The validators which were leaders of the "gap" rounds (i.e. since the previous `RoundUpdateValidatorTransaction` - which means that this list will contain exactly `current.round - previous.round - 1` elements). The validators on this list should be penalized during emissions at the end of the epoch.
          items:
            $ref: "#/components/schemas/CoreApiActiveValidatorIndex"
        current_leader:
          $ref: '#/components/schemas/CoreApiActiveValidatorIndex'
          description: The leader of the concluded round.
        is_fallback:
          type: boolean
          description: Whether the concluded round was conducted in a "fallback" mode (i.e. indicating a fault of the current leader). When `true`, the `current_leader` should be penalized during emissions in the same way as `gap_round_leaders`. When `false`, the `current_leader` is considered to have made this round's proposal successfully.
    CoreApiActiveValidatorIndex:
      type: object
      required:
        - index
      properties:
        index:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          description: An index of a validator within a specific active validator set (ordered by stake descending). This is the same ordering as used by other parts of the API which list active validators.
    CoreApiSystemTransaction:
      type: object
      properties:
        payload_hex:
          type: string
          description: The hex-encoded system transaction payload. Only returned if enabled in TransactionFormatOptions on your request.
#####################################
# REQUEST: /state/consensus-manager #
#####################################
    CoreApiStateConsensusManagerRequest:
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        include_readiness_signals:
          description: Whether to include protocol update readiness signals of active validator set (default false).
          type: boolean
    CoreApiStateConsensusManagerResponse:
      type: object
      required:
        - at_ledger_state
        - config
        - state
        - current_proposal_statistic
        - current_validator_set
        - current_time
        - current_time_rounded_to_minutes
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/CoreApiLedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        config:
          $ref: "#/components/schemas/CoreApiSubstate"
        state:
          $ref: "#/components/schemas/CoreApiSubstate"
        current_proposal_statistic:
          $ref: "#/components/schemas/CoreApiSubstate"
        current_validator_set:
          $ref: "#/components/schemas/CoreApiSubstate"
        current_time:
          $ref: "#/components/schemas/CoreApiSubstate"
        current_time_rounded_to_minutes:
          $ref: "#/components/schemas/CoreApiSubstate"
        current_validator_readiness_signals:
          description: |
            Protocol versions signalled by the current validator set.
            Every validator from `current_validator_set` will be referenced by exactly one of the items here.
            Only returned if enabled by `include_readiness_signals` on your request.
          type: array
          items:
            $ref: "#/components/schemas/CoreApiProtocolVersionReadiness"
    CoreApiProtocolVersionReadiness:
      type: object
      required:
        - total_active_stake_proportion
        - signalling_validators
      properties:
        signalled_protocol_version:
          # Note: Re-using "#/components/schemas/CoreApiProtocolVersion" hits a quirk of the TypeScript's
          # generator ("attribute components.schemas.ProtocolVersionReadiness.ProtocolVersion is not
          # of type `schema`").
          type: string
          description: |
            A name identifying a protocol version. May be absent to denote no readiness signalled by
            the `signalling_validators`.
        total_active_stake_proportion:
          type: string
          description: |
            A sum of `active_stake_proportion` across `signalling_validators` (i.e. an easily-computable convenience field).
            This is a string-encoded fixed-precision decimal to 18 decimal places.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        signalling_validators:
          description: |
            References to some of the current validators (i.e. a subset of `current_validator_set`)
            which have signalled readiness for the `signalled_protocol_version`.
          type: array
          items:
            $ref: '#/components/schemas/CoreApiSignallingValidator'
    CoreApiSignallingValidator:
      type: object
      required:
        - index
        - active_stake_proportion
      properties:
        index:
          $ref: '#/components/schemas/CoreApiActiveValidatorIndex'
          description: Validator index within the `current_validator_set`.
        active_stake_proportion:
          type: string
          description: |
            A proportion (between 0 and 1) of the total active stake of an entire `current_validator_set` (i.e. an easily-computable convenience field).
            This is a string-encoded fixed-precision decimal to 18 decimal places.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
###########################
# REQUEST: /state/account #
###########################
    CoreApiStateAccountRequest:
      type: object
      required:
        - network
        - account_address
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's global address
    CoreApiStateAccountResponse:
      type: object
      required:
        - at_ledger_state
        - info
        - owner_role
        - state
        - vaults
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/CoreApiLedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        info:
          $ref: "#/components/schemas/CoreApiSubstate"
        owner_role:
          $ref: "#/components/schemas/CoreApiSubstate"
        state:
          $ref: "#/components/schemas/CoreApiSubstate"
        vaults:
          type: array
          description: All of the account's vaults
          items:
            $ref: "#/components/schemas/CoreApiVaultBalance"
    CoreApiVaultBalance:
      type: object
      required:
        - vault_entity
        - resource_amount
      properties:
        vault_entity:
          $ref: "#/components/schemas/CoreApiEntityReference"
        resource_amount:
          $ref: "#/components/schemas/CoreApiResourceAmount"
#############################
# REQUEST: /state/component #
#############################
    CoreApiStateComponentRequest:
      type: object
      required:
        - network
        - component_address
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        component_address:
          type: string
          description: The Bech32m-encoded human readable version of the component's global address
    CoreApiStateComponentResponse:
      type: object
      required:
        - at_ledger_state
        - info
        - state
        - owner_role
        - vaults
        - descendent_nodes
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/CoreApiLedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        info:
          $ref: "#/components/schemas/CoreApiSubstate"
        state:
          $ref: "#/components/schemas/CoreApiSubstate"
        royalty_accumulator:
          $ref: "#/components/schemas/CoreApiSubstate"
        owner_role:
          $ref: "#/components/schemas/CoreApiSubstate"
        vaults:
          type: array
          description: Any vaults owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/CoreApiVaultBalance"
        descendent_nodes:
          type: array
          description: Any descendent nodes owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/CoreApiStateComponentDescendentNode"
    CoreApiStateComponentDescendentNode:
      type: object
      required:
        - parent_entity
        - parent_partition_number
        - parent_substate_key_hex
        - parent_substate_db_sort_key_hex
        - entity
        - depth
      properties:
        parent_entity:
          $ref: "#/components/schemas/CoreApiEntityReference"
        parent_partition_number:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        parent_substate_key_hex:
          type: string
          description: The hex-encoded bytes of the substate key, under the entity partition
        parent_substate_db_sort_key_hex:
          type: string
          description: The hex-encoded bytes of the partially-hashed DB sort key, under the given entity partition
        entity:
          $ref: "#/components/schemas/CoreApiEntityReference"
        depth:
          description: Depth under component
          type: integer
          format: int32
          minimum: 0
          maximum: 100
#############################
# REQUEST: /state/validator #
#############################
    CoreApiStateValidatorRequest:
      type: object
      required:
        - network
        - validator_address
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        validator_address:
          $ref: "#/components/schemas/CoreApiComponentAddress"
    CoreApiStateValidatorResponse:
      type: object
      required:
        - at_ledger_state
        - address
        - state
        - protocol_update_readiness_signal
        - owner_role
        - vaults
        - descendent_nodes
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/CoreApiLedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        address:
          $ref: '#/components/schemas/CoreApiComponentAddress'
        state:
          $ref: "#/components/schemas/CoreApiSubstate"
        protocol_update_readiness_signal:
          $ref: "#/components/schemas/CoreApiSubstate"
        owner_role:
          $ref: "#/components/schemas/CoreApiSubstate"
        vaults:
          type: array
          description: Any vaults owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/CoreApiVaultBalance"
        descendent_nodes:
          type: array
          description: Any descendent nodes owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/CoreApiStateComponentDescendentNode"
#####################################
# REQUEST: /state/access-controller #
#####################################
    CoreApiStateAccessControllerRequest:
      type: object
      required:
        - network
        - controller_address
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        controller_address:
          $ref: "#/components/schemas/CoreApiComponentAddress"
    CoreApiStateAccessControllerResponse:
      type: object
      required:
        - at_ledger_state
        - state
        - owner_role
        - vaults
        - descendent_nodes
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/CoreApiLedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        state:
          $ref: "#/components/schemas/CoreApiSubstate"
        owner_role:
          $ref: "#/components/schemas/CoreApiSubstate"
        vaults:
          type: array
          description: Any vaults owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/CoreApiVaultBalance"
        descendent_nodes:
          type: array
          description: Any descendent nodes owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/CoreApiStateComponentDescendentNode"
############################
# REQUEST: /state/resource #
############################
    CoreApiStateResourceRequest:
      type: object
      required:
        - network
        - resource_address
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        resource_address:
          type: string
          description: The Bech32m-encoded human readable version of the resource's global address
    CoreApiStateResourceResponse:
      type: object
      required:
        - at_ledger_state
        - manager
        - owner_role
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/CoreApiLedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        manager:
          $ref: "#/components/schemas/CoreApiStateResourceManager"
        owner_role:
          $ref: "#/components/schemas/CoreApiSubstate"
    CoreApiStateResourceManager:
      type: object
      required:
        - resource_type
      properties:
        resource_type:
          $ref: '#/components/schemas/CoreApiResourceType'
      discriminator:
        propertyName: resource_type
        mapping:
          # NOTE: These need to match ResourceType
          Fungible: '#/components/schemas/CoreApiStateFungibleResourceManager'
          NonFungible: '#/components/schemas/CoreApiStateNonFungibleResourceManager'
    CoreApiStateFungibleResourceManager:
      allOf:
        - $ref: '#/components/schemas/CoreApiStateResourceManager'
        - type: object
          required:
            - divisibility
          properties:
            divisibility:
              $ref: "#/components/schemas/CoreApiSubstate"
            total_supply:
              $ref: "#/components/schemas/CoreApiSubstate"
    CoreApiStateNonFungibleResourceManager:
      allOf:
        - $ref: '#/components/schemas/CoreApiStateResourceManager'
        - type: object
          required:
            - id_type
            - mutable_fields
          properties:
            id_type:
              $ref: "#/components/schemas/CoreApiSubstate"
            total_supply:
              $ref: "#/components/schemas/CoreApiSubstate"
            mutable_fields:
              $ref: "#/components/schemas/CoreApiSubstate"
################################
# REQUEST: /state/non-fungible #
################################
    CoreApiStateNonFungibleRequest:
      type: object
      required:
        - network
        - resource_address
        - non_fungible_id
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        resource_address:
          type: string
          description: The Bech32m-encoded human readable version of the resource's global address
        non_fungible_id:
          $ref: '#/components/schemas/CoreApiNonFungibleLocalIdSimpleRepresentation'
    CoreApiStateNonFungibleResponse:
      type: object
      required:
        - at_ledger_state
        - non_fungible
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/CoreApiLedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        non_fungible:
          $ref: "#/components/schemas/CoreApiSubstate"
###########################
# REQUEST: /state/package #
###########################
    CoreApiStatePackageRequest:
      type: object
      required:
        - network
        - package_address
      properties:
        network:
          $ref: "#/components/schemas/CoreApiNetworkIdentifier"
        package_address:
          type: string
          description: The Bech32m-encoded human readable version of the package's global address
    CoreApiStatePackageResponse:
      type: object
      required:
        - at_ledger_state
        - owner_role
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/CoreApiLedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        owner_role:
          $ref: "#/components/schemas/CoreApiSubstate"
        royalty:
          $ref: "#/components/schemas/CoreApiSubstate"
