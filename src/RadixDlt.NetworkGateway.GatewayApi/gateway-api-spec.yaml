openapi: 3.0.0
info:
  version: 2.0.0
  title: Radix Babylon Gateway API
  license:
    name: The Radix License, Version 1.0
    url: https://www.radixfoundation.org/licenses/LICENSE-v1
  description: |
    See https://docs.radixdlt.com/main/apis/introduction.html

servers:
  - url: http://localhost:5208
  - url: https://stokenet.radixdlt.com
  - url: https://mainnet.radixdlt.com
tags:
  - name: Status
    x-displayName: Status Endpoints
    description: To query information about the Gateway API status.
  - name: Transaction
    x-displayName: Transaction Endpoints
    description: To build, finalize and submit transactions, and to query transaction status and contents.
paths:
  "/gateway":
    post:
      summary: Get Gateway Info
      description: Returns the Gateway API version, network and current ledger state.
      tags:
        - Status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/GatewayRequest"
      responses:
        '200':
          description: The Network
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GatewayResponse"
        '500':
          description: Gateway Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/transaction/recent":
    post:
      summary: Get Recent Transactions
      description: |
        Returns user-initiated transactions which have been succesfully committed to the ledger.
        The transactions are returned in a paginated format, ordered by most recent.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RecentTransactionsRequest"
      responses:
        '200':
          description: A page of the most recent transactions
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RecentTransactionsResponse"
        '500':
          description: Gateway Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/transaction/build":
    post:
      summary: Build Transaction
      description: Returns a built unsigned transaction payload, from a set of intended actions.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TransactionBuildRequest"
      responses:
        '200':
          description: An unsigned transaction
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TransactionBuildResponse"
        '500':
          description: Gateway Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/transaction/finalize":
    post:
      summary: Finalize Transaction
      description: Returns a signed transaction payload and transaction identifier, from an unsigned transaction payload and signature.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TransactionFinalizeRequest"
      responses:
        '200':
          description: Final Signed Transaction
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TransactionFinalizeResponse"
        '500':
          description: Gateway Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/transaction/submit":
    post:
      summary: Submit Transaction
      description: |
        Submits a signed transaction payload to the network.
        The transaction identifier from finalize or submit can then be used to track the transaction status.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TransactionSubmitRequest"
      responses:
        '200':
          description: Successful Submission
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TransactionSubmitResponse"
        '500':
          description: Gateway Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/transaction/status":
    post:
      summary: Transaction Status
      description: |
        Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren't recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a `TransactionNotFoundError`. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a `TransactionNotFoundError`.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TransactionStatusRequest"
      responses:
        '200':
          description: Transaction Status
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TransactionStatusResponse"
        '500':
          description: Gateway Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
components:
  schemas:
    TransferTokens:
      allOf:
        - "$ref": "#/components/schemas/Action"
        - type: object
          required:
            - from_account
            - to_account
            - amount
          properties:
            from_account:
              "$ref": "#/components/schemas/AccountIdentifier"
            to_account:
              "$ref": "#/components/schemas/AccountIdentifier"
            amount:
              "$ref": "#/components/schemas/TokenAmount"
    AccountStakeEntry:
      type: object
      required:
        - validator_identifier
        - delegated_stake
      properties:
        validator_identifier:
          description: The validator to which the XRD stake is delegated.
          "$ref": "#/components/schemas/ValidatorIdentifier"
        delegated_stake:
          description: The amount of XRD staked.
          "$ref": "#/components/schemas/TokenAmount"
    StakeTokens:
      allOf:
        - "$ref": "#/components/schemas/Action"
        - type: object
          required:
            - from_account
            - to_validator
            - amount
          properties:
            from_account:
              "$ref": "#/components/schemas/AccountIdentifier"
            to_validator:
              "$ref": "#/components/schemas/ValidatorIdentifier"
            amount:
              "$ref": "#/components/schemas/TokenAmount"
    UnstakeTokens:
      description: An action to unstake tokens. Exactly one of amount or unstake_percentage is required.
      allOf:
        - "$ref": "#/components/schemas/Action"
        - type: object
          required:
            - from_validator
            - to_account
          properties:
            from_validator:
              "$ref": "#/components/schemas/ValidatorIdentifier"
            to_account:
              "$ref": "#/components/schemas/AccountIdentifier"
            amount:
              description: |
                If present, this gives the amount of XRD to unstake. This should be no more than the maximum estimated XRD of the stake position at the corresponding LedgerState. Provide a PartialLedgerStateIdentifier matching the LedgerState of the response which provided the estimate that was shared with the user; or simply use the `unstake_percentage` option.
              "$ref": "#/components/schemas/TokenAmount"
            unstake_percentage:
              description: |
                The percentage of currently staked XRD to unstake, where the proportion is a proportion of the current active stake at the given LedgerState. To be explicit, the referenced active state does not include pending stake, pending unstake or locked unstake.
              type: number
              minimum: 0
              maximum: 100
    CreateTokenDefinition:
      allOf:
        - "$ref": "#/components/schemas/Action"
        - type: object
          required:
            - token_properties
            - token_supply
          properties:
            token_properties:
              "$ref": "#/components/schemas/TokenProperties"
            token_supply:
              "$ref": "#/components/schemas/TokenAmount"
            to_account:
              "$ref": "#/components/schemas/AccountIdentifier"
    MintTokens:
      allOf:
        - "$ref": "#/components/schemas/Action"
        - type: object
          required:
            - to_account
            - amount
          properties:
            to_account:
              "$ref": "#/components/schemas/AccountIdentifier"
            amount:
              "$ref": "#/components/schemas/TokenAmount"
    BurnTokens:
      allOf:
        - "$ref": "#/components/schemas/Action"
        - type: object
          required:
            - from_account
            - amount
          properties:
            from_account:
              "$ref": "#/components/schemas/AccountIdentifier"
            amount:
              "$ref": "#/components/schemas/TokenAmount"
    RegisterValidator:
      allOf:
        - "$ref": "#/components/schemas/Action"
        - type: object
          required:
            - validator
          properties:
            validator:
              description: "The validator to register. The transaction will need to be signed by the validator's private key."
              "$ref": "#/components/schemas/ValidatorIdentifier"
    UnregisterValidator:
      allOf:
        - "$ref": "#/components/schemas/Action"
        - type: object
          required:
            - validator
          properties:
            validator:
              description: "The validator to unregister. The transaction will need to be signed by the validator's private key."
              "$ref": "#/components/schemas/ValidatorIdentifier"
    Action:
      type: object
      required:
        - type
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          CreateTokenDefinition: "#/components/schemas/CreateTokenDefinition"
          TransferTokens: "#/components/schemas/TransferTokens"
          StakeTokens: "#/components/schemas/StakeTokens"
          UnstakeTokens: "#/components/schemas/UnstakeTokens"
          MintTokens: "#/components/schemas/MintTokens"
          BurnTokens: "#/components/schemas/BurnTokens"
          RegisterValidator: "#/components/schemas/RegisterValidator"
          UnregisterValidator: "#/components/schemas/UnregisterValidator"
    RecentTransactionsRequest:
      type: object
      required:
        - account_identifier
      properties:
        at_state_identifier:
          $ref: "#/components/schemas/PartialLedgerStateIdentifier"
        from_state_identifier:
          $ref: "#/components/schemas/PartialLedgerStateIdentifier"
        cursor:
          description: This cursor allows forward pagination, by providing the cursor from the previous request.
          type: string
        limit:
          description: The page size requested. The maximum value is 30 at present.
          type: integer
      example:
        limit: 10
    RecentTransactionsResponse:
      type: object
      required:
        - ledger_state
        - transactions
      properties:
        ledger_state:
          $ref: "#/components/schemas/LedgerState"
        next_cursor:
          description: The cursor to be provided for the next page of results. If missing, this is the last page of results.
          type: string
        transactions:
          description: The page of user transactions.
          type: array
          items:
            $ref: "#/components/schemas/TransactionInfo"
    TransactionBuildRequest:
      type: object
      required:
        - actions
        - fee_payer
      properties:
        at_state_identifier:
          $ref: "#/components/schemas/PartialLedgerStateIdentifier"
        actions:
          type: array
          items:
            "$ref": "#/components/schemas/Action"
        fee_payer:
          description: The account which will pay the transaction fee, and whose private key will need to sign the transaction.
          "$ref": "#/components/schemas/AccountIdentifier"
        message:
          description: The hex-encoded message bytes.
          type: string
        disable_token_mint_and_burn:
          description: If true, mints and burns (aside from fee payments) are not permitted during transaction execution.
          type: boolean
      example:
        actions:
          - type: TransferTokens
            from_account:
              address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88
            to_account:
              address: rdx1qspcvwwuf8s549zyspz683v4n93g9kzpn6u6a9yalwzt00zghg75lmsftwv29
            amount:
              token_identifier:
                rri: xrd_rr1qy5wfsfh
              value: '123000000000000000'
        fee_payer:
          address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88
        disable_token_mint_and_burn: true
    TransactionBuildResponse:
      type: object
      required:
        - transaction_build
      properties:
        transaction_build:
          $ref: "#/components/schemas/TransactionBuild"
    TransactionBuild:
      type: object
      required:
        - fee
        - unsigned_transaction
        - payload_to_sign
      properties:
        fee:
          "$ref": "#/components/schemas/TokenAmount"
        unsigned_transaction:
          description: The unsigned transaction payload, hex encoded.
          type: string
        payload_to_sign:
          description: The payload which needs signing, hex encoded. This is `SHA256(SHA256(unsigned_transaction_bytes))`.
          type: string
    TransactionFinalizeRequest:
      type: object
      required:
        - unsigned_transaction
        - signature
      properties:
        unsigned_transaction:
          description: The unsigned transaction payload, hex encoded.
          type: string
        signature:
          description: A signature of the payload to sign - `SHA256(SHA256(unsigned_transaction_bytes))`.
          $ref: "#/components/schemas/Signature"
        submit:
          description: |
            If true, the transaction is immediately submitted after finalization. However, we recommend that a transaction is submitted in a step after finalization. This ensures that you have a transaction identifier on hand to monitor the transaction status, even if the submission request failed with an uncertain error.
          type: boolean
      example:
        unsigned_transaction: 0d00010776bf65acf2d25e9dcf4c716f5f39f201dccbfa173ad9c7f1c1dbcb8a86776b4d0000000101002100000000000000000000000000000000000000000000000000012901c1cf3900000200450600040279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798010000000000000000000000000000000000000000000000017afba303493b7ff8000800000200450600040279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798010000000000000000000000000000000000000000000000017afba303493b7f9402004506000402c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5010000000000000000000000000000000000000000000000000000000000000064000c003430303030366336663631363432303734363537333734363936653637323037343732363136653733363136333734363936663665
        signature:
          bytes: 3046022100cda0fcd31bf976aa65c31c180b4f595a61c866252c52898b952b8fe1d8fdcc33022100999e83036f9529c6250c07423d8b57f252dfba1b843385970bfa69f2c367658e
          public_key:
            hex: 0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798
        submit: false
    PublicKey:
      type: object
      required:
        - hex
      properties:
        hex:
          description: The compressed public key (33 bytes), hex-encoded.
          type: string
    Signature:
      type: object
      required:
        - public_key
        - bytes
      properties:
        public_key:
          $ref: "#/components/schemas/PublicKey"
        bytes:
          description: An ECDSA signature of the payload to sign with the given `public_key`. The ECDSA signature should be created using the secp256k1 curve and should be encoded in DER format, and then encoded as a hex string.
          type: string
    TransactionFinalizeResponse:
      type: object
      required:
        - transaction_identifier
        - signed_transaction
      properties:
        signed_transaction:
          description: The signed transaction payload which can be submitted, hex encoded.
          type: string
        transaction_identifier:
          $ref: "#/components/schemas/TransactionIdentifier"
    TransactionSubmitRequest:
      type: object
      required:
        - signed_transaction
      properties:
        signed_transaction:
          description: The signed transaction payload which can be submitted, hex encoded.
          type: string
      example:
        signed_transaction: 0d00010776bf65acf2d25e9dcf4c716f5f39f201dccbfa173ad9c7f1c1dbcb8a86776b4d0000000101002100000000000000000000000000000000000000000000000000012901c1cf3900000200450600040279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798010000000000000000000000000000000000000000000000017afba303493b7ff8000800000200450600040279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798010000000000000000000000000000000000000000000000017afba303493b7f9402004506000402c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5010000000000000000000000000000000000000000000000000000000000000064000c0034303030303663366636313634323037343635373337343639366536373230373437323631366537333631363337343639366636650b00cda0fcd31bf976aa65c31c180b4f595a61c866252c52898b952b8fe1d8fdcc33999e83036f9529c6250c07423d8b57f252dfba1b843385970bfa69f2c367658e
    TransactionSubmitResponse:
      type: object
      required:
        - transaction_identifier
      properties:
        transaction_identifier:
          description: The transaction identifier of the submitted transaction.
          $ref: "#/components/schemas/TransactionIdentifier"
    GatewayRequest:
      type: object
      example: {}
    GatewayResponse:
      type: object
      required:
        - gateway_api
        - ledger_state
      properties:
        gateway_api:
          $ref: "#/components/schemas/GatewayApiVersions"
        ledger_state:
          $ref: "#/components/schemas/LedgerState"
        target_ledger_state:
          $ref: "#/components/schemas/TargetLedgerState"
      example:
        ledger_state:
        target_ledger_state:
    LedgerState:
      description: |
        The ledger state against which the response was generated. Can be used to detect if the Network Gateway is returning up-to-date information.
      type: object
      required:
        - network
        - version
        - timestamp
        - epoch
        - round
      properties:
        network:
          description: The name of the network against which the request is made.
          type: string
        version:
          description: The state version of the ledger. Each transaction increments the state version by 1.
          type: integer
          format: int64
        timestamp:
          description: |
            The round timestamp of the consensus round when this transaction was committed to ledger. This is not guaranteed to be strictly increasing, as it is computed as an average across the validator set. If this is significantly behind the current timestamp, the Network Gateway is likely reporting out-dated information, or the network has stalled.
          type: string
        epoch:
          description: The epoch number of the ledger at this state version.
          type: integer
          format: int64
        round:
          description: The consensus round in the epoch that this state version was committed in.
          type: integer
          format: int64
    TargetLedgerState:
      type: object
      required:
        - version
      properties:
        version:
          description: |
            The latest-seen state version of the tip of the network's ledger. If this is singificantly ahead of the current LedgerState version, the Network Gateway is possibly behind and may be reporting outdated information.
          type: integer
          format: int64
    PartialLedgerStateIdentifier:
      description: Optional. Allows a client to request a response referencing an earlier ledger state.
      type: object
      nullable: true
      properties:
        version:
          description: If the version is provided, the latest ledger state <= the given version is returned.
          type: integer
          format: int64
        timestamp:
          description: If a timestamp is provided, the latest ledger state <= the given timestamp is returned.
          type: string
        epoch:
          description: If an epoch is provided, the ledger state at the given epoch <= the given round (else round 0) is returned.
          type: integer
          format: int64
        round:
          type: integer
          format: int64
    TransactionStatusRequest:
      type: object
      required:
        - transaction_identifier
      properties:
        transaction_identifier:
          $ref: "#/components/schemas/TransactionIdentifier"
        at_state_identifier:
          $ref: "#/components/schemas/PartialLedgerStateIdentifier"
      example:
        transaction_identifier:
          hash: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d99337193811842
    TransactionStatusResponse:
      type: object
      required:
        - ledger_state
        - transaction
      properties:
        ledger_state:
          $ref: "#/components/schemas/LedgerState"
        transaction:
          $ref: "#/components/schemas/TransactionInfo"
    TokenProperties:
      type: object
      required:
        - symbol
        - is_supply_mutable
        - granularity
        - name
        - description
        - url
        - icon_url
      properties:
        name:
          type: string
        description:
          type: string
        icon_url:
          type: string
        url:
          type: string
        symbol:
          type: string
        is_supply_mutable:
          description: If true, the token is allowed to be minted/burned by the owner.
          type: boolean
        granularity:
          "$ref": "#/components/schemas/BigInteger"
        owner:
          "$ref": "#/components/schemas/AccountIdentifier"
    TransactionInfo:
      type: object
      required:
        - transaction_status
        - transaction_identifier
        - actions
        - metadata
        - fee_paid
      properties:
        transaction_status:
          "$ref": "#/components/schemas/TransactionStatus"
        transaction_identifier:
          "$ref": "#/components/schemas/TransactionIdentifier"
        actions:
          type: array
          items:
            "$ref": "#/components/schemas/Action"
        fee_paid:
          $ref: "#/components/schemas/TokenAmount"
        metadata:
          "$ref": "#/components/schemas/TransactionMetadata"
    TransactionStatus:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - PENDING
            - CONFIRMED
            - FAILED
        confirmed_time:
          type: string
        ledger_state_version:
          type: integer
          format: int64
      example:
        status: CONFIRMED
        confirmed_time: "2021-07-27T17:35:10.726Z"
    TransactionMetadata:
      type: object
      required:
        - hex
      properties:
        hex:
          description: The transaction payload, hex encoded.
          type: string
        message:
          description: The message bytes, hex encoded.
          type: string
    TokenAmount:
      type: object
      required:
        - value
        - token_identifier
      properties:
        value:
          "$ref": "#/components/schemas/BigInteger"
        token_identifier:
          "$ref": "#/components/schemas/TokenIdentifier"
    BigInteger:
      type: string
      pattern: "^-?[0-9]+$"
    GatewayApiVersions:
      type: object
      required:
        - version
        - open_api_schema_version
      properties:
        version:
          description: The release that is currently deployed to the Gateway API.
          type: string
        open_api_schema_version:
          description: The open api schema version that was used to generate the API models.
          type: string
    AccountIdentifier:
      type: object
      required:
        - address
      properties:
        address:
          description: The radix address of the account.
          type: string
    ValidatorIdentifier:
      type: object
      required:
        - address
      properties:
        address:
          description: The radix address of the validator.
          type: string
    TokenIdentifier:
      type: object
      required:
        - rri
      properties:
        rri:
          description: The radix resource identifier of the token.
          type: string
    TransactionIdentifier:
      type: object
      required:
        - hash
      properties:
        hash:
          description: The transaction identifier hash.
          type: string
          pattern: "^[0123456789abcdef]{64}$"
          maxLength: 64
          minLength: 64
    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          description: A numeric code corresponding to the given error type, roughly aligned with HTTP Status Code semantics (eg 400/404/500).
          type: integer
        message:
          description: A human-readable error message.
          type: string
        details:
          description: A structured/typed details object.
          $ref: "#/components/schemas/GatewayError"
        trace_id:
          description: A GUID to be used when reporting errors, to allow correlation with the Gateway API's error logs.
          type: string
    GatewayError:
      type: object
      required:
        - type
      properties:
        type:
          description: The type of error. Each subtype may have its own additional structured fields.
          type: string
      discriminator:
        propertyName: type
        mapping:
          InvalidSignatureError: "#/components/schemas/InvalidSignatureError"
          InvalidTransactionError: "#/components/schemas/InvalidTransactionError"
          InvalidTokenRRIError: "#/components/schemas/InvalidTokenRRIError"
          InvalidAccountAddressError: "#/components/schemas/InvalidAccountAddressError"
          InvalidValidatorAddressError: "#/components/schemas/InvalidValidatorAddressError"
          InvalidPublicKeyError: "#/components/schemas/InvalidPublicKeyError"
          InvalidTokenSymbolError: "#/components/schemas/InvalidTokenSymbolError"
          InvalidActionError: "#/components/schemas/InvalidActionError"
          TokenNotFoundError: "#/components/schemas/TokenNotFoundError"
          TransactionNotFoundError: "#/components/schemas/TransactionNotFoundError"
          NotEnoughNativeTokensForFeesError: "#/components/schemas/NotEnoughNativeTokensForFeesError"
          NotEnoughTokensForTransferError: "#/components/schemas/NotEnoughTokensForTransferError"
          NotEnoughTokensForStakeError: "#/components/schemas/NotEnoughTokensForStakeError"
          NotEnoughTokensForUnstakeError: "#/components/schemas/NotEnoughTokensForUnstakeError"
          BelowMinimumStakeError: "#/components/schemas/BelowMinimumStakeError"
          CannotStakeError: "#/components/schemas/CannotStakeError"
          MessageTooLongError: "#/components/schemas/MessageTooLongError"
          CouldNotConstructFeesError: "#/components/schemas/CouldNotConstructFeesError"
          InvalidRequestError: "#/components/schemas/InvalidRequestError"
          NotSyncedUpError: "#/components/schemas/NotSyncedUpError"
          InternalServerError: "#/components/schemas/InternalServerError"
    InternalServerError:
      allOf:
        - $ref: "#/components/schemas/GatewayError"
        - type: object
          required:
            - exception
            - cause
          properties:
            exception:
              description: Gives an error type which occurred within the Gateway API when serving the request.
              type: string
            cause:
              description: Gives a human readable message - likely just a trace ID for reporting the error.
              type: string
    NotSyncedUpError:
      allOf:
        - $ref: "#/components/schemas/GatewayError"
        - type: object
          required:
            - request_type
            - current_sync_delay_seconds
            - max_allowed_sync_delay_seconds
          properties:
            request_type:
              description: The request type that triggered this exception.
              type: string
            current_sync_delay_seconds:
              description: The current delay between the Gateway DB and the network ledger round timestamp.
              type: integer
              format: int64
            max_allowed_sync_delay_seconds:
              description: The maximum allowed delay between the Gateway DB and the network ledger round timestamp for this `request_type`.
              type: integer
              format: int64
    InvalidRequestError:
      allOf:
        - $ref: "#/components/schemas/GatewayError"
        - type: object
          required:
            - validation_errors
          properties:
            validation_errors:
              description: One or more validation errors which occurred when validating the request.
              type: array
              items:
                $ref: "#/components/schemas/ValidationErrorsAtPath"
    ValidationErrorsAtPath:
      type: object
      required:
        - path
        - errors
      properties:
        path:
          type: string
        errors:
          type: array
          items:
            type: string
    InvalidActionError:
      allOf:
        - "$ref": "#/components/schemas/GatewayError"
        - type: object
          required:
            - invalid_action
          properties:
            invalid_action:
              description: The action which was invalid. The descriptive reason is in the main error message.
              $ref: "#/components/schemas/Action"
    InvalidSignatureError:
      allOf:
        - "$ref": "#/components/schemas/GatewayError"
        - type: object
          required:
            - invalid_signature
          properties:
            invalid_signature:
              description: The signature which was invalid. The descriptive reason is in the main error message.
              $ref: "#/components/schemas/Signature"
    InvalidTransactionError:
      allOf:
        - "$ref": "#/components/schemas/GatewayError"
        - type: object
          required:
            - invalid_transaction
            - message
          properties:
            invalid_transaction:
              description: The transaction payload which was invalid.
              type: string
            message:
              description: A descriptive reason for the invalid transaction.
              type: string
    NotEnoughNativeTokensForFeesError:
      allOf:
        - "$ref": "#/components/schemas/GatewayError"
        - type: object
          required:
            - required_amount
            - available_amount
          properties:
            required_amount:
              description: The required amount of XRD for the fee.
              $ref: "#/components/schemas/TokenAmount"
            available_amount:
              description: The available amount of XRD remaining at the point the fee was paid.
              $ref: "#/components/schemas/TokenAmount"
    NotEnoughTokensForTransferError:
      allOf:
        - "$ref": "#/components/schemas/GatewayError"
        - type: object
          required:
            - requested_amount
            - available_amount
          properties:
            requested_amount:
              description: The requested amount of token to be transferred.
              $ref: "#/components/schemas/TokenAmount"
            available_amount:
              description: The available amount of token remaining at the point the transfer action was attempted.
              $ref: "#/components/schemas/TokenAmount"
    NotEnoughTokensForStakeError:
      allOf:
        - "$ref": "#/components/schemas/GatewayError"
        - type: object
          required:
            - requested_amount
            - available_amount
          properties:
            requested_amount:
              description: The requested amount of XRD to be staked.
              $ref: "#/components/schemas/TokenAmount"
            available_amount:
              description: The available amount of XRD remaining at the point the stake action was attempted.
              $ref: "#/components/schemas/TokenAmount"
    NotEnoughTokensForUnstakeError:
      allOf:
        - "$ref": "#/components/schemas/GatewayError"
        - type: object
          required:
            - requested_amount
            - stake
            - pending_stake
          properties:
            requested_amount:
              description: The requested amount of XRD to be unstaked.
              $ref: "#/components/schemas/TokenAmount"
            stake:
              description: The estimated amount of XRD that your delegated stake to this validator is worth at the point the stake action was attempted.
              $ref: "#/components/schemas/AccountStakeEntry"
            pending_stake:
              description: The amount of XRD that you is waiting to be staked against this validator at the next epoch change, and cannot currently be unstaked.
              $ref: "#/components/schemas/AccountStakeEntry"
    BelowMinimumStakeError:
      allOf:
        - "$ref": "#/components/schemas/GatewayError"
        - type: object
          required:
            - requested_amount
            - minimum_amount
          properties:
            requested_amount:
              description: The requested amount of XRD to be staked.
              $ref: "#/components/schemas/TokenAmount"
            minimum_amount:
              description: The minimum amount of XRD you can stake.
              $ref: "#/components/schemas/TokenAmount"
    CannotStakeError:
      allOf:
        - "$ref": "#/components/schemas/GatewayError"
        - type: object
          required:
            - owner
            - user
          properties:
            owner:
              description: The owner of the validator - if the validator has delegated stake disabled, only this account may stake.
              $ref: "#/components/schemas/AccountIdentifier"
            user:
              description: The user who attempted to stake to the validator.
              $ref: "#/components/schemas/AccountIdentifier"
    MessageTooLongError:
      allOf:
        - "$ref": "#/components/schemas/GatewayError"
        - type: object
          required:
            - length_limit
            - attempted_length
          properties:
            length_limit:
              description: The maximum byte length of the message, as per current transaction rules.
              type: integer
            attempted_length:
              description: The byte length of the message in the transaction.
              type: integer
    CouldNotConstructFeesError:
      allOf:
        - "$ref": "#/components/schemas/GatewayError"
        - type: object
          required:
            - attempts
          properties:
            attempts:
              description: The number of attempts the system tried and failed to create a consistent transaction fee.
              type: integer
    InvalidPublicKeyError:
      allOf:
        - $ref: "#/components/schemas/GatewayError"
        - type: object
          required:
            - invalid_public_key
          properties:
            invalid_public_key:
              description: The public key which was invalid. A descriptive reason is given in the main error message.
              type: string
    InvalidTokenSymbolError:
      allOf:
        - $ref: "#/components/schemas/GatewayError"
        - type: object
          required:
            - invalid_token_symbol
          properties:
            invalid_token_symbol:
              description: The token symbol which was invalid. A descriptive reason is given in the main error message.
              type: string
    InvalidTokenRRIError:
      allOf:
        - $ref: "#/components/schemas/GatewayError"
        - type: object
          required:
            - invalid_rri
          properties:
            invalid_rri:
              description: The token rri which was invalid. A descriptive reason is given in the main error message.
              type: string
    InvalidAccountAddressError:
      allOf:
        - $ref: "#/components/schemas/GatewayError"
        - type: object
          required:
            - invalid_account_address
          properties:
            invalid_account_address:
              description: The account address which was invalid. A descriptive reason is given in the main error message.
              type: string
    InvalidValidatorAddressError:
      allOf:
        - $ref: "#/components/schemas/GatewayError"
        - type: object
          required:
            - invalid_validator_address
          properties:
            invalid_account_address:
              description: The validator address which was invalid. A descriptive reason is given in the main error message.
              type: string
    TokenNotFoundError:
      allOf:
        - $ref: "#/components/schemas/GatewayError"
        - type: object
          required:
            - token_not_found
          properties:
            token_not_found:
              description: The token rri which was not found.
              $ref: "#/components/schemas/TokenIdentifier"
    TransactionNotFoundError:
      allOf:
        - $ref: "#/components/schemas/GatewayError"
        - type: object
          required:
            - transaction_not_found
          properties:
            transaction_not_found:
              description: The transaction identifier which was not found.
              $ref: "#/components/schemas/TransactionIdentifier"
