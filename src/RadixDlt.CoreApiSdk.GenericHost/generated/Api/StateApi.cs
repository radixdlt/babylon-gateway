/* Copyright 2021 Radix Publishing Ltd incorporated in Jersey (Channel Islands).
 *
 * Licensed under the Radix License, Version 1.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 *
 * radixfoundation.org/licenses/LICENSE-v1
 *
 * The Licensor hereby grants permission for the Canonical version of the Work to be
 * published, distributed and used under or by reference to the Licensor’s trademark
 * Radix ® and use of any unregistered trade names, logos or get-up.
 *
 * The Licensor provides the Work (and each Contributor provides its Contributions) on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
 * including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT,
 * MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Whilst the Work is capable of being deployed, used and adopted (instantiated) to create
 * a distributed ledger it is your responsibility to test and validate the code, together
 * with all logic and performance of that code under all foreseeable scenarios.
 *
 * The Licensor does not make or purport to make and hereby excludes liability for all
 * and any representation, warranty or undertaking in any form whatsoever, whether express
 * or implied, to any entity or person, including any representation, warranty or
 * undertaking, as to the functionality security use, value or other characteristics of
 * any distributed ledger nor in respect the functioning or value of any tokens which may
 * be created stored or transferred using the Work. The Licensor does not warrant that the
 * Work or any use of the Work complies with any law or regulation in any territory where
 * it may be implemented or used or that it will be appropriate for any specific purpose.
 *
 * Neither the licensor nor any current or former employees, officers, directors, partners,
 * trustees, representatives, agents, advisors, contractors, or volunteers of the Licensor
 * shall be liable for any direct or indirect, special, incidental, consequential or other
 * losses of any kind, in tort, contract or otherwise (including but not limited to loss
 * of revenue, income or profits, or loss of use or data, or loss of reputation, or loss
 * of any economic or other opportunity of whatsoever nature or howsoever arising), arising
 * out of or in connection with (without limitation of any use, misuse, of any ledger system
 * or use made or its functionality or any performance or operation of any code or protocol
 * caused by bugs or programming or logic errors or otherwise);
 *
 * A. any offer, purchase, holding, use, sale, exchange or transmission of any
 * cryptographic keys, tokens or assets created, exchanged, stored or arising from any
 * interaction with the Work;
 *
 * B. any failure in a transmission or loss of any token or assets keys or other digital
 * artefacts due to errors in transmission;
 *
 * C. bugs, hacks, logic errors or faults in the Work or any communication;
 *
 * D. system software or apparatus including but not limited to losses caused by errors
 * in holding or transmitting tokens by any third-party;
 *
 * E. breaches or failure of security including hacker attacks, loss or disclosure of
 * password, loss of private key, unauthorised use or misuse of such passwords or keys;
 *
 * F. any losses including loss of anticipated savings or other benefits resulting from
 * use of the Work or any changes to the Work (however implemented).
 *
 * You are solely responsible for; testing, validating and evaluation of all operation
 * logic, functionality, security and appropriateness of using the Work for any commercial
 * or non-commercial purpose and for any reproduction or redistribution by You of the
 * Work. You assume all risks associated with Your use of the Work and the exercise of
 * permissions under this License.
 */

// <auto-generated>
/*
 * Radix Core API - Babylon
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using RadixDlt.CoreApiSdk.GenericHost.Client;
using RadixDlt.CoreApiSdk.GenericHost.Model;
using System.Diagnostics.CodeAnalysis;

namespace RadixDlt.CoreApiSdk.GenericHost.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStateApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StateApiEvents Events { get; }

        /// <summary>
        /// Get Access Controller Details
        /// </summary>
        /// <remarks>
        /// Reads the access controller&#39;s substate/s from the top of the current ledger. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateAccessControllerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateAccessControllerPostApiResponse"/>&gt;</returns>
        Task<IStateAccessControllerPostApiResponse> StateAccessControllerPostAsync(StateAccessControllerRequest stateAccessControllerRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Access Controller Details
        /// </summary>
        /// <remarks>
        /// Reads the access controller&#39;s substate/s from the top of the current ledger. 
        /// </remarks>
        /// <param name="stateAccessControllerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateAccessControllerPostApiResponse"/>?&gt;</returns>
        Task<IStateAccessControllerPostApiResponse?> StateAccessControllerPostOrDefaultAsync(StateAccessControllerRequest stateAccessControllerRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Account Details
        /// </summary>
        /// <remarks>
        /// Reads the account&#39;s substate/s from the top of the current ledger. Also returns all vaults under the account. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateAccountPostApiResponse"/>&gt;</returns>
        Task<IStateAccountPostApiResponse> StateAccountPostAsync(StateAccountRequest stateAccountRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Account Details
        /// </summary>
        /// <remarks>
        /// Reads the account&#39;s substate/s from the top of the current ledger. Also returns all vaults under the account. 
        /// </remarks>
        /// <param name="stateAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateAccountPostApiResponse"/>?&gt;</returns>
        Task<IStateAccountPostApiResponse?> StateAccountPostOrDefaultAsync(StateAccountRequest stateAccountRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Component Details
        /// </summary>
        /// <remarks>
        /// Reads the component&#39;s substate/s from the top of the current ledger. Also recursively extracts vault balance totals from the component&#39;s entity subtree. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateComponentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateComponentPostApiResponse"/>&gt;</returns>
        Task<IStateComponentPostApiResponse> StateComponentPostAsync(StateComponentRequest stateComponentRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Component Details
        /// </summary>
        /// <remarks>
        /// Reads the component&#39;s substate/s from the top of the current ledger. Also recursively extracts vault balance totals from the component&#39;s entity subtree. 
        /// </remarks>
        /// <param name="stateComponentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateComponentPostApiResponse"/>?&gt;</returns>
        Task<IStateComponentPostApiResponse?> StateComponentPostOrDefaultAsync(StateComponentRequest stateComponentRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Consensus Manager Details
        /// </summary>
        /// <remarks>
        /// Reads the consensus manager&#39;s substate/s from the top of the current ledger. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateConsensusManagerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateConsensusManagerPostApiResponse"/>&gt;</returns>
        Task<IStateConsensusManagerPostApiResponse> StateConsensusManagerPostAsync(StateConsensusManagerRequest stateConsensusManagerRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Consensus Manager Details
        /// </summary>
        /// <remarks>
        /// Reads the consensus manager&#39;s substate/s from the top of the current ledger. 
        /// </remarks>
        /// <param name="stateConsensusManagerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateConsensusManagerPostApiResponse"/>?&gt;</returns>
        Task<IStateConsensusManagerPostApiResponse?> StateConsensusManagerPostOrDefaultAsync(StateConsensusManagerRequest stateConsensusManagerRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Non-Fungible Details
        /// </summary>
        /// <remarks>
        /// Reads the data associated with a single Non-Fungible Unit under a Non-Fungible Resource. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateNonFungibleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateNonFungiblePostApiResponse"/>&gt;</returns>
        Task<IStateNonFungiblePostApiResponse> StateNonFungiblePostAsync(StateNonFungibleRequest stateNonFungibleRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Non-Fungible Details
        /// </summary>
        /// <remarks>
        /// Reads the data associated with a single Non-Fungible Unit under a Non-Fungible Resource. 
        /// </remarks>
        /// <param name="stateNonFungibleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateNonFungiblePostApiResponse"/>?&gt;</returns>
        Task<IStateNonFungiblePostApiResponse?> StateNonFungiblePostOrDefaultAsync(StateNonFungibleRequest stateNonFungibleRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Package Details
        /// </summary>
        /// <remarks>
        /// Reads the package&#39;s substate/s from the top of the current ledger. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="statePackageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatePackagePostApiResponse"/>&gt;</returns>
        Task<IStatePackagePostApiResponse> StatePackagePostAsync(StatePackageRequest statePackageRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Package Details
        /// </summary>
        /// <remarks>
        /// Reads the package&#39;s substate/s from the top of the current ledger. 
        /// </remarks>
        /// <param name="statePackageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatePackagePostApiResponse"/>?&gt;</returns>
        Task<IStatePackagePostApiResponse?> StatePackagePostOrDefaultAsync(StatePackageRequest statePackageRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Resource Details
        /// </summary>
        /// <remarks>
        /// Reads the resource manager&#39;s substate/s from the top of the current ledger. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateResourceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateResourcePostApiResponse"/>&gt;</returns>
        Task<IStateResourcePostApiResponse> StateResourcePostAsync(StateResourceRequest stateResourceRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Resource Details
        /// </summary>
        /// <remarks>
        /// Reads the resource manager&#39;s substate/s from the top of the current ledger. 
        /// </remarks>
        /// <param name="stateResourceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateResourcePostApiResponse"/>?&gt;</returns>
        Task<IStateResourcePostApiResponse?> StateResourcePostOrDefaultAsync(StateResourceRequest stateResourceRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Validator Details
        /// </summary>
        /// <remarks>
        /// Reads the validator&#39;s substate/s from the top of the current ledger. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateValidatorRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateValidatorPostApiResponse"/>&gt;</returns>
        Task<IStateValidatorPostApiResponse> StateValidatorPostAsync(StateValidatorRequest stateValidatorRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Validator Details
        /// </summary>
        /// <remarks>
        /// Reads the validator&#39;s substate/s from the top of the current ledger. 
        /// </remarks>
        /// <param name="stateValidatorRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateValidatorPostApiResponse"/>?&gt;</returns>
        Task<IStateValidatorPostApiResponse?> StateValidatorPostOrDefaultAsync(StateValidatorRequest stateValidatorRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IStateAccessControllerPostApiResponse"/>
    /// </summary>
    public interface IStateAccessControllerPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.StateAccessControllerResponse?>, IBadRequest<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, INotFound<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IStateAccountPostApiResponse"/>
    /// </summary>
    public interface IStateAccountPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.StateAccountResponse?>, IBadRequest<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, INotFound<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IStateComponentPostApiResponse"/>
    /// </summary>
    public interface IStateComponentPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.StateComponentResponse?>, IBadRequest<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, INotFound<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IStateConsensusManagerPostApiResponse"/>
    /// </summary>
    public interface IStateConsensusManagerPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.StateConsensusManagerResponse?>, IBadRequest<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IStateNonFungiblePostApiResponse"/>
    /// </summary>
    public interface IStateNonFungiblePostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.StateNonFungibleResponse?>, IBadRequest<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, INotFound<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IStatePackagePostApiResponse"/>
    /// </summary>
    public interface IStatePackagePostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.StatePackageResponse?>, IBadRequest<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, INotFound<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IStateResourcePostApiResponse"/>
    /// </summary>
    public interface IStateResourcePostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.StateResourceResponse?>, IBadRequest<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, INotFound<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IStateValidatorPostApiResponse"/>
    /// </summary>
    public interface IStateValidatorPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.StateValidatorResponse?>, IBadRequest<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, INotFound<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StateApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnStateAccessControllerPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorStateAccessControllerPost;

        internal void ExecuteOnStateAccessControllerPost(StateApi.StateAccessControllerPostApiResponse apiResponse)
        {
            OnStateAccessControllerPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStateAccessControllerPost(Exception exception)
        {
            OnErrorStateAccessControllerPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnStateAccountPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorStateAccountPost;

        internal void ExecuteOnStateAccountPost(StateApi.StateAccountPostApiResponse apiResponse)
        {
            OnStateAccountPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStateAccountPost(Exception exception)
        {
            OnErrorStateAccountPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnStateComponentPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorStateComponentPost;

        internal void ExecuteOnStateComponentPost(StateApi.StateComponentPostApiResponse apiResponse)
        {
            OnStateComponentPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStateComponentPost(Exception exception)
        {
            OnErrorStateComponentPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnStateConsensusManagerPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorStateConsensusManagerPost;

        internal void ExecuteOnStateConsensusManagerPost(StateApi.StateConsensusManagerPostApiResponse apiResponse)
        {
            OnStateConsensusManagerPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStateConsensusManagerPost(Exception exception)
        {
            OnErrorStateConsensusManagerPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnStateNonFungiblePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorStateNonFungiblePost;

        internal void ExecuteOnStateNonFungiblePost(StateApi.StateNonFungiblePostApiResponse apiResponse)
        {
            OnStateNonFungiblePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStateNonFungiblePost(Exception exception)
        {
            OnErrorStateNonFungiblePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnStatePackagePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorStatePackagePost;

        internal void ExecuteOnStatePackagePost(StateApi.StatePackagePostApiResponse apiResponse)
        {
            OnStatePackagePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStatePackagePost(Exception exception)
        {
            OnErrorStatePackagePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnStateResourcePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorStateResourcePost;

        internal void ExecuteOnStateResourcePost(StateApi.StateResourcePostApiResponse apiResponse)
        {
            OnStateResourcePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStateResourcePost(Exception exception)
        {
            OnErrorStateResourcePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnStateValidatorPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorStateValidatorPost;

        internal void ExecuteOnStateValidatorPost(StateApi.StateValidatorPostApiResponse apiResponse)
        {
            OnStateValidatorPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStateValidatorPost(Exception exception)
        {
            OnErrorStateValidatorPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StateApi : IStateApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StateApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StateApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StateApi(ILogger<StateApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StateApiEvents stateApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StateApi>();
            HttpClient = httpClient;
            Events = stateApiEvents;
        }

        partial void FormatStateAccessControllerPost(StateAccessControllerRequest stateAccessControllerRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="stateAccessControllerRequest"></param>
        /// <returns></returns>
        private void ValidateStateAccessControllerPost(StateAccessControllerRequest stateAccessControllerRequest)
        {
            if (stateAccessControllerRequest == null)
                throw new ArgumentNullException(nameof(stateAccessControllerRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="stateAccessControllerRequest"></param>
        private void AfterStateAccessControllerPostDefaultImplementation(IStateAccessControllerPostApiResponse apiResponseLocalVar, StateAccessControllerRequest stateAccessControllerRequest)
        {
            bool suppressDefaultLog = false;
            AfterStateAccessControllerPost(ref suppressDefaultLog, apiResponseLocalVar, stateAccessControllerRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="stateAccessControllerRequest"></param>
        partial void AfterStateAccessControllerPost(ref bool suppressDefaultLog, IStateAccessControllerPostApiResponse apiResponseLocalVar, StateAccessControllerRequest stateAccessControllerRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="stateAccessControllerRequest"></param>
        private void OnErrorStateAccessControllerPostDefaultImplementation(Exception exception, string pathFormat, string path, StateAccessControllerRequest stateAccessControllerRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorStateAccessControllerPost(ref suppressDefaultLog, exception, pathFormat, path, stateAccessControllerRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="stateAccessControllerRequest"></param>
        partial void OnErrorStateAccessControllerPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, StateAccessControllerRequest stateAccessControllerRequest);

        /// <summary>
        /// Get Access Controller Details Reads the access controller&#39;s substate/s from the top of the current ledger. 
        /// </summary>
        /// <param name="stateAccessControllerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateAccessControllerPostApiResponse"/>&gt;</returns>
        public async Task<IStateAccessControllerPostApiResponse?> StateAccessControllerPostOrDefaultAsync(StateAccessControllerRequest stateAccessControllerRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StateAccessControllerPostAsync(stateAccessControllerRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Access Controller Details Reads the access controller&#39;s substate/s from the top of the current ledger. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateAccessControllerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateAccessControllerPostApiResponse"/>&gt;</returns>
        public async Task<IStateAccessControllerPostApiResponse> StateAccessControllerPostAsync(StateAccessControllerRequest stateAccessControllerRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStateAccessControllerPost(stateAccessControllerRequest);

                FormatStateAccessControllerPost(stateAccessControllerRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/state/access-controller";

                    httpRequestMessageLocalVar.Content = (stateAccessControllerRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(stateAccessControllerRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<StateAccessControllerPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StateAccessControllerPostApiResponse>();

                        StateAccessControllerPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/state/access-controller", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStateAccessControllerPostDefaultImplementation(apiResponseLocalVar, stateAccessControllerRequest);

                        Events.ExecuteOnStateAccessControllerPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStateAccessControllerPostDefaultImplementation(e, "/state/access-controller", uriBuilderLocalVar.Path, stateAccessControllerRequest);
                Events.ExecuteOnErrorStateAccessControllerPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StateAccessControllerPostApiResponse"/>
        /// </summary>
        public partial class StateAccessControllerPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, IStateAccessControllerPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StateAccessControllerPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StateAccessControllerPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StateAccessControllerPostApiResponse(ILogger<StateAccessControllerPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.StateAccessControllerResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.StateAccessControllerResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.StateAccessControllerResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStateAccountPost(StateAccountRequest stateAccountRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="stateAccountRequest"></param>
        /// <returns></returns>
        private void ValidateStateAccountPost(StateAccountRequest stateAccountRequest)
        {
            if (stateAccountRequest == null)
                throw new ArgumentNullException(nameof(stateAccountRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="stateAccountRequest"></param>
        private void AfterStateAccountPostDefaultImplementation(IStateAccountPostApiResponse apiResponseLocalVar, StateAccountRequest stateAccountRequest)
        {
            bool suppressDefaultLog = false;
            AfterStateAccountPost(ref suppressDefaultLog, apiResponseLocalVar, stateAccountRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="stateAccountRequest"></param>
        partial void AfterStateAccountPost(ref bool suppressDefaultLog, IStateAccountPostApiResponse apiResponseLocalVar, StateAccountRequest stateAccountRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="stateAccountRequest"></param>
        private void OnErrorStateAccountPostDefaultImplementation(Exception exception, string pathFormat, string path, StateAccountRequest stateAccountRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorStateAccountPost(ref suppressDefaultLog, exception, pathFormat, path, stateAccountRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="stateAccountRequest"></param>
        partial void OnErrorStateAccountPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, StateAccountRequest stateAccountRequest);

        /// <summary>
        /// Get Account Details Reads the account&#39;s substate/s from the top of the current ledger. Also returns all vaults under the account. 
        /// </summary>
        /// <param name="stateAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateAccountPostApiResponse"/>&gt;</returns>
        public async Task<IStateAccountPostApiResponse?> StateAccountPostOrDefaultAsync(StateAccountRequest stateAccountRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StateAccountPostAsync(stateAccountRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Account Details Reads the account&#39;s substate/s from the top of the current ledger. Also returns all vaults under the account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateAccountPostApiResponse"/>&gt;</returns>
        public async Task<IStateAccountPostApiResponse> StateAccountPostAsync(StateAccountRequest stateAccountRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStateAccountPost(stateAccountRequest);

                FormatStateAccountPost(stateAccountRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/state/account";

                    httpRequestMessageLocalVar.Content = (stateAccountRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(stateAccountRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<StateAccountPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StateAccountPostApiResponse>();

                        StateAccountPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/state/account", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStateAccountPostDefaultImplementation(apiResponseLocalVar, stateAccountRequest);

                        Events.ExecuteOnStateAccountPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStateAccountPostDefaultImplementation(e, "/state/account", uriBuilderLocalVar.Path, stateAccountRequest);
                Events.ExecuteOnErrorStateAccountPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StateAccountPostApiResponse"/>
        /// </summary>
        public partial class StateAccountPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, IStateAccountPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StateAccountPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StateAccountPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StateAccountPostApiResponse(ILogger<StateAccountPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.StateAccountResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.StateAccountResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.StateAccountResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStateComponentPost(StateComponentRequest stateComponentRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="stateComponentRequest"></param>
        /// <returns></returns>
        private void ValidateStateComponentPost(StateComponentRequest stateComponentRequest)
        {
            if (stateComponentRequest == null)
                throw new ArgumentNullException(nameof(stateComponentRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="stateComponentRequest"></param>
        private void AfterStateComponentPostDefaultImplementation(IStateComponentPostApiResponse apiResponseLocalVar, StateComponentRequest stateComponentRequest)
        {
            bool suppressDefaultLog = false;
            AfterStateComponentPost(ref suppressDefaultLog, apiResponseLocalVar, stateComponentRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="stateComponentRequest"></param>
        partial void AfterStateComponentPost(ref bool suppressDefaultLog, IStateComponentPostApiResponse apiResponseLocalVar, StateComponentRequest stateComponentRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="stateComponentRequest"></param>
        private void OnErrorStateComponentPostDefaultImplementation(Exception exception, string pathFormat, string path, StateComponentRequest stateComponentRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorStateComponentPost(ref suppressDefaultLog, exception, pathFormat, path, stateComponentRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="stateComponentRequest"></param>
        partial void OnErrorStateComponentPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, StateComponentRequest stateComponentRequest);

        /// <summary>
        /// Get Component Details Reads the component&#39;s substate/s from the top of the current ledger. Also recursively extracts vault balance totals from the component&#39;s entity subtree. 
        /// </summary>
        /// <param name="stateComponentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateComponentPostApiResponse"/>&gt;</returns>
        public async Task<IStateComponentPostApiResponse?> StateComponentPostOrDefaultAsync(StateComponentRequest stateComponentRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StateComponentPostAsync(stateComponentRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Component Details Reads the component&#39;s substate/s from the top of the current ledger. Also recursively extracts vault balance totals from the component&#39;s entity subtree. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateComponentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateComponentPostApiResponse"/>&gt;</returns>
        public async Task<IStateComponentPostApiResponse> StateComponentPostAsync(StateComponentRequest stateComponentRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStateComponentPost(stateComponentRequest);

                FormatStateComponentPost(stateComponentRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/state/component";

                    httpRequestMessageLocalVar.Content = (stateComponentRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(stateComponentRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<StateComponentPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StateComponentPostApiResponse>();

                        StateComponentPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/state/component", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStateComponentPostDefaultImplementation(apiResponseLocalVar, stateComponentRequest);

                        Events.ExecuteOnStateComponentPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStateComponentPostDefaultImplementation(e, "/state/component", uriBuilderLocalVar.Path, stateComponentRequest);
                Events.ExecuteOnErrorStateComponentPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StateComponentPostApiResponse"/>
        /// </summary>
        public partial class StateComponentPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, IStateComponentPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StateComponentPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StateComponentPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StateComponentPostApiResponse(ILogger<StateComponentPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.StateComponentResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.StateComponentResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.StateComponentResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStateConsensusManagerPost(StateConsensusManagerRequest stateConsensusManagerRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="stateConsensusManagerRequest"></param>
        /// <returns></returns>
        private void ValidateStateConsensusManagerPost(StateConsensusManagerRequest stateConsensusManagerRequest)
        {
            if (stateConsensusManagerRequest == null)
                throw new ArgumentNullException(nameof(stateConsensusManagerRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="stateConsensusManagerRequest"></param>
        private void AfterStateConsensusManagerPostDefaultImplementation(IStateConsensusManagerPostApiResponse apiResponseLocalVar, StateConsensusManagerRequest stateConsensusManagerRequest)
        {
            bool suppressDefaultLog = false;
            AfterStateConsensusManagerPost(ref suppressDefaultLog, apiResponseLocalVar, stateConsensusManagerRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="stateConsensusManagerRequest"></param>
        partial void AfterStateConsensusManagerPost(ref bool suppressDefaultLog, IStateConsensusManagerPostApiResponse apiResponseLocalVar, StateConsensusManagerRequest stateConsensusManagerRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="stateConsensusManagerRequest"></param>
        private void OnErrorStateConsensusManagerPostDefaultImplementation(Exception exception, string pathFormat, string path, StateConsensusManagerRequest stateConsensusManagerRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorStateConsensusManagerPost(ref suppressDefaultLog, exception, pathFormat, path, stateConsensusManagerRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="stateConsensusManagerRequest"></param>
        partial void OnErrorStateConsensusManagerPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, StateConsensusManagerRequest stateConsensusManagerRequest);

        /// <summary>
        /// Get Consensus Manager Details Reads the consensus manager&#39;s substate/s from the top of the current ledger. 
        /// </summary>
        /// <param name="stateConsensusManagerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateConsensusManagerPostApiResponse"/>&gt;</returns>
        public async Task<IStateConsensusManagerPostApiResponse?> StateConsensusManagerPostOrDefaultAsync(StateConsensusManagerRequest stateConsensusManagerRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StateConsensusManagerPostAsync(stateConsensusManagerRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Consensus Manager Details Reads the consensus manager&#39;s substate/s from the top of the current ledger. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateConsensusManagerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateConsensusManagerPostApiResponse"/>&gt;</returns>
        public async Task<IStateConsensusManagerPostApiResponse> StateConsensusManagerPostAsync(StateConsensusManagerRequest stateConsensusManagerRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStateConsensusManagerPost(stateConsensusManagerRequest);

                FormatStateConsensusManagerPost(stateConsensusManagerRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/state/consensus-manager";

                    httpRequestMessageLocalVar.Content = (stateConsensusManagerRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(stateConsensusManagerRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<StateConsensusManagerPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StateConsensusManagerPostApiResponse>();

                        StateConsensusManagerPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/state/consensus-manager", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStateConsensusManagerPostDefaultImplementation(apiResponseLocalVar, stateConsensusManagerRequest);

                        Events.ExecuteOnStateConsensusManagerPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStateConsensusManagerPostDefaultImplementation(e, "/state/consensus-manager", uriBuilderLocalVar.Path, stateConsensusManagerRequest);
                Events.ExecuteOnErrorStateConsensusManagerPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StateConsensusManagerPostApiResponse"/>
        /// </summary>
        public partial class StateConsensusManagerPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, IStateConsensusManagerPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StateConsensusManagerPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StateConsensusManagerPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StateConsensusManagerPostApiResponse(ILogger<StateConsensusManagerPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.StateConsensusManagerResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.StateConsensusManagerResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.StateConsensusManagerResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStateNonFungiblePost(StateNonFungibleRequest stateNonFungibleRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="stateNonFungibleRequest"></param>
        /// <returns></returns>
        private void ValidateStateNonFungiblePost(StateNonFungibleRequest stateNonFungibleRequest)
        {
            if (stateNonFungibleRequest == null)
                throw new ArgumentNullException(nameof(stateNonFungibleRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="stateNonFungibleRequest"></param>
        private void AfterStateNonFungiblePostDefaultImplementation(IStateNonFungiblePostApiResponse apiResponseLocalVar, StateNonFungibleRequest stateNonFungibleRequest)
        {
            bool suppressDefaultLog = false;
            AfterStateNonFungiblePost(ref suppressDefaultLog, apiResponseLocalVar, stateNonFungibleRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="stateNonFungibleRequest"></param>
        partial void AfterStateNonFungiblePost(ref bool suppressDefaultLog, IStateNonFungiblePostApiResponse apiResponseLocalVar, StateNonFungibleRequest stateNonFungibleRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="stateNonFungibleRequest"></param>
        private void OnErrorStateNonFungiblePostDefaultImplementation(Exception exception, string pathFormat, string path, StateNonFungibleRequest stateNonFungibleRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorStateNonFungiblePost(ref suppressDefaultLog, exception, pathFormat, path, stateNonFungibleRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="stateNonFungibleRequest"></param>
        partial void OnErrorStateNonFungiblePost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, StateNonFungibleRequest stateNonFungibleRequest);

        /// <summary>
        /// Get Non-Fungible Details Reads the data associated with a single Non-Fungible Unit under a Non-Fungible Resource. 
        /// </summary>
        /// <param name="stateNonFungibleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateNonFungiblePostApiResponse"/>&gt;</returns>
        public async Task<IStateNonFungiblePostApiResponse?> StateNonFungiblePostOrDefaultAsync(StateNonFungibleRequest stateNonFungibleRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StateNonFungiblePostAsync(stateNonFungibleRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Non-Fungible Details Reads the data associated with a single Non-Fungible Unit under a Non-Fungible Resource. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateNonFungibleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateNonFungiblePostApiResponse"/>&gt;</returns>
        public async Task<IStateNonFungiblePostApiResponse> StateNonFungiblePostAsync(StateNonFungibleRequest stateNonFungibleRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStateNonFungiblePost(stateNonFungibleRequest);

                FormatStateNonFungiblePost(stateNonFungibleRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/state/non-fungible";

                    httpRequestMessageLocalVar.Content = (stateNonFungibleRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(stateNonFungibleRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<StateNonFungiblePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StateNonFungiblePostApiResponse>();

                        StateNonFungiblePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/state/non-fungible", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStateNonFungiblePostDefaultImplementation(apiResponseLocalVar, stateNonFungibleRequest);

                        Events.ExecuteOnStateNonFungiblePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStateNonFungiblePostDefaultImplementation(e, "/state/non-fungible", uriBuilderLocalVar.Path, stateNonFungibleRequest);
                Events.ExecuteOnErrorStateNonFungiblePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StateNonFungiblePostApiResponse"/>
        /// </summary>
        public partial class StateNonFungiblePostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, IStateNonFungiblePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StateNonFungiblePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StateNonFungiblePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StateNonFungiblePostApiResponse(ILogger<StateNonFungiblePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.StateNonFungibleResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.StateNonFungibleResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.StateNonFungibleResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStatePackagePost(StatePackageRequest statePackageRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="statePackageRequest"></param>
        /// <returns></returns>
        private void ValidateStatePackagePost(StatePackageRequest statePackageRequest)
        {
            if (statePackageRequest == null)
                throw new ArgumentNullException(nameof(statePackageRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="statePackageRequest"></param>
        private void AfterStatePackagePostDefaultImplementation(IStatePackagePostApiResponse apiResponseLocalVar, StatePackageRequest statePackageRequest)
        {
            bool suppressDefaultLog = false;
            AfterStatePackagePost(ref suppressDefaultLog, apiResponseLocalVar, statePackageRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="statePackageRequest"></param>
        partial void AfterStatePackagePost(ref bool suppressDefaultLog, IStatePackagePostApiResponse apiResponseLocalVar, StatePackageRequest statePackageRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="statePackageRequest"></param>
        private void OnErrorStatePackagePostDefaultImplementation(Exception exception, string pathFormat, string path, StatePackageRequest statePackageRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorStatePackagePost(ref suppressDefaultLog, exception, pathFormat, path, statePackageRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="statePackageRequest"></param>
        partial void OnErrorStatePackagePost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, StatePackageRequest statePackageRequest);

        /// <summary>
        /// Get Package Details Reads the package&#39;s substate/s from the top of the current ledger. 
        /// </summary>
        /// <param name="statePackageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatePackagePostApiResponse"/>&gt;</returns>
        public async Task<IStatePackagePostApiResponse?> StatePackagePostOrDefaultAsync(StatePackageRequest statePackageRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StatePackagePostAsync(statePackageRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Package Details Reads the package&#39;s substate/s from the top of the current ledger. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="statePackageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatePackagePostApiResponse"/>&gt;</returns>
        public async Task<IStatePackagePostApiResponse> StatePackagePostAsync(StatePackageRequest statePackageRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStatePackagePost(statePackageRequest);

                FormatStatePackagePost(statePackageRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/state/package";

                    httpRequestMessageLocalVar.Content = (statePackageRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(statePackageRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<StatePackagePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StatePackagePostApiResponse>();

                        StatePackagePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/state/package", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStatePackagePostDefaultImplementation(apiResponseLocalVar, statePackageRequest);

                        Events.ExecuteOnStatePackagePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStatePackagePostDefaultImplementation(e, "/state/package", uriBuilderLocalVar.Path, statePackageRequest);
                Events.ExecuteOnErrorStatePackagePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StatePackagePostApiResponse"/>
        /// </summary>
        public partial class StatePackagePostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, IStatePackagePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StatePackagePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StatePackagePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StatePackagePostApiResponse(ILogger<StatePackagePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.StatePackageResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.StatePackageResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.StatePackageResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStateResourcePost(StateResourceRequest stateResourceRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="stateResourceRequest"></param>
        /// <returns></returns>
        private void ValidateStateResourcePost(StateResourceRequest stateResourceRequest)
        {
            if (stateResourceRequest == null)
                throw new ArgumentNullException(nameof(stateResourceRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="stateResourceRequest"></param>
        private void AfterStateResourcePostDefaultImplementation(IStateResourcePostApiResponse apiResponseLocalVar, StateResourceRequest stateResourceRequest)
        {
            bool suppressDefaultLog = false;
            AfterStateResourcePost(ref suppressDefaultLog, apiResponseLocalVar, stateResourceRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="stateResourceRequest"></param>
        partial void AfterStateResourcePost(ref bool suppressDefaultLog, IStateResourcePostApiResponse apiResponseLocalVar, StateResourceRequest stateResourceRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="stateResourceRequest"></param>
        private void OnErrorStateResourcePostDefaultImplementation(Exception exception, string pathFormat, string path, StateResourceRequest stateResourceRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorStateResourcePost(ref suppressDefaultLog, exception, pathFormat, path, stateResourceRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="stateResourceRequest"></param>
        partial void OnErrorStateResourcePost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, StateResourceRequest stateResourceRequest);

        /// <summary>
        /// Get Resource Details Reads the resource manager&#39;s substate/s from the top of the current ledger. 
        /// </summary>
        /// <param name="stateResourceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateResourcePostApiResponse"/>&gt;</returns>
        public async Task<IStateResourcePostApiResponse?> StateResourcePostOrDefaultAsync(StateResourceRequest stateResourceRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StateResourcePostAsync(stateResourceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Resource Details Reads the resource manager&#39;s substate/s from the top of the current ledger. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateResourceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateResourcePostApiResponse"/>&gt;</returns>
        public async Task<IStateResourcePostApiResponse> StateResourcePostAsync(StateResourceRequest stateResourceRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStateResourcePost(stateResourceRequest);

                FormatStateResourcePost(stateResourceRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/state/resource";

                    httpRequestMessageLocalVar.Content = (stateResourceRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(stateResourceRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<StateResourcePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StateResourcePostApiResponse>();

                        StateResourcePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/state/resource", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStateResourcePostDefaultImplementation(apiResponseLocalVar, stateResourceRequest);

                        Events.ExecuteOnStateResourcePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStateResourcePostDefaultImplementation(e, "/state/resource", uriBuilderLocalVar.Path, stateResourceRequest);
                Events.ExecuteOnErrorStateResourcePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StateResourcePostApiResponse"/>
        /// </summary>
        public partial class StateResourcePostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, IStateResourcePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StateResourcePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StateResourcePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StateResourcePostApiResponse(ILogger<StateResourcePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.StateResourceResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.StateResourceResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.StateResourceResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStateValidatorPost(StateValidatorRequest stateValidatorRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="stateValidatorRequest"></param>
        /// <returns></returns>
        private void ValidateStateValidatorPost(StateValidatorRequest stateValidatorRequest)
        {
            if (stateValidatorRequest == null)
                throw new ArgumentNullException(nameof(stateValidatorRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="stateValidatorRequest"></param>
        private void AfterStateValidatorPostDefaultImplementation(IStateValidatorPostApiResponse apiResponseLocalVar, StateValidatorRequest stateValidatorRequest)
        {
            bool suppressDefaultLog = false;
            AfterStateValidatorPost(ref suppressDefaultLog, apiResponseLocalVar, stateValidatorRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="stateValidatorRequest"></param>
        partial void AfterStateValidatorPost(ref bool suppressDefaultLog, IStateValidatorPostApiResponse apiResponseLocalVar, StateValidatorRequest stateValidatorRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="stateValidatorRequest"></param>
        private void OnErrorStateValidatorPostDefaultImplementation(Exception exception, string pathFormat, string path, StateValidatorRequest stateValidatorRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorStateValidatorPost(ref suppressDefaultLog, exception, pathFormat, path, stateValidatorRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="stateValidatorRequest"></param>
        partial void OnErrorStateValidatorPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, StateValidatorRequest stateValidatorRequest);

        /// <summary>
        /// Get Validator Details Reads the validator&#39;s substate/s from the top of the current ledger. 
        /// </summary>
        /// <param name="stateValidatorRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateValidatorPostApiResponse"/>&gt;</returns>
        public async Task<IStateValidatorPostApiResponse?> StateValidatorPostOrDefaultAsync(StateValidatorRequest stateValidatorRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StateValidatorPostAsync(stateValidatorRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Validator Details Reads the validator&#39;s substate/s from the top of the current ledger. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateValidatorRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStateValidatorPostApiResponse"/>&gt;</returns>
        public async Task<IStateValidatorPostApiResponse> StateValidatorPostAsync(StateValidatorRequest stateValidatorRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStateValidatorPost(stateValidatorRequest);

                FormatStateValidatorPost(stateValidatorRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/state/validator";

                    httpRequestMessageLocalVar.Content = (stateValidatorRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(stateValidatorRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<StateValidatorPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StateValidatorPostApiResponse>();

                        StateValidatorPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/state/validator", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStateValidatorPostDefaultImplementation(apiResponseLocalVar, stateValidatorRequest);

                        Events.ExecuteOnStateValidatorPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStateValidatorPostDefaultImplementation(e, "/state/validator", uriBuilderLocalVar.Path, stateValidatorRequest);
                Events.ExecuteOnErrorStateValidatorPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StateValidatorPostApiResponse"/>
        /// </summary>
        public partial class StateValidatorPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, IStateValidatorPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StateValidatorPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StateValidatorPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StateValidatorPostApiResponse(ILogger<StateValidatorPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.StateValidatorResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.StateValidatorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.StateValidatorResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
