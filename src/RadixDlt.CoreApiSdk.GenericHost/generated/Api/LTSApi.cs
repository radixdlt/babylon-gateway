/* Copyright 2021 Radix Publishing Ltd incorporated in Jersey (Channel Islands).
 *
 * Licensed under the Radix License, Version 1.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 *
 * radixfoundation.org/licenses/LICENSE-v1
 *
 * The Licensor hereby grants permission for the Canonical version of the Work to be
 * published, distributed and used under or by reference to the Licensor’s trademark
 * Radix ® and use of any unregistered trade names, logos or get-up.
 *
 * The Licensor provides the Work (and each Contributor provides its Contributions) on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
 * including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT,
 * MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Whilst the Work is capable of being deployed, used and adopted (instantiated) to create
 * a distributed ledger it is your responsibility to test and validate the code, together
 * with all logic and performance of that code under all foreseeable scenarios.
 *
 * The Licensor does not make or purport to make and hereby excludes liability for all
 * and any representation, warranty or undertaking in any form whatsoever, whether express
 * or implied, to any entity or person, including any representation, warranty or
 * undertaking, as to the functionality security use, value or other characteristics of
 * any distributed ledger nor in respect the functioning or value of any tokens which may
 * be created stored or transferred using the Work. The Licensor does not warrant that the
 * Work or any use of the Work complies with any law or regulation in any territory where
 * it may be implemented or used or that it will be appropriate for any specific purpose.
 *
 * Neither the licensor nor any current or former employees, officers, directors, partners,
 * trustees, representatives, agents, advisors, contractors, or volunteers of the Licensor
 * shall be liable for any direct or indirect, special, incidental, consequential or other
 * losses of any kind, in tort, contract or otherwise (including but not limited to loss
 * of revenue, income or profits, or loss of use or data, or loss of reputation, or loss
 * of any economic or other opportunity of whatsoever nature or howsoever arising), arising
 * out of or in connection with (without limitation of any use, misuse, of any ledger system
 * or use made or its functionality or any performance or operation of any code or protocol
 * caused by bugs or programming or logic errors or otherwise);
 *
 * A. any offer, purchase, holding, use, sale, exchange or transmission of any
 * cryptographic keys, tokens or assets created, exchanged, stored or arising from any
 * interaction with the Work;
 *
 * B. any failure in a transmission or loss of any token or assets keys or other digital
 * artefacts due to errors in transmission;
 *
 * C. bugs, hacks, logic errors or faults in the Work or any communication;
 *
 * D. system software or apparatus including but not limited to losses caused by errors
 * in holding or transmitting tokens by any third-party;
 *
 * E. breaches or failure of security including hacker attacks, loss or disclosure of
 * password, loss of private key, unauthorised use or misuse of such passwords or keys;
 *
 * F. any losses including loss of anticipated savings or other benefits resulting from
 * use of the Work or any changes to the Work (however implemented).
 *
 * You are solely responsible for; testing, validating and evaluation of all operation
 * logic, functionality, security and appropriateness of using the Work for any commercial
 * or non-commercial purpose and for any reproduction or redistribution by You of the
 * Work. You assume all risks associated with Your use of the Work and the exercise of
 * permissions under this License.
 */

// <auto-generated>
/*
 * Radix Core API - Babylon
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using RadixDlt.CoreApiSdk.GenericHost.Client;
using RadixDlt.CoreApiSdk.GenericHost.Model;
using System.Diagnostics.CodeAnalysis;

namespace RadixDlt.CoreApiSdk.GenericHost.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ILTSApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        LTSApiEvents Events { get; }

        /// <summary>
        /// Get All Account Balances
        /// </summary>
        /// <remarks>
        /// Returns balances for all resources associated with an account
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsStateAccountAllFungibleResourceBalancesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStateAccountAllFungibleResourceBalancesPostApiResponse"/>&gt;</returns>
        Task<ILtsStateAccountAllFungibleResourceBalancesPostApiResponse> LtsStateAccountAllFungibleResourceBalancesPostAsync(LtsStateAccountAllFungibleResourceBalancesRequest ltsStateAccountAllFungibleResourceBalancesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All Account Balances
        /// </summary>
        /// <remarks>
        /// Returns balances for all resources associated with an account
        /// </remarks>
        /// <param name="ltsStateAccountAllFungibleResourceBalancesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStateAccountAllFungibleResourceBalancesPostApiResponse"/>?&gt;</returns>
        Task<ILtsStateAccountAllFungibleResourceBalancesPostApiResponse?> LtsStateAccountAllFungibleResourceBalancesPostOrDefaultAsync(LtsStateAccountAllFungibleResourceBalancesRequest ltsStateAccountAllFungibleResourceBalancesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Account Deposit Behaviour
        /// </summary>
        /// <remarks>
        /// Returns deposit behaviour of a single account for multiple resource addresses
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsStateAccountDepositBehaviourRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStateAccountDepositBehaviourPostApiResponse"/>&gt;</returns>
        Task<ILtsStateAccountDepositBehaviourPostApiResponse> LtsStateAccountDepositBehaviourPostAsync(LtsStateAccountDepositBehaviourRequest ltsStateAccountDepositBehaviourRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Account Deposit Behaviour
        /// </summary>
        /// <remarks>
        /// Returns deposit behaviour of a single account for multiple resource addresses
        /// </remarks>
        /// <param name="ltsStateAccountDepositBehaviourRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStateAccountDepositBehaviourPostApiResponse"/>?&gt;</returns>
        Task<ILtsStateAccountDepositBehaviourPostApiResponse?> LtsStateAccountDepositBehaviourPostOrDefaultAsync(LtsStateAccountDepositBehaviourRequest ltsStateAccountDepositBehaviourRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Single Account Balance
        /// </summary>
        /// <remarks>
        /// Returns balance of a single fungible resource in an account
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsStateAccountFungibleResourceBalanceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStateAccountFungibleResourceBalancePostApiResponse"/>&gt;</returns>
        Task<ILtsStateAccountFungibleResourceBalancePostApiResponse> LtsStateAccountFungibleResourceBalancePostAsync(LtsStateAccountFungibleResourceBalanceRequest ltsStateAccountFungibleResourceBalanceRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Single Account Balance
        /// </summary>
        /// <remarks>
        /// Returns balance of a single fungible resource in an account
        /// </remarks>
        /// <param name="ltsStateAccountFungibleResourceBalanceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStateAccountFungibleResourceBalancePostApiResponse"/>?&gt;</returns>
        Task<ILtsStateAccountFungibleResourceBalancePostApiResponse?> LtsStateAccountFungibleResourceBalancePostOrDefaultAsync(LtsStateAccountFungibleResourceBalanceRequest ltsStateAccountFungibleResourceBalanceRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Account Transaction Outcomes
        /// </summary>
        /// <remarks>
        /// Returns a list of committed transaction outcomes (containing balance changes) from a given state version, filtered to only transactions which involved the given account. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsStreamAccountTransactionOutcomesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStreamAccountTransactionOutcomesPostApiResponse"/>&gt;</returns>
        Task<ILtsStreamAccountTransactionOutcomesPostApiResponse> LtsStreamAccountTransactionOutcomesPostAsync(LtsStreamAccountTransactionOutcomesRequest ltsStreamAccountTransactionOutcomesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Account Transaction Outcomes
        /// </summary>
        /// <remarks>
        /// Returns a list of committed transaction outcomes (containing balance changes) from a given state version, filtered to only transactions which involved the given account. 
        /// </remarks>
        /// <param name="ltsStreamAccountTransactionOutcomesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStreamAccountTransactionOutcomesPostApiResponse"/>?&gt;</returns>
        Task<ILtsStreamAccountTransactionOutcomesPostApiResponse?> LtsStreamAccountTransactionOutcomesPostOrDefaultAsync(LtsStreamAccountTransactionOutcomesRequest ltsStreamAccountTransactionOutcomesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Transaction Outcomes
        /// </summary>
        /// <remarks>
        /// Returns a list of committed transaction outcomes (containing balance changes) from a given state version. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsStreamTransactionOutcomesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStreamTransactionOutcomesPostApiResponse"/>&gt;</returns>
        Task<ILtsStreamTransactionOutcomesPostApiResponse> LtsStreamTransactionOutcomesPostAsync(LtsStreamTransactionOutcomesRequest ltsStreamTransactionOutcomesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Transaction Outcomes
        /// </summary>
        /// <remarks>
        /// Returns a list of committed transaction outcomes (containing balance changes) from a given state version. 
        /// </remarks>
        /// <param name="ltsStreamTransactionOutcomesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStreamTransactionOutcomesPostApiResponse"/>?&gt;</returns>
        Task<ILtsStreamTransactionOutcomesPostApiResponse?> LtsStreamTransactionOutcomesPostOrDefaultAsync(LtsStreamTransactionOutcomesRequest ltsStreamTransactionOutcomesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Construction Metadata
        /// </summary>
        /// <remarks>
        /// Returns information necessary to build a transaction
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsTransactionConstructionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsTransactionConstructionPostApiResponse"/>&gt;</returns>
        Task<ILtsTransactionConstructionPostApiResponse> LtsTransactionConstructionPostAsync(LtsTransactionConstructionRequest ltsTransactionConstructionRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Construction Metadata
        /// </summary>
        /// <remarks>
        /// Returns information necessary to build a transaction
        /// </remarks>
        /// <param name="ltsTransactionConstructionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsTransactionConstructionPostApiResponse"/>?&gt;</returns>
        Task<ILtsTransactionConstructionPostApiResponse?> LtsTransactionConstructionPostOrDefaultAsync(LtsTransactionConstructionRequest ltsTransactionConstructionRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Transaction Status
        /// </summary>
        /// <remarks>
        /// Shares the node&#39;s knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it&#39;s theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsTransactionStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsTransactionStatusPostApiResponse"/>&gt;</returns>
        Task<ILtsTransactionStatusPostApiResponse> LtsTransactionStatusPostAsync(LtsTransactionStatusRequest ltsTransactionStatusRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Transaction Status
        /// </summary>
        /// <remarks>
        /// Shares the node&#39;s knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it&#39;s theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients. 
        /// </remarks>
        /// <param name="ltsTransactionStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsTransactionStatusPostApiResponse"/>?&gt;</returns>
        Task<ILtsTransactionStatusPostApiResponse?> LtsTransactionStatusPostOrDefaultAsync(LtsTransactionStatusRequest ltsTransactionStatusRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Submit Transaction
        /// </summary>
        /// <remarks>
        /// Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node&#39;s mempool. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsTransactionSubmitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsTransactionSubmitPostApiResponse"/>&gt;</returns>
        Task<ILtsTransactionSubmitPostApiResponse> LtsTransactionSubmitPostAsync(LtsTransactionSubmitRequest ltsTransactionSubmitRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Submit Transaction
        /// </summary>
        /// <remarks>
        /// Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node&#39;s mempool. 
        /// </remarks>
        /// <param name="ltsTransactionSubmitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsTransactionSubmitPostApiResponse"/>?&gt;</returns>
        Task<ILtsTransactionSubmitPostApiResponse?> LtsTransactionSubmitPostOrDefaultAsync(LtsTransactionSubmitRequest ltsTransactionSubmitRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ILtsStateAccountAllFungibleResourceBalancesPostApiResponse"/>
    /// </summary>
    public interface ILtsStateAccountAllFungibleResourceBalancesPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.LtsStateAccountAllFungibleResourceBalancesResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ILtsStateAccountDepositBehaviourPostApiResponse"/>
    /// </summary>
    public interface ILtsStateAccountDepositBehaviourPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.LtsStateAccountDepositBehaviourResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ILtsStateAccountFungibleResourceBalancePostApiResponse"/>
    /// </summary>
    public interface ILtsStateAccountFungibleResourceBalancePostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.LtsStateAccountFungibleResourceBalanceResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ILtsStreamAccountTransactionOutcomesPostApiResponse"/>
    /// </summary>
    public interface ILtsStreamAccountTransactionOutcomesPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.LtsStreamAccountTransactionOutcomesResponse?>, IBadRequest<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ILtsStreamTransactionOutcomesPostApiResponse"/>
    /// </summary>
    public interface ILtsStreamTransactionOutcomesPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.LtsStreamTransactionOutcomesResponse?>, IBadRequest<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ILtsTransactionConstructionPostApiResponse"/>
    /// </summary>
    public interface ILtsTransactionConstructionPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.LtsTransactionConstructionResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ILtsTransactionStatusPostApiResponse"/>
    /// </summary>
    public interface ILtsTransactionStatusPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.LtsTransactionStatusResponse?>, IBadRequest<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ILtsTransactionSubmitPostApiResponse"/>
    /// </summary>
    public interface ILtsTransactionSubmitPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.LtsTransactionSubmitResponse?>, IBadRequest<RadixDlt.CoreApiSdk.GenericHost.Model.TransactionSubmitErrorResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.TransactionSubmitErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class LTSApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLtsStateAccountAllFungibleResourceBalancesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLtsStateAccountAllFungibleResourceBalancesPost;

        internal void ExecuteOnLtsStateAccountAllFungibleResourceBalancesPost(LTSApi.LtsStateAccountAllFungibleResourceBalancesPostApiResponse apiResponse)
        {
            OnLtsStateAccountAllFungibleResourceBalancesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLtsStateAccountAllFungibleResourceBalancesPost(Exception exception)
        {
            OnErrorLtsStateAccountAllFungibleResourceBalancesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLtsStateAccountDepositBehaviourPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLtsStateAccountDepositBehaviourPost;

        internal void ExecuteOnLtsStateAccountDepositBehaviourPost(LTSApi.LtsStateAccountDepositBehaviourPostApiResponse apiResponse)
        {
            OnLtsStateAccountDepositBehaviourPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLtsStateAccountDepositBehaviourPost(Exception exception)
        {
            OnErrorLtsStateAccountDepositBehaviourPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLtsStateAccountFungibleResourceBalancePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLtsStateAccountFungibleResourceBalancePost;

        internal void ExecuteOnLtsStateAccountFungibleResourceBalancePost(LTSApi.LtsStateAccountFungibleResourceBalancePostApiResponse apiResponse)
        {
            OnLtsStateAccountFungibleResourceBalancePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLtsStateAccountFungibleResourceBalancePost(Exception exception)
        {
            OnErrorLtsStateAccountFungibleResourceBalancePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLtsStreamAccountTransactionOutcomesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLtsStreamAccountTransactionOutcomesPost;

        internal void ExecuteOnLtsStreamAccountTransactionOutcomesPost(LTSApi.LtsStreamAccountTransactionOutcomesPostApiResponse apiResponse)
        {
            OnLtsStreamAccountTransactionOutcomesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLtsStreamAccountTransactionOutcomesPost(Exception exception)
        {
            OnErrorLtsStreamAccountTransactionOutcomesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLtsStreamTransactionOutcomesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLtsStreamTransactionOutcomesPost;

        internal void ExecuteOnLtsStreamTransactionOutcomesPost(LTSApi.LtsStreamTransactionOutcomesPostApiResponse apiResponse)
        {
            OnLtsStreamTransactionOutcomesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLtsStreamTransactionOutcomesPost(Exception exception)
        {
            OnErrorLtsStreamTransactionOutcomesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLtsTransactionConstructionPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLtsTransactionConstructionPost;

        internal void ExecuteOnLtsTransactionConstructionPost(LTSApi.LtsTransactionConstructionPostApiResponse apiResponse)
        {
            OnLtsTransactionConstructionPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLtsTransactionConstructionPost(Exception exception)
        {
            OnErrorLtsTransactionConstructionPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLtsTransactionStatusPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLtsTransactionStatusPost;

        internal void ExecuteOnLtsTransactionStatusPost(LTSApi.LtsTransactionStatusPostApiResponse apiResponse)
        {
            OnLtsTransactionStatusPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLtsTransactionStatusPost(Exception exception)
        {
            OnErrorLtsTransactionStatusPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLtsTransactionSubmitPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLtsTransactionSubmitPost;

        internal void ExecuteOnLtsTransactionSubmitPost(LTSApi.LtsTransactionSubmitPostApiResponse apiResponse)
        {
            OnLtsTransactionSubmitPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLtsTransactionSubmitPost(Exception exception)
        {
            OnErrorLtsTransactionSubmitPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class LTSApi : ILTSApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<LTSApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public LTSApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="LTSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LTSApi(ILogger<LTSApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, LTSApiEvents lTSApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<LTSApi>();
            HttpClient = httpClient;
            Events = lTSApiEvents;
        }

        partial void FormatLtsStateAccountAllFungibleResourceBalancesPost(LtsStateAccountAllFungibleResourceBalancesRequest ltsStateAccountAllFungibleResourceBalancesRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ltsStateAccountAllFungibleResourceBalancesRequest"></param>
        /// <returns></returns>
        private void ValidateLtsStateAccountAllFungibleResourceBalancesPost(LtsStateAccountAllFungibleResourceBalancesRequest ltsStateAccountAllFungibleResourceBalancesRequest)
        {
            if (ltsStateAccountAllFungibleResourceBalancesRequest == null)
                throw new ArgumentNullException(nameof(ltsStateAccountAllFungibleResourceBalancesRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsStateAccountAllFungibleResourceBalancesRequest"></param>
        private void AfterLtsStateAccountAllFungibleResourceBalancesPostDefaultImplementation(ILtsStateAccountAllFungibleResourceBalancesPostApiResponse apiResponseLocalVar, LtsStateAccountAllFungibleResourceBalancesRequest ltsStateAccountAllFungibleResourceBalancesRequest)
        {
            bool suppressDefaultLog = false;
            AfterLtsStateAccountAllFungibleResourceBalancesPost(ref suppressDefaultLog, apiResponseLocalVar, ltsStateAccountAllFungibleResourceBalancesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsStateAccountAllFungibleResourceBalancesRequest"></param>
        partial void AfterLtsStateAccountAllFungibleResourceBalancesPost(ref bool suppressDefaultLog, ILtsStateAccountAllFungibleResourceBalancesPostApiResponse apiResponseLocalVar, LtsStateAccountAllFungibleResourceBalancesRequest ltsStateAccountAllFungibleResourceBalancesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsStateAccountAllFungibleResourceBalancesRequest"></param>
        private void OnErrorLtsStateAccountAllFungibleResourceBalancesPostDefaultImplementation(Exception exception, string pathFormat, string path, LtsStateAccountAllFungibleResourceBalancesRequest ltsStateAccountAllFungibleResourceBalancesRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorLtsStateAccountAllFungibleResourceBalancesPost(ref suppressDefaultLog, exception, pathFormat, path, ltsStateAccountAllFungibleResourceBalancesRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsStateAccountAllFungibleResourceBalancesRequest"></param>
        partial void OnErrorLtsStateAccountAllFungibleResourceBalancesPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, LtsStateAccountAllFungibleResourceBalancesRequest ltsStateAccountAllFungibleResourceBalancesRequest);

        /// <summary>
        /// Get All Account Balances Returns balances for all resources associated with an account
        /// </summary>
        /// <param name="ltsStateAccountAllFungibleResourceBalancesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStateAccountAllFungibleResourceBalancesPostApiResponse"/>&gt;</returns>
        public async Task<ILtsStateAccountAllFungibleResourceBalancesPostApiResponse?> LtsStateAccountAllFungibleResourceBalancesPostOrDefaultAsync(LtsStateAccountAllFungibleResourceBalancesRequest ltsStateAccountAllFungibleResourceBalancesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LtsStateAccountAllFungibleResourceBalancesPostAsync(ltsStateAccountAllFungibleResourceBalancesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get All Account Balances Returns balances for all resources associated with an account
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsStateAccountAllFungibleResourceBalancesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStateAccountAllFungibleResourceBalancesPostApiResponse"/>&gt;</returns>
        public async Task<ILtsStateAccountAllFungibleResourceBalancesPostApiResponse> LtsStateAccountAllFungibleResourceBalancesPostAsync(LtsStateAccountAllFungibleResourceBalancesRequest ltsStateAccountAllFungibleResourceBalancesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLtsStateAccountAllFungibleResourceBalancesPost(ltsStateAccountAllFungibleResourceBalancesRequest);

                FormatLtsStateAccountAllFungibleResourceBalancesPost(ltsStateAccountAllFungibleResourceBalancesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/lts/state/account-all-fungible-resource-balances";

                    httpRequestMessageLocalVar.Content = (ltsStateAccountAllFungibleResourceBalancesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(ltsStateAccountAllFungibleResourceBalancesRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LtsStateAccountAllFungibleResourceBalancesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LtsStateAccountAllFungibleResourceBalancesPostApiResponse>();

                        LtsStateAccountAllFungibleResourceBalancesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/lts/state/account-all-fungible-resource-balances", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLtsStateAccountAllFungibleResourceBalancesPostDefaultImplementation(apiResponseLocalVar, ltsStateAccountAllFungibleResourceBalancesRequest);

                        Events.ExecuteOnLtsStateAccountAllFungibleResourceBalancesPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLtsStateAccountAllFungibleResourceBalancesPostDefaultImplementation(e, "/lts/state/account-all-fungible-resource-balances", uriBuilderLocalVar.Path, ltsStateAccountAllFungibleResourceBalancesRequest);
                Events.ExecuteOnErrorLtsStateAccountAllFungibleResourceBalancesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LtsStateAccountAllFungibleResourceBalancesPostApiResponse"/>
        /// </summary>
        public partial class LtsStateAccountAllFungibleResourceBalancesPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, ILtsStateAccountAllFungibleResourceBalancesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LtsStateAccountAllFungibleResourceBalancesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LtsStateAccountAllFungibleResourceBalancesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LtsStateAccountAllFungibleResourceBalancesPostApiResponse(ILogger<LtsStateAccountAllFungibleResourceBalancesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.LtsStateAccountAllFungibleResourceBalancesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.LtsStateAccountAllFungibleResourceBalancesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.LtsStateAccountAllFungibleResourceBalancesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLtsStateAccountDepositBehaviourPost(LtsStateAccountDepositBehaviourRequest ltsStateAccountDepositBehaviourRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ltsStateAccountDepositBehaviourRequest"></param>
        /// <returns></returns>
        private void ValidateLtsStateAccountDepositBehaviourPost(LtsStateAccountDepositBehaviourRequest ltsStateAccountDepositBehaviourRequest)
        {
            if (ltsStateAccountDepositBehaviourRequest == null)
                throw new ArgumentNullException(nameof(ltsStateAccountDepositBehaviourRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsStateAccountDepositBehaviourRequest"></param>
        private void AfterLtsStateAccountDepositBehaviourPostDefaultImplementation(ILtsStateAccountDepositBehaviourPostApiResponse apiResponseLocalVar, LtsStateAccountDepositBehaviourRequest ltsStateAccountDepositBehaviourRequest)
        {
            bool suppressDefaultLog = false;
            AfterLtsStateAccountDepositBehaviourPost(ref suppressDefaultLog, apiResponseLocalVar, ltsStateAccountDepositBehaviourRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsStateAccountDepositBehaviourRequest"></param>
        partial void AfterLtsStateAccountDepositBehaviourPost(ref bool suppressDefaultLog, ILtsStateAccountDepositBehaviourPostApiResponse apiResponseLocalVar, LtsStateAccountDepositBehaviourRequest ltsStateAccountDepositBehaviourRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsStateAccountDepositBehaviourRequest"></param>
        private void OnErrorLtsStateAccountDepositBehaviourPostDefaultImplementation(Exception exception, string pathFormat, string path, LtsStateAccountDepositBehaviourRequest ltsStateAccountDepositBehaviourRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorLtsStateAccountDepositBehaviourPost(ref suppressDefaultLog, exception, pathFormat, path, ltsStateAccountDepositBehaviourRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsStateAccountDepositBehaviourRequest"></param>
        partial void OnErrorLtsStateAccountDepositBehaviourPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, LtsStateAccountDepositBehaviourRequest ltsStateAccountDepositBehaviourRequest);

        /// <summary>
        /// Get Account Deposit Behaviour Returns deposit behaviour of a single account for multiple resource addresses
        /// </summary>
        /// <param name="ltsStateAccountDepositBehaviourRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStateAccountDepositBehaviourPostApiResponse"/>&gt;</returns>
        public async Task<ILtsStateAccountDepositBehaviourPostApiResponse?> LtsStateAccountDepositBehaviourPostOrDefaultAsync(LtsStateAccountDepositBehaviourRequest ltsStateAccountDepositBehaviourRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LtsStateAccountDepositBehaviourPostAsync(ltsStateAccountDepositBehaviourRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Account Deposit Behaviour Returns deposit behaviour of a single account for multiple resource addresses
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsStateAccountDepositBehaviourRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStateAccountDepositBehaviourPostApiResponse"/>&gt;</returns>
        public async Task<ILtsStateAccountDepositBehaviourPostApiResponse> LtsStateAccountDepositBehaviourPostAsync(LtsStateAccountDepositBehaviourRequest ltsStateAccountDepositBehaviourRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLtsStateAccountDepositBehaviourPost(ltsStateAccountDepositBehaviourRequest);

                FormatLtsStateAccountDepositBehaviourPost(ltsStateAccountDepositBehaviourRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/lts/state/account-deposit-behaviour";

                    httpRequestMessageLocalVar.Content = (ltsStateAccountDepositBehaviourRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(ltsStateAccountDepositBehaviourRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LtsStateAccountDepositBehaviourPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LtsStateAccountDepositBehaviourPostApiResponse>();

                        LtsStateAccountDepositBehaviourPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/lts/state/account-deposit-behaviour", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLtsStateAccountDepositBehaviourPostDefaultImplementation(apiResponseLocalVar, ltsStateAccountDepositBehaviourRequest);

                        Events.ExecuteOnLtsStateAccountDepositBehaviourPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLtsStateAccountDepositBehaviourPostDefaultImplementation(e, "/lts/state/account-deposit-behaviour", uriBuilderLocalVar.Path, ltsStateAccountDepositBehaviourRequest);
                Events.ExecuteOnErrorLtsStateAccountDepositBehaviourPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LtsStateAccountDepositBehaviourPostApiResponse"/>
        /// </summary>
        public partial class LtsStateAccountDepositBehaviourPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, ILtsStateAccountDepositBehaviourPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LtsStateAccountDepositBehaviourPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LtsStateAccountDepositBehaviourPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LtsStateAccountDepositBehaviourPostApiResponse(ILogger<LtsStateAccountDepositBehaviourPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.LtsStateAccountDepositBehaviourResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.LtsStateAccountDepositBehaviourResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.LtsStateAccountDepositBehaviourResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLtsStateAccountFungibleResourceBalancePost(LtsStateAccountFungibleResourceBalanceRequest ltsStateAccountFungibleResourceBalanceRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ltsStateAccountFungibleResourceBalanceRequest"></param>
        /// <returns></returns>
        private void ValidateLtsStateAccountFungibleResourceBalancePost(LtsStateAccountFungibleResourceBalanceRequest ltsStateAccountFungibleResourceBalanceRequest)
        {
            if (ltsStateAccountFungibleResourceBalanceRequest == null)
                throw new ArgumentNullException(nameof(ltsStateAccountFungibleResourceBalanceRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsStateAccountFungibleResourceBalanceRequest"></param>
        private void AfterLtsStateAccountFungibleResourceBalancePostDefaultImplementation(ILtsStateAccountFungibleResourceBalancePostApiResponse apiResponseLocalVar, LtsStateAccountFungibleResourceBalanceRequest ltsStateAccountFungibleResourceBalanceRequest)
        {
            bool suppressDefaultLog = false;
            AfterLtsStateAccountFungibleResourceBalancePost(ref suppressDefaultLog, apiResponseLocalVar, ltsStateAccountFungibleResourceBalanceRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsStateAccountFungibleResourceBalanceRequest"></param>
        partial void AfterLtsStateAccountFungibleResourceBalancePost(ref bool suppressDefaultLog, ILtsStateAccountFungibleResourceBalancePostApiResponse apiResponseLocalVar, LtsStateAccountFungibleResourceBalanceRequest ltsStateAccountFungibleResourceBalanceRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsStateAccountFungibleResourceBalanceRequest"></param>
        private void OnErrorLtsStateAccountFungibleResourceBalancePostDefaultImplementation(Exception exception, string pathFormat, string path, LtsStateAccountFungibleResourceBalanceRequest ltsStateAccountFungibleResourceBalanceRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorLtsStateAccountFungibleResourceBalancePost(ref suppressDefaultLog, exception, pathFormat, path, ltsStateAccountFungibleResourceBalanceRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsStateAccountFungibleResourceBalanceRequest"></param>
        partial void OnErrorLtsStateAccountFungibleResourceBalancePost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, LtsStateAccountFungibleResourceBalanceRequest ltsStateAccountFungibleResourceBalanceRequest);

        /// <summary>
        /// Get Single Account Balance Returns balance of a single fungible resource in an account
        /// </summary>
        /// <param name="ltsStateAccountFungibleResourceBalanceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStateAccountFungibleResourceBalancePostApiResponse"/>&gt;</returns>
        public async Task<ILtsStateAccountFungibleResourceBalancePostApiResponse?> LtsStateAccountFungibleResourceBalancePostOrDefaultAsync(LtsStateAccountFungibleResourceBalanceRequest ltsStateAccountFungibleResourceBalanceRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LtsStateAccountFungibleResourceBalancePostAsync(ltsStateAccountFungibleResourceBalanceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Single Account Balance Returns balance of a single fungible resource in an account
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsStateAccountFungibleResourceBalanceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStateAccountFungibleResourceBalancePostApiResponse"/>&gt;</returns>
        public async Task<ILtsStateAccountFungibleResourceBalancePostApiResponse> LtsStateAccountFungibleResourceBalancePostAsync(LtsStateAccountFungibleResourceBalanceRequest ltsStateAccountFungibleResourceBalanceRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLtsStateAccountFungibleResourceBalancePost(ltsStateAccountFungibleResourceBalanceRequest);

                FormatLtsStateAccountFungibleResourceBalancePost(ltsStateAccountFungibleResourceBalanceRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/lts/state/account-fungible-resource-balance";

                    httpRequestMessageLocalVar.Content = (ltsStateAccountFungibleResourceBalanceRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(ltsStateAccountFungibleResourceBalanceRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LtsStateAccountFungibleResourceBalancePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LtsStateAccountFungibleResourceBalancePostApiResponse>();

                        LtsStateAccountFungibleResourceBalancePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/lts/state/account-fungible-resource-balance", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLtsStateAccountFungibleResourceBalancePostDefaultImplementation(apiResponseLocalVar, ltsStateAccountFungibleResourceBalanceRequest);

                        Events.ExecuteOnLtsStateAccountFungibleResourceBalancePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLtsStateAccountFungibleResourceBalancePostDefaultImplementation(e, "/lts/state/account-fungible-resource-balance", uriBuilderLocalVar.Path, ltsStateAccountFungibleResourceBalanceRequest);
                Events.ExecuteOnErrorLtsStateAccountFungibleResourceBalancePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LtsStateAccountFungibleResourceBalancePostApiResponse"/>
        /// </summary>
        public partial class LtsStateAccountFungibleResourceBalancePostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, ILtsStateAccountFungibleResourceBalancePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LtsStateAccountFungibleResourceBalancePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LtsStateAccountFungibleResourceBalancePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LtsStateAccountFungibleResourceBalancePostApiResponse(ILogger<LtsStateAccountFungibleResourceBalancePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.LtsStateAccountFungibleResourceBalanceResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.LtsStateAccountFungibleResourceBalanceResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.LtsStateAccountFungibleResourceBalanceResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLtsStreamAccountTransactionOutcomesPost(LtsStreamAccountTransactionOutcomesRequest ltsStreamAccountTransactionOutcomesRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ltsStreamAccountTransactionOutcomesRequest"></param>
        /// <returns></returns>
        private void ValidateLtsStreamAccountTransactionOutcomesPost(LtsStreamAccountTransactionOutcomesRequest ltsStreamAccountTransactionOutcomesRequest)
        {
            if (ltsStreamAccountTransactionOutcomesRequest == null)
                throw new ArgumentNullException(nameof(ltsStreamAccountTransactionOutcomesRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsStreamAccountTransactionOutcomesRequest"></param>
        private void AfterLtsStreamAccountTransactionOutcomesPostDefaultImplementation(ILtsStreamAccountTransactionOutcomesPostApiResponse apiResponseLocalVar, LtsStreamAccountTransactionOutcomesRequest ltsStreamAccountTransactionOutcomesRequest)
        {
            bool suppressDefaultLog = false;
            AfterLtsStreamAccountTransactionOutcomesPost(ref suppressDefaultLog, apiResponseLocalVar, ltsStreamAccountTransactionOutcomesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsStreamAccountTransactionOutcomesRequest"></param>
        partial void AfterLtsStreamAccountTransactionOutcomesPost(ref bool suppressDefaultLog, ILtsStreamAccountTransactionOutcomesPostApiResponse apiResponseLocalVar, LtsStreamAccountTransactionOutcomesRequest ltsStreamAccountTransactionOutcomesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsStreamAccountTransactionOutcomesRequest"></param>
        private void OnErrorLtsStreamAccountTransactionOutcomesPostDefaultImplementation(Exception exception, string pathFormat, string path, LtsStreamAccountTransactionOutcomesRequest ltsStreamAccountTransactionOutcomesRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorLtsStreamAccountTransactionOutcomesPost(ref suppressDefaultLog, exception, pathFormat, path, ltsStreamAccountTransactionOutcomesRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsStreamAccountTransactionOutcomesRequest"></param>
        partial void OnErrorLtsStreamAccountTransactionOutcomesPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, LtsStreamAccountTransactionOutcomesRequest ltsStreamAccountTransactionOutcomesRequest);

        /// <summary>
        /// Get Account Transaction Outcomes Returns a list of committed transaction outcomes (containing balance changes) from a given state version, filtered to only transactions which involved the given account. 
        /// </summary>
        /// <param name="ltsStreamAccountTransactionOutcomesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStreamAccountTransactionOutcomesPostApiResponse"/>&gt;</returns>
        public async Task<ILtsStreamAccountTransactionOutcomesPostApiResponse?> LtsStreamAccountTransactionOutcomesPostOrDefaultAsync(LtsStreamAccountTransactionOutcomesRequest ltsStreamAccountTransactionOutcomesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LtsStreamAccountTransactionOutcomesPostAsync(ltsStreamAccountTransactionOutcomesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Account Transaction Outcomes Returns a list of committed transaction outcomes (containing balance changes) from a given state version, filtered to only transactions which involved the given account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsStreamAccountTransactionOutcomesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStreamAccountTransactionOutcomesPostApiResponse"/>&gt;</returns>
        public async Task<ILtsStreamAccountTransactionOutcomesPostApiResponse> LtsStreamAccountTransactionOutcomesPostAsync(LtsStreamAccountTransactionOutcomesRequest ltsStreamAccountTransactionOutcomesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLtsStreamAccountTransactionOutcomesPost(ltsStreamAccountTransactionOutcomesRequest);

                FormatLtsStreamAccountTransactionOutcomesPost(ltsStreamAccountTransactionOutcomesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/lts/stream/account-transaction-outcomes";

                    httpRequestMessageLocalVar.Content = (ltsStreamAccountTransactionOutcomesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(ltsStreamAccountTransactionOutcomesRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LtsStreamAccountTransactionOutcomesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LtsStreamAccountTransactionOutcomesPostApiResponse>();

                        LtsStreamAccountTransactionOutcomesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/lts/stream/account-transaction-outcomes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLtsStreamAccountTransactionOutcomesPostDefaultImplementation(apiResponseLocalVar, ltsStreamAccountTransactionOutcomesRequest);

                        Events.ExecuteOnLtsStreamAccountTransactionOutcomesPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLtsStreamAccountTransactionOutcomesPostDefaultImplementation(e, "/lts/stream/account-transaction-outcomes", uriBuilderLocalVar.Path, ltsStreamAccountTransactionOutcomesRequest);
                Events.ExecuteOnErrorLtsStreamAccountTransactionOutcomesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LtsStreamAccountTransactionOutcomesPostApiResponse"/>
        /// </summary>
        public partial class LtsStreamAccountTransactionOutcomesPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, ILtsStreamAccountTransactionOutcomesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LtsStreamAccountTransactionOutcomesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LtsStreamAccountTransactionOutcomesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LtsStreamAccountTransactionOutcomesPostApiResponse(ILogger<LtsStreamAccountTransactionOutcomesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.LtsStreamAccountTransactionOutcomesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.LtsStreamAccountTransactionOutcomesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.LtsStreamAccountTransactionOutcomesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLtsStreamTransactionOutcomesPost(LtsStreamTransactionOutcomesRequest ltsStreamTransactionOutcomesRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ltsStreamTransactionOutcomesRequest"></param>
        /// <returns></returns>
        private void ValidateLtsStreamTransactionOutcomesPost(LtsStreamTransactionOutcomesRequest ltsStreamTransactionOutcomesRequest)
        {
            if (ltsStreamTransactionOutcomesRequest == null)
                throw new ArgumentNullException(nameof(ltsStreamTransactionOutcomesRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsStreamTransactionOutcomesRequest"></param>
        private void AfterLtsStreamTransactionOutcomesPostDefaultImplementation(ILtsStreamTransactionOutcomesPostApiResponse apiResponseLocalVar, LtsStreamTransactionOutcomesRequest ltsStreamTransactionOutcomesRequest)
        {
            bool suppressDefaultLog = false;
            AfterLtsStreamTransactionOutcomesPost(ref suppressDefaultLog, apiResponseLocalVar, ltsStreamTransactionOutcomesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsStreamTransactionOutcomesRequest"></param>
        partial void AfterLtsStreamTransactionOutcomesPost(ref bool suppressDefaultLog, ILtsStreamTransactionOutcomesPostApiResponse apiResponseLocalVar, LtsStreamTransactionOutcomesRequest ltsStreamTransactionOutcomesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsStreamTransactionOutcomesRequest"></param>
        private void OnErrorLtsStreamTransactionOutcomesPostDefaultImplementation(Exception exception, string pathFormat, string path, LtsStreamTransactionOutcomesRequest ltsStreamTransactionOutcomesRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorLtsStreamTransactionOutcomesPost(ref suppressDefaultLog, exception, pathFormat, path, ltsStreamTransactionOutcomesRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsStreamTransactionOutcomesRequest"></param>
        partial void OnErrorLtsStreamTransactionOutcomesPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, LtsStreamTransactionOutcomesRequest ltsStreamTransactionOutcomesRequest);

        /// <summary>
        /// Get Transaction Outcomes Returns a list of committed transaction outcomes (containing balance changes) from a given state version. 
        /// </summary>
        /// <param name="ltsStreamTransactionOutcomesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStreamTransactionOutcomesPostApiResponse"/>&gt;</returns>
        public async Task<ILtsStreamTransactionOutcomesPostApiResponse?> LtsStreamTransactionOutcomesPostOrDefaultAsync(LtsStreamTransactionOutcomesRequest ltsStreamTransactionOutcomesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LtsStreamTransactionOutcomesPostAsync(ltsStreamTransactionOutcomesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Transaction Outcomes Returns a list of committed transaction outcomes (containing balance changes) from a given state version. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsStreamTransactionOutcomesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsStreamTransactionOutcomesPostApiResponse"/>&gt;</returns>
        public async Task<ILtsStreamTransactionOutcomesPostApiResponse> LtsStreamTransactionOutcomesPostAsync(LtsStreamTransactionOutcomesRequest ltsStreamTransactionOutcomesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLtsStreamTransactionOutcomesPost(ltsStreamTransactionOutcomesRequest);

                FormatLtsStreamTransactionOutcomesPost(ltsStreamTransactionOutcomesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/lts/stream/transaction-outcomes";

                    httpRequestMessageLocalVar.Content = (ltsStreamTransactionOutcomesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(ltsStreamTransactionOutcomesRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LtsStreamTransactionOutcomesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LtsStreamTransactionOutcomesPostApiResponse>();

                        LtsStreamTransactionOutcomesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/lts/stream/transaction-outcomes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLtsStreamTransactionOutcomesPostDefaultImplementation(apiResponseLocalVar, ltsStreamTransactionOutcomesRequest);

                        Events.ExecuteOnLtsStreamTransactionOutcomesPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLtsStreamTransactionOutcomesPostDefaultImplementation(e, "/lts/stream/transaction-outcomes", uriBuilderLocalVar.Path, ltsStreamTransactionOutcomesRequest);
                Events.ExecuteOnErrorLtsStreamTransactionOutcomesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LtsStreamTransactionOutcomesPostApiResponse"/>
        /// </summary>
        public partial class LtsStreamTransactionOutcomesPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, ILtsStreamTransactionOutcomesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LtsStreamTransactionOutcomesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LtsStreamTransactionOutcomesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LtsStreamTransactionOutcomesPostApiResponse(ILogger<LtsStreamTransactionOutcomesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.LtsStreamTransactionOutcomesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.LtsStreamTransactionOutcomesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.LtsStreamTransactionOutcomesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLtsTransactionConstructionPost(LtsTransactionConstructionRequest ltsTransactionConstructionRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ltsTransactionConstructionRequest"></param>
        /// <returns></returns>
        private void ValidateLtsTransactionConstructionPost(LtsTransactionConstructionRequest ltsTransactionConstructionRequest)
        {
            if (ltsTransactionConstructionRequest == null)
                throw new ArgumentNullException(nameof(ltsTransactionConstructionRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsTransactionConstructionRequest"></param>
        private void AfterLtsTransactionConstructionPostDefaultImplementation(ILtsTransactionConstructionPostApiResponse apiResponseLocalVar, LtsTransactionConstructionRequest ltsTransactionConstructionRequest)
        {
            bool suppressDefaultLog = false;
            AfterLtsTransactionConstructionPost(ref suppressDefaultLog, apiResponseLocalVar, ltsTransactionConstructionRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsTransactionConstructionRequest"></param>
        partial void AfterLtsTransactionConstructionPost(ref bool suppressDefaultLog, ILtsTransactionConstructionPostApiResponse apiResponseLocalVar, LtsTransactionConstructionRequest ltsTransactionConstructionRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsTransactionConstructionRequest"></param>
        private void OnErrorLtsTransactionConstructionPostDefaultImplementation(Exception exception, string pathFormat, string path, LtsTransactionConstructionRequest ltsTransactionConstructionRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorLtsTransactionConstructionPost(ref suppressDefaultLog, exception, pathFormat, path, ltsTransactionConstructionRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsTransactionConstructionRequest"></param>
        partial void OnErrorLtsTransactionConstructionPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, LtsTransactionConstructionRequest ltsTransactionConstructionRequest);

        /// <summary>
        /// Get Construction Metadata Returns information necessary to build a transaction
        /// </summary>
        /// <param name="ltsTransactionConstructionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsTransactionConstructionPostApiResponse"/>&gt;</returns>
        public async Task<ILtsTransactionConstructionPostApiResponse?> LtsTransactionConstructionPostOrDefaultAsync(LtsTransactionConstructionRequest ltsTransactionConstructionRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LtsTransactionConstructionPostAsync(ltsTransactionConstructionRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Construction Metadata Returns information necessary to build a transaction
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsTransactionConstructionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsTransactionConstructionPostApiResponse"/>&gt;</returns>
        public async Task<ILtsTransactionConstructionPostApiResponse> LtsTransactionConstructionPostAsync(LtsTransactionConstructionRequest ltsTransactionConstructionRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLtsTransactionConstructionPost(ltsTransactionConstructionRequest);

                FormatLtsTransactionConstructionPost(ltsTransactionConstructionRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/lts/transaction/construction";

                    httpRequestMessageLocalVar.Content = (ltsTransactionConstructionRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(ltsTransactionConstructionRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LtsTransactionConstructionPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LtsTransactionConstructionPostApiResponse>();

                        LtsTransactionConstructionPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/lts/transaction/construction", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLtsTransactionConstructionPostDefaultImplementation(apiResponseLocalVar, ltsTransactionConstructionRequest);

                        Events.ExecuteOnLtsTransactionConstructionPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLtsTransactionConstructionPostDefaultImplementation(e, "/lts/transaction/construction", uriBuilderLocalVar.Path, ltsTransactionConstructionRequest);
                Events.ExecuteOnErrorLtsTransactionConstructionPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LtsTransactionConstructionPostApiResponse"/>
        /// </summary>
        public partial class LtsTransactionConstructionPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, ILtsTransactionConstructionPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LtsTransactionConstructionPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LtsTransactionConstructionPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LtsTransactionConstructionPostApiResponse(ILogger<LtsTransactionConstructionPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.LtsTransactionConstructionResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.LtsTransactionConstructionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.LtsTransactionConstructionResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLtsTransactionStatusPost(LtsTransactionStatusRequest ltsTransactionStatusRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ltsTransactionStatusRequest"></param>
        /// <returns></returns>
        private void ValidateLtsTransactionStatusPost(LtsTransactionStatusRequest ltsTransactionStatusRequest)
        {
            if (ltsTransactionStatusRequest == null)
                throw new ArgumentNullException(nameof(ltsTransactionStatusRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsTransactionStatusRequest"></param>
        private void AfterLtsTransactionStatusPostDefaultImplementation(ILtsTransactionStatusPostApiResponse apiResponseLocalVar, LtsTransactionStatusRequest ltsTransactionStatusRequest)
        {
            bool suppressDefaultLog = false;
            AfterLtsTransactionStatusPost(ref suppressDefaultLog, apiResponseLocalVar, ltsTransactionStatusRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsTransactionStatusRequest"></param>
        partial void AfterLtsTransactionStatusPost(ref bool suppressDefaultLog, ILtsTransactionStatusPostApiResponse apiResponseLocalVar, LtsTransactionStatusRequest ltsTransactionStatusRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsTransactionStatusRequest"></param>
        private void OnErrorLtsTransactionStatusPostDefaultImplementation(Exception exception, string pathFormat, string path, LtsTransactionStatusRequest ltsTransactionStatusRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorLtsTransactionStatusPost(ref suppressDefaultLog, exception, pathFormat, path, ltsTransactionStatusRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsTransactionStatusRequest"></param>
        partial void OnErrorLtsTransactionStatusPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, LtsTransactionStatusRequest ltsTransactionStatusRequest);

        /// <summary>
        /// Get Transaction Status Shares the node&#39;s knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it&#39;s theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients. 
        /// </summary>
        /// <param name="ltsTransactionStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsTransactionStatusPostApiResponse"/>&gt;</returns>
        public async Task<ILtsTransactionStatusPostApiResponse?> LtsTransactionStatusPostOrDefaultAsync(LtsTransactionStatusRequest ltsTransactionStatusRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LtsTransactionStatusPostAsync(ltsTransactionStatusRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Transaction Status Shares the node&#39;s knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it&#39;s theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsTransactionStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsTransactionStatusPostApiResponse"/>&gt;</returns>
        public async Task<ILtsTransactionStatusPostApiResponse> LtsTransactionStatusPostAsync(LtsTransactionStatusRequest ltsTransactionStatusRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLtsTransactionStatusPost(ltsTransactionStatusRequest);

                FormatLtsTransactionStatusPost(ltsTransactionStatusRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/lts/transaction/status";

                    httpRequestMessageLocalVar.Content = (ltsTransactionStatusRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(ltsTransactionStatusRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LtsTransactionStatusPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LtsTransactionStatusPostApiResponse>();

                        LtsTransactionStatusPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/lts/transaction/status", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLtsTransactionStatusPostDefaultImplementation(apiResponseLocalVar, ltsTransactionStatusRequest);

                        Events.ExecuteOnLtsTransactionStatusPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLtsTransactionStatusPostDefaultImplementation(e, "/lts/transaction/status", uriBuilderLocalVar.Path, ltsTransactionStatusRequest);
                Events.ExecuteOnErrorLtsTransactionStatusPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LtsTransactionStatusPostApiResponse"/>
        /// </summary>
        public partial class LtsTransactionStatusPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, ILtsTransactionStatusPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LtsTransactionStatusPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LtsTransactionStatusPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LtsTransactionStatusPostApiResponse(ILogger<LtsTransactionStatusPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.LtsTransactionStatusResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.LtsTransactionStatusResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.LtsTransactionStatusResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLtsTransactionSubmitPost(LtsTransactionSubmitRequest ltsTransactionSubmitRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ltsTransactionSubmitRequest"></param>
        /// <returns></returns>
        private void ValidateLtsTransactionSubmitPost(LtsTransactionSubmitRequest ltsTransactionSubmitRequest)
        {
            if (ltsTransactionSubmitRequest == null)
                throw new ArgumentNullException(nameof(ltsTransactionSubmitRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsTransactionSubmitRequest"></param>
        private void AfterLtsTransactionSubmitPostDefaultImplementation(ILtsTransactionSubmitPostApiResponse apiResponseLocalVar, LtsTransactionSubmitRequest ltsTransactionSubmitRequest)
        {
            bool suppressDefaultLog = false;
            AfterLtsTransactionSubmitPost(ref suppressDefaultLog, apiResponseLocalVar, ltsTransactionSubmitRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ltsTransactionSubmitRequest"></param>
        partial void AfterLtsTransactionSubmitPost(ref bool suppressDefaultLog, ILtsTransactionSubmitPostApiResponse apiResponseLocalVar, LtsTransactionSubmitRequest ltsTransactionSubmitRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsTransactionSubmitRequest"></param>
        private void OnErrorLtsTransactionSubmitPostDefaultImplementation(Exception exception, string pathFormat, string path, LtsTransactionSubmitRequest ltsTransactionSubmitRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorLtsTransactionSubmitPost(ref suppressDefaultLog, exception, pathFormat, path, ltsTransactionSubmitRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="ltsTransactionSubmitRequest"></param>
        partial void OnErrorLtsTransactionSubmitPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, LtsTransactionSubmitRequest ltsTransactionSubmitRequest);

        /// <summary>
        /// Submit Transaction Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node&#39;s mempool. 
        /// </summary>
        /// <param name="ltsTransactionSubmitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsTransactionSubmitPostApiResponse"/>&gt;</returns>
        public async Task<ILtsTransactionSubmitPostApiResponse?> LtsTransactionSubmitPostOrDefaultAsync(LtsTransactionSubmitRequest ltsTransactionSubmitRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LtsTransactionSubmitPostAsync(ltsTransactionSubmitRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Submit Transaction Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node&#39;s mempool. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ltsTransactionSubmitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILtsTransactionSubmitPostApiResponse"/>&gt;</returns>
        public async Task<ILtsTransactionSubmitPostApiResponse> LtsTransactionSubmitPostAsync(LtsTransactionSubmitRequest ltsTransactionSubmitRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLtsTransactionSubmitPost(ltsTransactionSubmitRequest);

                FormatLtsTransactionSubmitPost(ltsTransactionSubmitRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/lts/transaction/submit";

                    httpRequestMessageLocalVar.Content = (ltsTransactionSubmitRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(ltsTransactionSubmitRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LtsTransactionSubmitPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LtsTransactionSubmitPostApiResponse>();

                        LtsTransactionSubmitPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/lts/transaction/submit", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLtsTransactionSubmitPostDefaultImplementation(apiResponseLocalVar, ltsTransactionSubmitRequest);

                        Events.ExecuteOnLtsTransactionSubmitPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLtsTransactionSubmitPostDefaultImplementation(e, "/lts/transaction/submit", uriBuilderLocalVar.Path, ltsTransactionSubmitRequest);
                Events.ExecuteOnErrorLtsTransactionSubmitPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LtsTransactionSubmitPostApiResponse"/>
        /// </summary>
        public partial class LtsTransactionSubmitPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, ILtsTransactionSubmitPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LtsTransactionSubmitPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LtsTransactionSubmitPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LtsTransactionSubmitPostApiResponse(ILogger<LtsTransactionSubmitPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.LtsTransactionSubmitResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.LtsTransactionSubmitResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.LtsTransactionSubmitResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.TransactionSubmitErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.TransactionSubmitErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.TransactionSubmitErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.TransactionSubmitErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.TransactionSubmitErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.TransactionSubmitErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
