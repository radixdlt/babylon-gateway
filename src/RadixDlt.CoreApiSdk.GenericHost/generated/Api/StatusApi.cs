/* Copyright 2021 Radix Publishing Ltd incorporated in Jersey (Channel Islands).
 *
 * Licensed under the Radix License, Version 1.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 *
 * radixfoundation.org/licenses/LICENSE-v1
 *
 * The Licensor hereby grants permission for the Canonical version of the Work to be
 * published, distributed and used under or by reference to the Licensor’s trademark
 * Radix ® and use of any unregistered trade names, logos or get-up.
 *
 * The Licensor provides the Work (and each Contributor provides its Contributions) on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
 * including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT,
 * MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Whilst the Work is capable of being deployed, used and adopted (instantiated) to create
 * a distributed ledger it is your responsibility to test and validate the code, together
 * with all logic and performance of that code under all foreseeable scenarios.
 *
 * The Licensor does not make or purport to make and hereby excludes liability for all
 * and any representation, warranty or undertaking in any form whatsoever, whether express
 * or implied, to any entity or person, including any representation, warranty or
 * undertaking, as to the functionality security use, value or other characteristics of
 * any distributed ledger nor in respect the functioning or value of any tokens which may
 * be created stored or transferred using the Work. The Licensor does not warrant that the
 * Work or any use of the Work complies with any law or regulation in any territory where
 * it may be implemented or used or that it will be appropriate for any specific purpose.
 *
 * Neither the licensor nor any current or former employees, officers, directors, partners,
 * trustees, representatives, agents, advisors, contractors, or volunteers of the Licensor
 * shall be liable for any direct or indirect, special, incidental, consequential or other
 * losses of any kind, in tort, contract or otherwise (including but not limited to loss
 * of revenue, income or profits, or loss of use or data, or loss of reputation, or loss
 * of any economic or other opportunity of whatsoever nature or howsoever arising), arising
 * out of or in connection with (without limitation of any use, misuse, of any ledger system
 * or use made or its functionality or any performance or operation of any code or protocol
 * caused by bugs or programming or logic errors or otherwise);
 *
 * A. any offer, purchase, holding, use, sale, exchange or transmission of any
 * cryptographic keys, tokens or assets created, exchanged, stored or arising from any
 * interaction with the Work;
 *
 * B. any failure in a transmission or loss of any token or assets keys or other digital
 * artefacts due to errors in transmission;
 *
 * C. bugs, hacks, logic errors or faults in the Work or any communication;
 *
 * D. system software or apparatus including but not limited to losses caused by errors
 * in holding or transmitting tokens by any third-party;
 *
 * E. breaches or failure of security including hacker attacks, loss or disclosure of
 * password, loss of private key, unauthorised use or misuse of such passwords or keys;
 *
 * F. any losses including loss of anticipated savings or other benefits resulting from
 * use of the Work or any changes to the Work (however implemented).
 *
 * You are solely responsible for; testing, validating and evaluation of all operation
 * logic, functionality, security and appropriateness of using the Work for any commercial
 * or non-commercial purpose and for any reproduction or redistribution by You of the
 * Work. You assume all risks associated with Your use of the Work and the exercise of
 * permissions under this License.
 */

// <auto-generated>
/*
 * Radix Core API - Babylon
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using RadixDlt.CoreApiSdk.GenericHost.Client;
using RadixDlt.CoreApiSdk.GenericHost.Model;
using System.Diagnostics.CodeAnalysis;

namespace RadixDlt.CoreApiSdk.GenericHost.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStatusApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StatusApiEvents Events { get; }

        /// <summary>
        /// Get Network Configuration
        /// </summary>
        /// <remarks>
        /// Returns the network configuration of the network the node is connected to.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusNetworkConfigurationPostApiResponse"/>&gt;</returns>
        Task<IStatusNetworkConfigurationPostApiResponse> StatusNetworkConfigurationPostAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Network Configuration
        /// </summary>
        /// <remarks>
        /// Returns the network configuration of the network the node is connected to.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusNetworkConfigurationPostApiResponse"/>?&gt;</returns>
        Task<IStatusNetworkConfigurationPostApiResponse?> StatusNetworkConfigurationPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Network Status
        /// </summary>
        /// <remarks>
        /// Returns the current state and status of the node&#39;s copy of the ledger.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusNetworkStatusPostApiResponse"/>&gt;</returns>
        Task<IStatusNetworkStatusPostApiResponse> StatusNetworkStatusPostAsync(NetworkStatusRequest networkStatusRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Network Status
        /// </summary>
        /// <remarks>
        /// Returns the current state and status of the node&#39;s copy of the ledger.
        /// </remarks>
        /// <param name="networkStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusNetworkStatusPostApiResponse"/>?&gt;</returns>
        Task<IStatusNetworkStatusPostApiResponse?> StatusNetworkStatusPostOrDefaultAsync(NetworkStatusRequest networkStatusRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Scenarios&#39; results.
        /// </summary>
        /// <remarks>
        /// Get results of test-oriented \&quot;Genesis Scenarios\&quot; executed on this Network.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenariosRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusScenariosPostApiResponse"/>&gt;</returns>
        Task<IStatusScenariosPostApiResponse> StatusScenariosPostAsync(ScenariosRequest scenariosRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Scenarios&#39; results.
        /// </summary>
        /// <remarks>
        /// Get results of test-oriented \&quot;Genesis Scenarios\&quot; executed on this Network.
        /// </remarks>
        /// <param name="scenariosRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusScenariosPostApiResponse"/>?&gt;</returns>
        Task<IStatusScenariosPostApiResponse?> StatusScenariosPostOrDefaultAsync(ScenariosRequest scenariosRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IStatusNetworkConfigurationPostApiResponse"/>
    /// </summary>
    public interface IStatusNetworkConfigurationPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.NetworkConfigurationResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IStatusNetworkStatusPostApiResponse"/>
    /// </summary>
    public interface IStatusNetworkStatusPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.NetworkStatusResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IStatusScenariosPostApiResponse"/>
    /// </summary>
    public interface IStatusScenariosPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.IApiResponse, IOk<RadixDlt.CoreApiSdk.GenericHost.Model.ScenariosResponse?>, IInternalServerError<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StatusApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnStatusNetworkConfigurationPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorStatusNetworkConfigurationPost;

        internal void ExecuteOnStatusNetworkConfigurationPost(StatusApi.StatusNetworkConfigurationPostApiResponse apiResponse)
        {
            OnStatusNetworkConfigurationPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStatusNetworkConfigurationPost(Exception exception)
        {
            OnErrorStatusNetworkConfigurationPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnStatusNetworkStatusPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorStatusNetworkStatusPost;

        internal void ExecuteOnStatusNetworkStatusPost(StatusApi.StatusNetworkStatusPostApiResponse apiResponse)
        {
            OnStatusNetworkStatusPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStatusNetworkStatusPost(Exception exception)
        {
            OnErrorStatusNetworkStatusPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnStatusScenariosPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorStatusScenariosPost;

        internal void ExecuteOnStatusScenariosPost(StatusApi.StatusScenariosPostApiResponse apiResponse)
        {
            OnStatusScenariosPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStatusScenariosPost(Exception exception)
        {
            OnErrorStatusScenariosPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StatusApi : IStatusApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StatusApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StatusApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatusApi(ILogger<StatusApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StatusApiEvents statusApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StatusApi>();
            HttpClient = httpClient;
            Events = statusApiEvents;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterStatusNetworkConfigurationPostDefaultImplementation(IStatusNetworkConfigurationPostApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterStatusNetworkConfigurationPost(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterStatusNetworkConfigurationPost(ref bool suppressDefaultLog, IStatusNetworkConfigurationPostApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorStatusNetworkConfigurationPostDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorStatusNetworkConfigurationPost(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorStatusNetworkConfigurationPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Get Network Configuration Returns the network configuration of the network the node is connected to.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusNetworkConfigurationPostApiResponse"/>&gt;</returns>
        public async Task<IStatusNetworkConfigurationPostApiResponse?> StatusNetworkConfigurationPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StatusNetworkConfigurationPostAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Network Configuration Returns the network configuration of the network the node is connected to.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusNetworkConfigurationPostApiResponse"/>&gt;</returns>
        public async Task<IStatusNetworkConfigurationPostApiResponse> StatusNetworkConfigurationPostAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/status/network-configuration";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<StatusNetworkConfigurationPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StatusNetworkConfigurationPostApiResponse>();

                        StatusNetworkConfigurationPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/status/network-configuration", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStatusNetworkConfigurationPostDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnStatusNetworkConfigurationPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStatusNetworkConfigurationPostDefaultImplementation(e, "/status/network-configuration", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorStatusNetworkConfigurationPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StatusNetworkConfigurationPostApiResponse"/>
        /// </summary>
        public partial class StatusNetworkConfigurationPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, IStatusNetworkConfigurationPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StatusNetworkConfigurationPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StatusNetworkConfigurationPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StatusNetworkConfigurationPostApiResponse(ILogger<StatusNetworkConfigurationPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.NetworkConfigurationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.NetworkConfigurationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.NetworkConfigurationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStatusNetworkStatusPost(NetworkStatusRequest networkStatusRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="networkStatusRequest"></param>
        /// <returns></returns>
        private void ValidateStatusNetworkStatusPost(NetworkStatusRequest networkStatusRequest)
        {
            if (networkStatusRequest == null)
                throw new ArgumentNullException(nameof(networkStatusRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="networkStatusRequest"></param>
        private void AfterStatusNetworkStatusPostDefaultImplementation(IStatusNetworkStatusPostApiResponse apiResponseLocalVar, NetworkStatusRequest networkStatusRequest)
        {
            bool suppressDefaultLog = false;
            AfterStatusNetworkStatusPost(ref suppressDefaultLog, apiResponseLocalVar, networkStatusRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="networkStatusRequest"></param>
        partial void AfterStatusNetworkStatusPost(ref bool suppressDefaultLog, IStatusNetworkStatusPostApiResponse apiResponseLocalVar, NetworkStatusRequest networkStatusRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="networkStatusRequest"></param>
        private void OnErrorStatusNetworkStatusPostDefaultImplementation(Exception exception, string pathFormat, string path, NetworkStatusRequest networkStatusRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorStatusNetworkStatusPost(ref suppressDefaultLog, exception, pathFormat, path, networkStatusRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="networkStatusRequest"></param>
        partial void OnErrorStatusNetworkStatusPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, NetworkStatusRequest networkStatusRequest);

        /// <summary>
        /// Get Network Status Returns the current state and status of the node&#39;s copy of the ledger.
        /// </summary>
        /// <param name="networkStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusNetworkStatusPostApiResponse"/>&gt;</returns>
        public async Task<IStatusNetworkStatusPostApiResponse?> StatusNetworkStatusPostOrDefaultAsync(NetworkStatusRequest networkStatusRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StatusNetworkStatusPostAsync(networkStatusRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Network Status Returns the current state and status of the node&#39;s copy of the ledger.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusNetworkStatusPostApiResponse"/>&gt;</returns>
        public async Task<IStatusNetworkStatusPostApiResponse> StatusNetworkStatusPostAsync(NetworkStatusRequest networkStatusRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStatusNetworkStatusPost(networkStatusRequest);

                FormatStatusNetworkStatusPost(networkStatusRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/status/network-status";

                    httpRequestMessageLocalVar.Content = (networkStatusRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(networkStatusRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<StatusNetworkStatusPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StatusNetworkStatusPostApiResponse>();

                        StatusNetworkStatusPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/status/network-status", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStatusNetworkStatusPostDefaultImplementation(apiResponseLocalVar, networkStatusRequest);

                        Events.ExecuteOnStatusNetworkStatusPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStatusNetworkStatusPostDefaultImplementation(e, "/status/network-status", uriBuilderLocalVar.Path, networkStatusRequest);
                Events.ExecuteOnErrorStatusNetworkStatusPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StatusNetworkStatusPostApiResponse"/>
        /// </summary>
        public partial class StatusNetworkStatusPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, IStatusNetworkStatusPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StatusNetworkStatusPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StatusNetworkStatusPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StatusNetworkStatusPostApiResponse(ILogger<StatusNetworkStatusPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.NetworkStatusResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.NetworkStatusResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.NetworkStatusResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStatusScenariosPost(ScenariosRequest scenariosRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="scenariosRequest"></param>
        /// <returns></returns>
        private void ValidateStatusScenariosPost(ScenariosRequest scenariosRequest)
        {
            if (scenariosRequest == null)
                throw new ArgumentNullException(nameof(scenariosRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="scenariosRequest"></param>
        private void AfterStatusScenariosPostDefaultImplementation(IStatusScenariosPostApiResponse apiResponseLocalVar, ScenariosRequest scenariosRequest)
        {
            bool suppressDefaultLog = false;
            AfterStatusScenariosPost(ref suppressDefaultLog, apiResponseLocalVar, scenariosRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="scenariosRequest"></param>
        partial void AfterStatusScenariosPost(ref bool suppressDefaultLog, IStatusScenariosPostApiResponse apiResponseLocalVar, ScenariosRequest scenariosRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="scenariosRequest"></param>
        private void OnErrorStatusScenariosPostDefaultImplementation(Exception exception, string pathFormat, string path, ScenariosRequest scenariosRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorStatusScenariosPost(ref suppressDefaultLog, exception, pathFormat, path, scenariosRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="scenariosRequest"></param>
        partial void OnErrorStatusScenariosPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, ScenariosRequest scenariosRequest);

        /// <summary>
        /// Get Scenarios&#39; results. Get results of test-oriented \&quot;Genesis Scenarios\&quot; executed on this Network.
        /// </summary>
        /// <param name="scenariosRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusScenariosPostApiResponse"/>&gt;</returns>
        public async Task<IStatusScenariosPostApiResponse?> StatusScenariosPostOrDefaultAsync(ScenariosRequest scenariosRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StatusScenariosPostAsync(scenariosRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Scenarios&#39; results. Get results of test-oriented \&quot;Genesis Scenarios\&quot; executed on this Network.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenariosRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusScenariosPostApiResponse"/>&gt;</returns>
        public async Task<IStatusScenariosPostApiResponse> StatusScenariosPostAsync(ScenariosRequest scenariosRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStatusScenariosPost(scenariosRequest);

                FormatStatusScenariosPost(scenariosRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/status/scenarios";

                    httpRequestMessageLocalVar.Content = (scenariosRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(scenariosRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<StatusScenariosPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StatusScenariosPostApiResponse>();

                        StatusScenariosPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/status/scenarios", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStatusScenariosPostDefaultImplementation(apiResponseLocalVar, scenariosRequest);

                        Events.ExecuteOnStatusScenariosPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStatusScenariosPostDefaultImplementation(e, "/status/scenarios", uriBuilderLocalVar.Path, scenariosRequest);
                Events.ExecuteOnErrorStatusScenariosPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StatusScenariosPostApiResponse"/>
        /// </summary>
        public partial class StatusScenariosPostApiResponse : RadixDlt.CoreApiSdk.GenericHost.Client.ApiResponse, IStatusScenariosPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StatusScenariosPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StatusScenariosPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StatusScenariosPostApiResponse(ILogger<StatusScenariosPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.ScenariosResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.ScenariosResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.ScenariosResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out RadixDlt.CoreApiSdk.GenericHost.Model.BasicErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
