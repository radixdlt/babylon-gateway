/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.GatewayApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.GatewayApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.GatewayApiSdk.Model
{
    /// <summary>
    /// RecentTransactionsRequest
    /// </summary>
    [DataContract(Name = "RecentTransactionsRequest")]
    public partial class RecentTransactionsRequest : IEquatable<RecentTransactionsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecentTransactionsRequest" /> class.
        /// </summary>
        /// <param name="atStateIdentifier">atStateIdentifier.</param>
        /// <param name="fromStateIdentifier">fromStateIdentifier.</param>
        /// <param name="cursor">This cursor allows forward pagination, by providing the cursor from the previous request..</param>
        /// <param name="limit">The page size requested. The maximum value is 30 at present..</param>
        public RecentTransactionsRequest(PartialLedgerStateIdentifier atStateIdentifier = default(PartialLedgerStateIdentifier), PartialLedgerStateIdentifier fromStateIdentifier = default(PartialLedgerStateIdentifier), string cursor = default(string), int limit = default(int))
        {
            this.AtStateIdentifier = atStateIdentifier;
            this.FromStateIdentifier = fromStateIdentifier;
            this.Cursor = cursor;
            this.Limit = limit;
        }

        /// <summary>
        /// Gets or Sets AtStateIdentifier
        /// </summary>
        [DataMember(Name = "at_state_identifier", EmitDefaultValue = true)]
        public PartialLedgerStateIdentifier AtStateIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets FromStateIdentifier
        /// </summary>
        [DataMember(Name = "from_state_identifier", EmitDefaultValue = true)]
        public PartialLedgerStateIdentifier FromStateIdentifier { get; set; }

        /// <summary>
        /// This cursor allows forward pagination, by providing the cursor from the previous request.
        /// </summary>
        /// <value>This cursor allows forward pagination, by providing the cursor from the previous request.</value>
        [DataMember(Name = "cursor", EmitDefaultValue = false)]
        public string Cursor { get; set; }

        /// <summary>
        /// The page size requested. The maximum value is 30 at present.
        /// </summary>
        /// <value>The page size requested. The maximum value is 30 at present.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecentTransactionsRequest {\n");
            sb.Append("  AtStateIdentifier: ").Append(AtStateIdentifier).Append("\n");
            sb.Append("  FromStateIdentifier: ").Append(FromStateIdentifier).Append("\n");
            sb.Append("  Cursor: ").Append(Cursor).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecentTransactionsRequest);
        }

        /// <summary>
        /// Returns true if RecentTransactionsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RecentTransactionsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecentTransactionsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AtStateIdentifier == input.AtStateIdentifier ||
                    (this.AtStateIdentifier != null &&
                    this.AtStateIdentifier.Equals(input.AtStateIdentifier))
                ) && 
                (
                    this.FromStateIdentifier == input.FromStateIdentifier ||
                    (this.FromStateIdentifier != null &&
                    this.FromStateIdentifier.Equals(input.FromStateIdentifier))
                ) && 
                (
                    this.Cursor == input.Cursor ||
                    (this.Cursor != null &&
                    this.Cursor.Equals(input.Cursor))
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AtStateIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.AtStateIdentifier.GetHashCode();
                }
                if (this.FromStateIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.FromStateIdentifier.GetHashCode();
                }
                if (this.Cursor != null)
                {
                    hashCode = (hashCode * 59) + this.Cursor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
