/* Copyright 2021 Radix Publishing Ltd incorporated in Jersey (Channel Islands).
 *
 * Licensed under the Radix License, Version 1.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 *
 * radixfoundation.org/licenses/LICENSE-v1
 *
 * The Licensor hereby grants permission for the Canonical version of the Work to be
 * published, distributed and used under or by reference to the Licensor’s trademark
 * Radix ® and use of any unregistered trade names, logos or get-up.
 *
 * The Licensor provides the Work (and each Contributor provides its Contributions) on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
 * including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT,
 * MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Whilst the Work is capable of being deployed, used and adopted (instantiated) to create
 * a distributed ledger it is your responsibility to test and validate the code, together
 * with all logic and performance of that code under all foreseeable scenarios.
 *
 * The Licensor does not make or purport to make and hereby excludes liability for all
 * and any representation, warranty or undertaking in any form whatsoever, whether express
 * or implied, to any entity or person, including any representation, warranty or
 * undertaking, as to the functionality security use, value or other characteristics of
 * any distributed ledger nor in respect the functioning or value of any tokens which may
 * be created stored or transferred using the Work. The Licensor does not warrant that the
 * Work or any use of the Work complies with any law or regulation in any territory where
 * it may be implemented or used or that it will be appropriate for any specific purpose.
 *
 * Neither the licensor nor any current or former employees, officers, directors, partners,
 * trustees, representatives, agents, advisors, contractors, or volunteers of the Licensor
 * shall be liable for any direct or indirect, special, incidental, consequential or other
 * losses of any kind, in tort, contract or otherwise (including but not limited to loss
 * of revenue, income or profits, or loss of use or data, or loss of reputation, or loss
 * of any economic or other opportunity of whatsoever nature or howsoever arising), arising
 * out of or in connection with (without limitation of any use, misuse, of any ledger system
 * or use made or its functionality or any performance or operation of any code or protocol
 * caused by bugs or programming or logic errors or otherwise);
 *
 * A. any offer, purchase, holding, use, sale, exchange or transmission of any
 * cryptographic keys, tokens or assets created, exchanged, stored or arising from any
 * interaction with the Work;
 *
 * B. any failure in a transmission or loss of any token or assets keys or other digital
 * artefacts due to errors in transmission;
 *
 * C. bugs, hacks, logic errors or faults in the Work or any communication;
 *
 * D. system software or apparatus including but not limited to losses caused by errors
 * in holding or transmitting tokens by any third-party;
 *
 * E. breaches or failure of security including hacker attacks, loss or disclosure of
 * password, loss of private key, unauthorised use or misuse of such passwords or keys;
 *
 * F. any losses including loss of anticipated savings or other benefits resulting from
 * use of the Work or any changes to the Work (however implemented).
 *
 * You are solely responsible for; testing, validating and evaluation of all operation
 * logic, functionality, security and appropriateness of using the Work for any commercial
 * or non-commercial purpose and for any reproduction or redistribution by You of the
 * Work. You assume all risks associated with Your use of the Work and the exercise of
 * permissions under this License.
 */

/*
 * Babylon Core API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using RadixDlt.CoreApiSdk.Client;
using RadixDlt.CoreApiSdk.Model;

namespace RadixDlt.CoreApiSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV0ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Read component data
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateComponentRequest"></param>
        /// <returns>V0StateComponentResponse</returns>
        V0StateComponentResponse V0StateComponentPost(V0StateComponentRequest v0StateComponentRequest);

        /// <summary>
        /// Read component data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateComponentRequest"></param>
        /// <returns>ApiResponse of V0StateComponentResponse</returns>
        ApiResponse<V0StateComponentResponse> V0StateComponentPostWithHttpInfo(V0StateComponentRequest v0StateComponentRequest);
        /// <summary>
        /// Read Current Epoch
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>V0StateEpochResponse</returns>
        V0StateEpochResponse V0StateEpochPost();

        /// <summary>
        /// Read Current Epoch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of V0StateEpochResponse</returns>
        ApiResponse<V0StateEpochResponse> V0StateEpochPostWithHttpInfo();
        /// <summary>
        /// Read non-fungible data
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateNonFungibleRequest"></param>
        /// <returns>V0StateNonFungibleResponse</returns>
        V0StateNonFungibleResponse V0StateNonFungiblePost(V0StateNonFungibleRequest v0StateNonFungibleRequest);

        /// <summary>
        /// Read non-fungible data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateNonFungibleRequest"></param>
        /// <returns>ApiResponse of V0StateNonFungibleResponse</returns>
        ApiResponse<V0StateNonFungibleResponse> V0StateNonFungiblePostWithHttpInfo(V0StateNonFungibleRequest v0StateNonFungibleRequest);
        /// <summary>
        /// Read package data
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StatePackageRequest"></param>
        /// <returns>V0StatePackageResponse</returns>
        V0StatePackageResponse V0StatePackagePost(V0StatePackageRequest v0StatePackageRequest);

        /// <summary>
        /// Read package data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StatePackageRequest"></param>
        /// <returns>ApiResponse of V0StatePackageResponse</returns>
        ApiResponse<V0StatePackageResponse> V0StatePackagePostWithHttpInfo(V0StatePackageRequest v0StatePackageRequest);
        /// <summary>
        /// Read resource data
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateResourceRequest"></param>
        /// <returns>V0StateResourceResponse</returns>
        V0StateResourceResponse V0StateResourcePost(V0StateResourceRequest v0StateResourceRequest);

        /// <summary>
        /// Read resource data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateResourceRequest"></param>
        /// <returns>ApiResponse of V0StateResourceResponse</returns>
        ApiResponse<V0StateResourceResponse> V0StateResourcePostWithHttpInfo(V0StateResourceRequest v0StateResourceRequest);
        /// <summary>
        /// Read Committed Transaction
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0CommittedTransactionRequest"></param>
        /// <returns>V0CommittedTransactionResponse</returns>
        V0CommittedTransactionResponse V0TransactionReceiptPost(V0CommittedTransactionRequest v0CommittedTransactionRequest);

        /// <summary>
        /// Read Committed Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0CommittedTransactionRequest"></param>
        /// <returns>ApiResponse of V0CommittedTransactionResponse</returns>
        ApiResponse<V0CommittedTransactionResponse> V0TransactionReceiptPostWithHttpInfo(V0CommittedTransactionRequest v0CommittedTransactionRequest);
        /// <summary>
        /// Read Transaction Status
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionStatusRequest"></param>
        /// <returns>V0TransactionStatusResponse</returns>
        V0TransactionStatusResponse V0TransactionStatusPost(V0TransactionStatusRequest v0TransactionStatusRequest);

        /// <summary>
        /// Read Transaction Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionStatusRequest"></param>
        /// <returns>ApiResponse of V0TransactionStatusResponse</returns>
        ApiResponse<V0TransactionStatusResponse> V0TransactionStatusPostWithHttpInfo(V0TransactionStatusRequest v0TransactionStatusRequest);
        /// <summary>
        /// Transaction Submit
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionSubmitRequest"></param>
        /// <returns>V0TransactionSubmitResponse</returns>
        V0TransactionSubmitResponse V0TransactionSubmitPost(V0TransactionSubmitRequest v0TransactionSubmitRequest);

        /// <summary>
        /// Transaction Submit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionSubmitRequest"></param>
        /// <returns>ApiResponse of V0TransactionSubmitResponse</returns>
        ApiResponse<V0TransactionSubmitResponse> V0TransactionSubmitPostWithHttpInfo(V0TransactionSubmitRequest v0TransactionSubmitRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV0ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Read component data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateComponentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0StateComponentResponse</returns>
        System.Threading.Tasks.Task<V0StateComponentResponse> V0StateComponentPostAsync(V0StateComponentRequest v0StateComponentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read component data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateComponentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0StateComponentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V0StateComponentResponse>> V0StateComponentPostWithHttpInfoAsync(V0StateComponentRequest v0StateComponentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Current Epoch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0StateEpochResponse</returns>
        System.Threading.Tasks.Task<V0StateEpochResponse> V0StateEpochPostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Current Epoch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0StateEpochResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V0StateEpochResponse>> V0StateEpochPostWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read non-fungible data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateNonFungibleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0StateNonFungibleResponse</returns>
        System.Threading.Tasks.Task<V0StateNonFungibleResponse> V0StateNonFungiblePostAsync(V0StateNonFungibleRequest v0StateNonFungibleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read non-fungible data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateNonFungibleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0StateNonFungibleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V0StateNonFungibleResponse>> V0StateNonFungiblePostWithHttpInfoAsync(V0StateNonFungibleRequest v0StateNonFungibleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read package data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StatePackageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0StatePackageResponse</returns>
        System.Threading.Tasks.Task<V0StatePackageResponse> V0StatePackagePostAsync(V0StatePackageRequest v0StatePackageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read package data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StatePackageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0StatePackageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V0StatePackageResponse>> V0StatePackagePostWithHttpInfoAsync(V0StatePackageRequest v0StatePackageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read resource data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateResourceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0StateResourceResponse</returns>
        System.Threading.Tasks.Task<V0StateResourceResponse> V0StateResourcePostAsync(V0StateResourceRequest v0StateResourceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read resource data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateResourceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0StateResourceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V0StateResourceResponse>> V0StateResourcePostWithHttpInfoAsync(V0StateResourceRequest v0StateResourceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Committed Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0CommittedTransactionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0CommittedTransactionResponse</returns>
        System.Threading.Tasks.Task<V0CommittedTransactionResponse> V0TransactionReceiptPostAsync(V0CommittedTransactionRequest v0CommittedTransactionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Committed Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0CommittedTransactionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0CommittedTransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V0CommittedTransactionResponse>> V0TransactionReceiptPostWithHttpInfoAsync(V0CommittedTransactionRequest v0CommittedTransactionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Transaction Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0TransactionStatusResponse</returns>
        System.Threading.Tasks.Task<V0TransactionStatusResponse> V0TransactionStatusPostAsync(V0TransactionStatusRequest v0TransactionStatusRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Transaction Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0TransactionStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V0TransactionStatusResponse>> V0TransactionStatusPostWithHttpInfoAsync(V0TransactionStatusRequest v0TransactionStatusRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transaction Submit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionSubmitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0TransactionSubmitResponse</returns>
        System.Threading.Tasks.Task<V0TransactionSubmitResponse> V0TransactionSubmitPostAsync(V0TransactionSubmitRequest v0TransactionSubmitRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transaction Submit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionSubmitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0TransactionSubmitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V0TransactionSubmitResponse>> V0TransactionSubmitPostWithHttpInfoAsync(V0TransactionSubmitRequest v0TransactionSubmitRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV0Api : IV0ApiSync, IV0ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class V0Api : IDisposable, IV0Api
    {
        private RadixDlt.CoreApiSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="V0Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public V0Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V0Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public V0Api(string basePath)
        {
            this.Configuration = RadixDlt.CoreApiSdk.Client.Configuration.MergeConfigurations(
                RadixDlt.CoreApiSdk.Client.GlobalConfiguration.Instance,
                new RadixDlt.CoreApiSdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new RadixDlt.CoreApiSdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = RadixDlt.CoreApiSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V0Api"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public V0Api(RadixDlt.CoreApiSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RadixDlt.CoreApiSdk.Client.Configuration.MergeConfigurations(
                RadixDlt.CoreApiSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new RadixDlt.CoreApiSdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = RadixDlt.CoreApiSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V0Api"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public V0Api(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V0Api"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public V0Api(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = RadixDlt.CoreApiSdk.Client.Configuration.MergeConfigurations(
                RadixDlt.CoreApiSdk.Client.GlobalConfiguration.Instance,
                new RadixDlt.CoreApiSdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new RadixDlt.CoreApiSdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = RadixDlt.CoreApiSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V0Api"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public V0Api(HttpClient client, RadixDlt.CoreApiSdk.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = RadixDlt.CoreApiSdk.Client.Configuration.MergeConfigurations(
                RadixDlt.CoreApiSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new RadixDlt.CoreApiSdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = RadixDlt.CoreApiSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V0Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public V0Api(RadixDlt.CoreApiSdk.Client.ISynchronousClient client, RadixDlt.CoreApiSdk.Client.IAsynchronousClient asyncClient, RadixDlt.CoreApiSdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RadixDlt.CoreApiSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public RadixDlt.CoreApiSdk.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RadixDlt.CoreApiSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RadixDlt.CoreApiSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RadixDlt.CoreApiSdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RadixDlt.CoreApiSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Read component data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateComponentRequest"></param>
        /// <returns>V0StateComponentResponse</returns>
        public V0StateComponentResponse V0StateComponentPost(V0StateComponentRequest v0StateComponentRequest)
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateComponentResponse> localVarResponse = V0StateComponentPostWithHttpInfo(v0StateComponentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read component data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateComponentRequest"></param>
        /// <returns>ApiResponse of V0StateComponentResponse</returns>
        public RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateComponentResponse> V0StateComponentPostWithHttpInfo(V0StateComponentRequest v0StateComponentRequest)
        {
            // verify the required parameter 'v0StateComponentRequest' is set
            if (v0StateComponentRequest == null)
                throw new RadixDlt.CoreApiSdk.Client.ApiException(400, "Missing required parameter 'v0StateComponentRequest' when calling V0Api->V0StateComponentPost");

            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v0StateComponentRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V0StateComponentResponse>("/v0/state/component", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0StateComponentPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read component data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateComponentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0StateComponentResponse</returns>
        public async System.Threading.Tasks.Task<V0StateComponentResponse> V0StateComponentPostAsync(V0StateComponentRequest v0StateComponentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateComponentResponse> localVarResponse = await V0StateComponentPostWithHttpInfoAsync(v0StateComponentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read component data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateComponentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0StateComponentResponse)</returns>
        public async System.Threading.Tasks.Task<RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateComponentResponse>> V0StateComponentPostWithHttpInfoAsync(V0StateComponentRequest v0StateComponentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'v0StateComponentRequest' is set
            if (v0StateComponentRequest == null)
                throw new RadixDlt.CoreApiSdk.Client.ApiException(400, "Missing required parameter 'v0StateComponentRequest' when calling V0Api->V0StateComponentPost");


            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v0StateComponentRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<V0StateComponentResponse>("/v0/state/component", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0StateComponentPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Current Epoch 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>V0StateEpochResponse</returns>
        public V0StateEpochResponse V0StateEpochPost()
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateEpochResponse> localVarResponse = V0StateEpochPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Current Epoch 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of V0StateEpochResponse</returns>
        public RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateEpochResponse> V0StateEpochPostWithHttpInfo()
        {
            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<V0StateEpochResponse>("/v0/state/epoch", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0StateEpochPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Current Epoch 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0StateEpochResponse</returns>
        public async System.Threading.Tasks.Task<V0StateEpochResponse> V0StateEpochPostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateEpochResponse> localVarResponse = await V0StateEpochPostWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Current Epoch 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0StateEpochResponse)</returns>
        public async System.Threading.Tasks.Task<RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateEpochResponse>> V0StateEpochPostWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<V0StateEpochResponse>("/v0/state/epoch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0StateEpochPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read non-fungible data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateNonFungibleRequest"></param>
        /// <returns>V0StateNonFungibleResponse</returns>
        public V0StateNonFungibleResponse V0StateNonFungiblePost(V0StateNonFungibleRequest v0StateNonFungibleRequest)
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateNonFungibleResponse> localVarResponse = V0StateNonFungiblePostWithHttpInfo(v0StateNonFungibleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read non-fungible data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateNonFungibleRequest"></param>
        /// <returns>ApiResponse of V0StateNonFungibleResponse</returns>
        public RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateNonFungibleResponse> V0StateNonFungiblePostWithHttpInfo(V0StateNonFungibleRequest v0StateNonFungibleRequest)
        {
            // verify the required parameter 'v0StateNonFungibleRequest' is set
            if (v0StateNonFungibleRequest == null)
                throw new RadixDlt.CoreApiSdk.Client.ApiException(400, "Missing required parameter 'v0StateNonFungibleRequest' when calling V0Api->V0StateNonFungiblePost");

            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v0StateNonFungibleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V0StateNonFungibleResponse>("/v0/state/non-fungible", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0StateNonFungiblePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read non-fungible data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateNonFungibleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0StateNonFungibleResponse</returns>
        public async System.Threading.Tasks.Task<V0StateNonFungibleResponse> V0StateNonFungiblePostAsync(V0StateNonFungibleRequest v0StateNonFungibleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateNonFungibleResponse> localVarResponse = await V0StateNonFungiblePostWithHttpInfoAsync(v0StateNonFungibleRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read non-fungible data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateNonFungibleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0StateNonFungibleResponse)</returns>
        public async System.Threading.Tasks.Task<RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateNonFungibleResponse>> V0StateNonFungiblePostWithHttpInfoAsync(V0StateNonFungibleRequest v0StateNonFungibleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'v0StateNonFungibleRequest' is set
            if (v0StateNonFungibleRequest == null)
                throw new RadixDlt.CoreApiSdk.Client.ApiException(400, "Missing required parameter 'v0StateNonFungibleRequest' when calling V0Api->V0StateNonFungiblePost");


            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v0StateNonFungibleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<V0StateNonFungibleResponse>("/v0/state/non-fungible", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0StateNonFungiblePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read package data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StatePackageRequest"></param>
        /// <returns>V0StatePackageResponse</returns>
        public V0StatePackageResponse V0StatePackagePost(V0StatePackageRequest v0StatePackageRequest)
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0StatePackageResponse> localVarResponse = V0StatePackagePostWithHttpInfo(v0StatePackageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read package data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StatePackageRequest"></param>
        /// <returns>ApiResponse of V0StatePackageResponse</returns>
        public RadixDlt.CoreApiSdk.Client.ApiResponse<V0StatePackageResponse> V0StatePackagePostWithHttpInfo(V0StatePackageRequest v0StatePackageRequest)
        {
            // verify the required parameter 'v0StatePackageRequest' is set
            if (v0StatePackageRequest == null)
                throw new RadixDlt.CoreApiSdk.Client.ApiException(400, "Missing required parameter 'v0StatePackageRequest' when calling V0Api->V0StatePackagePost");

            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v0StatePackageRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V0StatePackageResponse>("/v0/state/package", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0StatePackagePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read package data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StatePackageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0StatePackageResponse</returns>
        public async System.Threading.Tasks.Task<V0StatePackageResponse> V0StatePackagePostAsync(V0StatePackageRequest v0StatePackageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0StatePackageResponse> localVarResponse = await V0StatePackagePostWithHttpInfoAsync(v0StatePackageRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read package data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StatePackageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0StatePackageResponse)</returns>
        public async System.Threading.Tasks.Task<RadixDlt.CoreApiSdk.Client.ApiResponse<V0StatePackageResponse>> V0StatePackagePostWithHttpInfoAsync(V0StatePackageRequest v0StatePackageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'v0StatePackageRequest' is set
            if (v0StatePackageRequest == null)
                throw new RadixDlt.CoreApiSdk.Client.ApiException(400, "Missing required parameter 'v0StatePackageRequest' when calling V0Api->V0StatePackagePost");


            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v0StatePackageRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<V0StatePackageResponse>("/v0/state/package", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0StatePackagePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read resource data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateResourceRequest"></param>
        /// <returns>V0StateResourceResponse</returns>
        public V0StateResourceResponse V0StateResourcePost(V0StateResourceRequest v0StateResourceRequest)
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateResourceResponse> localVarResponse = V0StateResourcePostWithHttpInfo(v0StateResourceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read resource data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateResourceRequest"></param>
        /// <returns>ApiResponse of V0StateResourceResponse</returns>
        public RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateResourceResponse> V0StateResourcePostWithHttpInfo(V0StateResourceRequest v0StateResourceRequest)
        {
            // verify the required parameter 'v0StateResourceRequest' is set
            if (v0StateResourceRequest == null)
                throw new RadixDlt.CoreApiSdk.Client.ApiException(400, "Missing required parameter 'v0StateResourceRequest' when calling V0Api->V0StateResourcePost");

            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v0StateResourceRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V0StateResourceResponse>("/v0/state/resource", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0StateResourcePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read resource data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateResourceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0StateResourceResponse</returns>
        public async System.Threading.Tasks.Task<V0StateResourceResponse> V0StateResourcePostAsync(V0StateResourceRequest v0StateResourceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateResourceResponse> localVarResponse = await V0StateResourcePostWithHttpInfoAsync(v0StateResourceRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read resource data 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0StateResourceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0StateResourceResponse)</returns>
        public async System.Threading.Tasks.Task<RadixDlt.CoreApiSdk.Client.ApiResponse<V0StateResourceResponse>> V0StateResourcePostWithHttpInfoAsync(V0StateResourceRequest v0StateResourceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'v0StateResourceRequest' is set
            if (v0StateResourceRequest == null)
                throw new RadixDlt.CoreApiSdk.Client.ApiException(400, "Missing required parameter 'v0StateResourceRequest' when calling V0Api->V0StateResourcePost");


            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v0StateResourceRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<V0StateResourceResponse>("/v0/state/resource", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0StateResourcePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Committed Transaction 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0CommittedTransactionRequest"></param>
        /// <returns>V0CommittedTransactionResponse</returns>
        public V0CommittedTransactionResponse V0TransactionReceiptPost(V0CommittedTransactionRequest v0CommittedTransactionRequest)
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0CommittedTransactionResponse> localVarResponse = V0TransactionReceiptPostWithHttpInfo(v0CommittedTransactionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Committed Transaction 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0CommittedTransactionRequest"></param>
        /// <returns>ApiResponse of V0CommittedTransactionResponse</returns>
        public RadixDlt.CoreApiSdk.Client.ApiResponse<V0CommittedTransactionResponse> V0TransactionReceiptPostWithHttpInfo(V0CommittedTransactionRequest v0CommittedTransactionRequest)
        {
            // verify the required parameter 'v0CommittedTransactionRequest' is set
            if (v0CommittedTransactionRequest == null)
                throw new RadixDlt.CoreApiSdk.Client.ApiException(400, "Missing required parameter 'v0CommittedTransactionRequest' when calling V0Api->V0TransactionReceiptPost");

            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v0CommittedTransactionRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V0CommittedTransactionResponse>("/v0/transaction/receipt", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0TransactionReceiptPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Committed Transaction 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0CommittedTransactionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0CommittedTransactionResponse</returns>
        public async System.Threading.Tasks.Task<V0CommittedTransactionResponse> V0TransactionReceiptPostAsync(V0CommittedTransactionRequest v0CommittedTransactionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0CommittedTransactionResponse> localVarResponse = await V0TransactionReceiptPostWithHttpInfoAsync(v0CommittedTransactionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Committed Transaction 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0CommittedTransactionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0CommittedTransactionResponse)</returns>
        public async System.Threading.Tasks.Task<RadixDlt.CoreApiSdk.Client.ApiResponse<V0CommittedTransactionResponse>> V0TransactionReceiptPostWithHttpInfoAsync(V0CommittedTransactionRequest v0CommittedTransactionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'v0CommittedTransactionRequest' is set
            if (v0CommittedTransactionRequest == null)
                throw new RadixDlt.CoreApiSdk.Client.ApiException(400, "Missing required parameter 'v0CommittedTransactionRequest' when calling V0Api->V0TransactionReceiptPost");


            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v0CommittedTransactionRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<V0CommittedTransactionResponse>("/v0/transaction/receipt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0TransactionReceiptPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Transaction Status 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionStatusRequest"></param>
        /// <returns>V0TransactionStatusResponse</returns>
        public V0TransactionStatusResponse V0TransactionStatusPost(V0TransactionStatusRequest v0TransactionStatusRequest)
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0TransactionStatusResponse> localVarResponse = V0TransactionStatusPostWithHttpInfo(v0TransactionStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Transaction Status 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionStatusRequest"></param>
        /// <returns>ApiResponse of V0TransactionStatusResponse</returns>
        public RadixDlt.CoreApiSdk.Client.ApiResponse<V0TransactionStatusResponse> V0TransactionStatusPostWithHttpInfo(V0TransactionStatusRequest v0TransactionStatusRequest)
        {
            // verify the required parameter 'v0TransactionStatusRequest' is set
            if (v0TransactionStatusRequest == null)
                throw new RadixDlt.CoreApiSdk.Client.ApiException(400, "Missing required parameter 'v0TransactionStatusRequest' when calling V0Api->V0TransactionStatusPost");

            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v0TransactionStatusRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V0TransactionStatusResponse>("/v0/transaction/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0TransactionStatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Transaction Status 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0TransactionStatusResponse</returns>
        public async System.Threading.Tasks.Task<V0TransactionStatusResponse> V0TransactionStatusPostAsync(V0TransactionStatusRequest v0TransactionStatusRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0TransactionStatusResponse> localVarResponse = await V0TransactionStatusPostWithHttpInfoAsync(v0TransactionStatusRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Transaction Status 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0TransactionStatusResponse)</returns>
        public async System.Threading.Tasks.Task<RadixDlt.CoreApiSdk.Client.ApiResponse<V0TransactionStatusResponse>> V0TransactionStatusPostWithHttpInfoAsync(V0TransactionStatusRequest v0TransactionStatusRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'v0TransactionStatusRequest' is set
            if (v0TransactionStatusRequest == null)
                throw new RadixDlt.CoreApiSdk.Client.ApiException(400, "Missing required parameter 'v0TransactionStatusRequest' when calling V0Api->V0TransactionStatusPost");


            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v0TransactionStatusRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<V0TransactionStatusResponse>("/v0/transaction/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0TransactionStatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transaction Submit 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionSubmitRequest"></param>
        /// <returns>V0TransactionSubmitResponse</returns>
        public V0TransactionSubmitResponse V0TransactionSubmitPost(V0TransactionSubmitRequest v0TransactionSubmitRequest)
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0TransactionSubmitResponse> localVarResponse = V0TransactionSubmitPostWithHttpInfo(v0TransactionSubmitRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transaction Submit 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionSubmitRequest"></param>
        /// <returns>ApiResponse of V0TransactionSubmitResponse</returns>
        public RadixDlt.CoreApiSdk.Client.ApiResponse<V0TransactionSubmitResponse> V0TransactionSubmitPostWithHttpInfo(V0TransactionSubmitRequest v0TransactionSubmitRequest)
        {
            // verify the required parameter 'v0TransactionSubmitRequest' is set
            if (v0TransactionSubmitRequest == null)
                throw new RadixDlt.CoreApiSdk.Client.ApiException(400, "Missing required parameter 'v0TransactionSubmitRequest' when calling V0Api->V0TransactionSubmitPost");

            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v0TransactionSubmitRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V0TransactionSubmitResponse>("/v0/transaction/submit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0TransactionSubmitPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transaction Submit 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionSubmitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V0TransactionSubmitResponse</returns>
        public async System.Threading.Tasks.Task<V0TransactionSubmitResponse> V0TransactionSubmitPostAsync(V0TransactionSubmitRequest v0TransactionSubmitRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixDlt.CoreApiSdk.Client.ApiResponse<V0TransactionSubmitResponse> localVarResponse = await V0TransactionSubmitPostWithHttpInfoAsync(v0TransactionSubmitRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transaction Submit 
        /// </summary>
        /// <exception cref="RadixDlt.CoreApiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v0TransactionSubmitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V0TransactionSubmitResponse)</returns>
        public async System.Threading.Tasks.Task<RadixDlt.CoreApiSdk.Client.ApiResponse<V0TransactionSubmitResponse>> V0TransactionSubmitPostWithHttpInfoAsync(V0TransactionSubmitRequest v0TransactionSubmitRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'v0TransactionSubmitRequest' is set
            if (v0TransactionSubmitRequest == null)
                throw new RadixDlt.CoreApiSdk.Client.ApiException(400, "Missing required parameter 'v0TransactionSubmitRequest' when calling V0Api->V0TransactionSubmitPost");


            RadixDlt.CoreApiSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.CoreApiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.CoreApiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v0TransactionSubmitRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<V0TransactionSubmitResponse>("/v0/transaction/submit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V0TransactionSubmitPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
