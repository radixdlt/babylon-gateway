/*
 * Radix Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = RadixDlt.CoreApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.CoreApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.CoreApiSdk.Model
{
    /// <summary>
    /// Transaction state updates (only present if status is Succeeded or Failed)
    /// </summary>
    [DataContract(Name = "StateUpdates")]
    public partial class StateUpdates : IEquatable<StateUpdates>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StateUpdates" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StateUpdates() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StateUpdates" /> class.
        /// </summary>
        /// <param name="deletedPartitions">deletedPartitions (required).</param>
        /// <param name="createdSubstates">createdSubstates (required).</param>
        /// <param name="updatedSubstates">updatedSubstates (required).</param>
        /// <param name="deletedSubstates">deletedSubstates (required).</param>
        /// <param name="newGlobalEntities">newGlobalEntities (required).</param>
        public StateUpdates(List<PartitionId> deletedPartitions = default(List<PartitionId>), List<CreatedSubstate> createdSubstates = default(List<CreatedSubstate>), List<UpdatedSubstate> updatedSubstates = default(List<UpdatedSubstate>), List<DeletedSubstate> deletedSubstates = default(List<DeletedSubstate>), List<EntityReference> newGlobalEntities = default(List<EntityReference>))
        {
            // to ensure "deletedPartitions" is required (not null)
            if (deletedPartitions == null)
            {
                throw new ArgumentNullException("deletedPartitions is a required property for StateUpdates and cannot be null");
            }
            this.DeletedPartitions = deletedPartitions;
            // to ensure "createdSubstates" is required (not null)
            if (createdSubstates == null)
            {
                throw new ArgumentNullException("createdSubstates is a required property for StateUpdates and cannot be null");
            }
            this.CreatedSubstates = createdSubstates;
            // to ensure "updatedSubstates" is required (not null)
            if (updatedSubstates == null)
            {
                throw new ArgumentNullException("updatedSubstates is a required property for StateUpdates and cannot be null");
            }
            this.UpdatedSubstates = updatedSubstates;
            // to ensure "deletedSubstates" is required (not null)
            if (deletedSubstates == null)
            {
                throw new ArgumentNullException("deletedSubstates is a required property for StateUpdates and cannot be null");
            }
            this.DeletedSubstates = deletedSubstates;
            // to ensure "newGlobalEntities" is required (not null)
            if (newGlobalEntities == null)
            {
                throw new ArgumentNullException("newGlobalEntities is a required property for StateUpdates and cannot be null");
            }
            this.NewGlobalEntities = newGlobalEntities;
        }

        /// <summary>
        /// Gets or Sets DeletedPartitions
        /// </summary>
        [DataMember(Name = "deleted_partitions", IsRequired = true, EmitDefaultValue = true)]
        public List<PartitionId> DeletedPartitions { get; set; }

        /// <summary>
        /// Gets or Sets CreatedSubstates
        /// </summary>
        [DataMember(Name = "created_substates", IsRequired = true, EmitDefaultValue = true)]
        public List<CreatedSubstate> CreatedSubstates { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedSubstates
        /// </summary>
        [DataMember(Name = "updated_substates", IsRequired = true, EmitDefaultValue = true)]
        public List<UpdatedSubstate> UpdatedSubstates { get; set; }

        /// <summary>
        /// Gets or Sets DeletedSubstates
        /// </summary>
        [DataMember(Name = "deleted_substates", IsRequired = true, EmitDefaultValue = true)]
        public List<DeletedSubstate> DeletedSubstates { get; set; }

        /// <summary>
        /// Gets or Sets NewGlobalEntities
        /// </summary>
        [DataMember(Name = "new_global_entities", IsRequired = true, EmitDefaultValue = true)]
        public List<EntityReference> NewGlobalEntities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StateUpdates {\n");
            sb.Append("  DeletedPartitions: ").Append(DeletedPartitions).Append("\n");
            sb.Append("  CreatedSubstates: ").Append(CreatedSubstates).Append("\n");
            sb.Append("  UpdatedSubstates: ").Append(UpdatedSubstates).Append("\n");
            sb.Append("  DeletedSubstates: ").Append(DeletedSubstates).Append("\n");
            sb.Append("  NewGlobalEntities: ").Append(NewGlobalEntities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StateUpdates);
        }

        /// <summary>
        /// Returns true if StateUpdates instances are equal
        /// </summary>
        /// <param name="input">Instance of StateUpdates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StateUpdates input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DeletedPartitions == input.DeletedPartitions ||
                    this.DeletedPartitions != null &&
                    input.DeletedPartitions != null &&
                    this.DeletedPartitions.SequenceEqual(input.DeletedPartitions)
                ) && 
                (
                    this.CreatedSubstates == input.CreatedSubstates ||
                    this.CreatedSubstates != null &&
                    input.CreatedSubstates != null &&
                    this.CreatedSubstates.SequenceEqual(input.CreatedSubstates)
                ) && 
                (
                    this.UpdatedSubstates == input.UpdatedSubstates ||
                    this.UpdatedSubstates != null &&
                    input.UpdatedSubstates != null &&
                    this.UpdatedSubstates.SequenceEqual(input.UpdatedSubstates)
                ) && 
                (
                    this.DeletedSubstates == input.DeletedSubstates ||
                    this.DeletedSubstates != null &&
                    input.DeletedSubstates != null &&
                    this.DeletedSubstates.SequenceEqual(input.DeletedSubstates)
                ) && 
                (
                    this.NewGlobalEntities == input.NewGlobalEntities ||
                    this.NewGlobalEntities != null &&
                    input.NewGlobalEntities != null &&
                    this.NewGlobalEntities.SequenceEqual(input.NewGlobalEntities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeletedPartitions != null)
                {
                    hashCode = (hashCode * 59) + this.DeletedPartitions.GetHashCode();
                }
                if (this.CreatedSubstates != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedSubstates.GetHashCode();
                }
                if (this.UpdatedSubstates != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedSubstates.GetHashCode();
                }
                if (this.DeletedSubstates != null)
                {
                    hashCode = (hashCode * 59) + this.DeletedSubstates.GetHashCode();
                }
                if (this.NewGlobalEntities != null)
                {
                    hashCode = (hashCode * 59) + this.NewGlobalEntities.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
