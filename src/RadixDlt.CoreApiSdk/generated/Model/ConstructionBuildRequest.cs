/*
 * Radix Core API
 *
 * This API provides endpoints from a node for integration with the Radix ledger.  # Overview  > WARNING > > The Core API is __NOT__ intended to be available on the public web. It is > designed to be accessed in a private network.  The Core API is separated into three: * The **Data API** is a read-only api which allows you to view and sync to the state of the ledger. * The **Construction API** allows you to construct and submit a transaction to the network. * The **Key API** allows you to use the keys managed by the node to sign transactions.  The Core API is a low level API primarily designed for network integrations such as exchanges, ledger analytics providers, or hosted ledger data dashboards where detailed ledger data is required and the integrator can be expected to run their node to provide the Core API for their own consumption.  For a higher level API, see the [Gateway API](https://redocly.github.io/redoc/?url=https://raw.githubusercontent.com/radixdlt/radixdlt-network-gateway/main/generation/gateway-api-spec.yaml).  For node monitoring, see the [System API](https://redocly.github.io/redoc/?url=https://raw.githubusercontent.com/radixdlt/radixdlt/main/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/system/api.yaml).  ## Rosetta  The Data API and Construction API is inspired from [Rosetta API](https://www.rosetta-api.org/) most notably:   * Use of a JSON-Based RPC protocol on top of HTTP Post requests   * Use of Operations, Amounts, and Identifiers as universal language to   express asset movement for reading and writing  There are a few notable exceptions to note:   * Fetching of ledger data is through a Transaction stream rather than a   Block stream   * Use of `EntityIdentifier` rather than `AccountIdentifier`   * Use of `OperationGroup` rather than `related_operations` to express related   operations   * Construction endpoints perform coin selection on behalf of the caller.   This has the unfortunate effect of not being able to support high frequency   transactions from a single account. This will be addressed in future updates.   * Construction endpoints are online rather than offline as required by Rosetta  Future versions of the api will aim towards a fully-compliant Rosetta API.  ## Enabling Endpoints  All endpoints are enabled when running a node with the exception of two endpoints, each of which need to be manually configured to access: * `/transactions` endpoint must be enabled with configuration `api.transaction.enable=true`. This is because the transactions endpoint requires additional database storage which may not be needed for users who aren't using this endpoint * `/key/sign` endpoint must be enable with configuration `api.sign.enable=true`. This is a potentially dangerous endpoint if accessible publicly so it must be enabled manually.  ## Client Code Generation  We have found success with generating clients against the [api.yaml specification](https://raw.githubusercontent.com/radixdlt/radixdlt/main/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/api.yaml). See https://openapi-generator.tech/ for more details.  The OpenAPI generator only supports openapi version 3.0.0 at present, but you can change 3.1.0 to 3.0.0 in the first line of the spec without affecting generation.  # Data API Flow  The Data API can be used to synchronize a full or partial view of the ledger, transaction by transaction.  ![Data API Flow](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/update-documentation/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/data_sequence_flow.png)  # Construction API Flow  The Construction API can be used to construct and submit transactions to the network.  ![Construction API Flow](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/open-api/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/construction_sequence_flow.png)  Unlike the Rosetta Construction API [specification](https://www.rosetta-api.org/docs/construction_api_introduction.html), this Construction API selects UTXOs on behalf of the caller. This has the unfortunate side effect of not being able to support high frequency transactions from a single account due to UTXO conflicts. This will be addressed in a future release. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.CoreApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.CoreApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.CoreApiSdk.Model
{
    /// <summary>
    /// ConstructionBuildRequest
    /// </summary>
    [DataContract(Name = "ConstructionBuildRequest")]
    public partial class ConstructionBuildRequest : IEquatable<ConstructionBuildRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstructionBuildRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConstructionBuildRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstructionBuildRequest" /> class.
        /// </summary>
        /// <param name="networkIdentifier">networkIdentifier (required).</param>
        /// <param name="operationGroups">Operation groups which describe the intent of the request. (required).</param>
        /// <param name="feePayer">feePayer (required).</param>
        /// <param name="message">An optional message payload encoded in hex with the Radix message encoding scheme..</param>
        /// <param name="disableResourceAllocateAndDestroy">Disallow minting and burning of tokens (except for fees). Useful for verification of transactions without needing to fetch additional substate data, such as when verifying transactions in an offline environment..</param>
        public ConstructionBuildRequest(NetworkIdentifier networkIdentifier = default(NetworkIdentifier), List<OperationGroup> operationGroups = default(List<OperationGroup>), EntityIdentifier feePayer = default(EntityIdentifier), string message = default(string), bool disableResourceAllocateAndDestroy = default(bool))
        {
            // to ensure "networkIdentifier" is required (not null)
            if (networkIdentifier == null)
            {
                throw new ArgumentNullException("networkIdentifier is a required property for ConstructionBuildRequest and cannot be null");
            }
            this.NetworkIdentifier = networkIdentifier;
            // to ensure "operationGroups" is required (not null)
            if (operationGroups == null)
            {
                throw new ArgumentNullException("operationGroups is a required property for ConstructionBuildRequest and cannot be null");
            }
            this.OperationGroups = operationGroups;
            // to ensure "feePayer" is required (not null)
            if (feePayer == null)
            {
                throw new ArgumentNullException("feePayer is a required property for ConstructionBuildRequest and cannot be null");
            }
            this.FeePayer = feePayer;
            this.Message = message;
            this.DisableResourceAllocateAndDestroy = disableResourceAllocateAndDestroy;
        }

        /// <summary>
        /// Gets or Sets NetworkIdentifier
        /// </summary>
        [DataMember(Name = "network_identifier", IsRequired = true, EmitDefaultValue = true)]
        public NetworkIdentifier NetworkIdentifier { get; set; }

        /// <summary>
        /// Operation groups which describe the intent of the request.
        /// </summary>
        /// <value>Operation groups which describe the intent of the request.</value>
        [DataMember(Name = "operation_groups", IsRequired = true, EmitDefaultValue = true)]
        public List<OperationGroup> OperationGroups { get; set; }

        /// <summary>
        /// Gets or Sets FeePayer
        /// </summary>
        [DataMember(Name = "fee_payer", IsRequired = true, EmitDefaultValue = true)]
        public EntityIdentifier FeePayer { get; set; }

        /// <summary>
        /// An optional message payload encoded in hex with the Radix message encoding scheme.
        /// </summary>
        /// <value>An optional message payload encoded in hex with the Radix message encoding scheme.</value>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Disallow minting and burning of tokens (except for fees). Useful for verification of transactions without needing to fetch additional substate data, such as when verifying transactions in an offline environment.
        /// </summary>
        /// <value>Disallow minting and burning of tokens (except for fees). Useful for verification of transactions without needing to fetch additional substate data, such as when verifying transactions in an offline environment.</value>
        [DataMember(Name = "disable_resource_allocate_and_destroy", EmitDefaultValue = true)]
        public bool DisableResourceAllocateAndDestroy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConstructionBuildRequest {\n");
            sb.Append("  NetworkIdentifier: ").Append(NetworkIdentifier).Append("\n");
            sb.Append("  OperationGroups: ").Append(OperationGroups).Append("\n");
            sb.Append("  FeePayer: ").Append(FeePayer).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  DisableResourceAllocateAndDestroy: ").Append(DisableResourceAllocateAndDestroy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConstructionBuildRequest);
        }

        /// <summary>
        /// Returns true if ConstructionBuildRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ConstructionBuildRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstructionBuildRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NetworkIdentifier == input.NetworkIdentifier ||
                    (this.NetworkIdentifier != null &&
                    this.NetworkIdentifier.Equals(input.NetworkIdentifier))
                ) && 
                (
                    this.OperationGroups == input.OperationGroups ||
                    this.OperationGroups != null &&
                    input.OperationGroups != null &&
                    this.OperationGroups.SequenceEqual(input.OperationGroups)
                ) && 
                (
                    this.FeePayer == input.FeePayer ||
                    (this.FeePayer != null &&
                    this.FeePayer.Equals(input.FeePayer))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.DisableResourceAllocateAndDestroy == input.DisableResourceAllocateAndDestroy ||
                    this.DisableResourceAllocateAndDestroy.Equals(input.DisableResourceAllocateAndDestroy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NetworkIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.NetworkIdentifier.GetHashCode();
                }
                if (this.OperationGroups != null)
                {
                    hashCode = (hashCode * 59) + this.OperationGroups.GetHashCode();
                }
                if (this.FeePayer != null)
                {
                    hashCode = (hashCode * 59) + this.FeePayer.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisableResourceAllocateAndDestroy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
