/*
 * Radix Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = RadixDlt.CoreApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.CoreApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.CoreApiSdk.Model
{
    /// <summary>
    /// MempoolTransactionResponse
    /// </summary>
    [DataContract(Name = "MempoolTransactionResponse")]
    public partial class MempoolTransactionResponse : IEquatable<MempoolTransactionResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MempoolTransactionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MempoolTransactionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MempoolTransactionResponse" /> class.
        /// </summary>
        /// <param name="count">An integer giving the total count of payload hashes checked in the returned response. (required).</param>
        /// <param name="payloads">An array containing pairs of payload hash (query) and payload hex or error (response). Note that this response is bounded - this means it is not guaranteed all queries will be processed. Please query missing payload hashes again.  (required).</param>
        public MempoolTransactionResponse(int count = default(int), List<MempoolTransactionResponsePayloadsInner> payloads = default(List<MempoolTransactionResponsePayloadsInner>))
        {
            this.Count = count;
            // to ensure "payloads" is required (not null)
            if (payloads == null)
            {
                throw new ArgumentNullException("payloads is a required property for MempoolTransactionResponse and cannot be null");
            }
            this.Payloads = payloads;
        }

        /// <summary>
        /// An integer giving the total count of payload hashes checked in the returned response.
        /// </summary>
        /// <value>An integer giving the total count of payload hashes checked in the returned response.</value>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public int Count { get; set; }

        /// <summary>
        /// An array containing pairs of payload hash (query) and payload hex or error (response). Note that this response is bounded - this means it is not guaranteed all queries will be processed. Please query missing payload hashes again. 
        /// </summary>
        /// <value>An array containing pairs of payload hash (query) and payload hex or error (response). Note that this response is bounded - this means it is not guaranteed all queries will be processed. Please query missing payload hashes again. </value>
        [DataMember(Name = "payloads", IsRequired = true, EmitDefaultValue = true)]
        public List<MempoolTransactionResponsePayloadsInner> Payloads { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MempoolTransactionResponse {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Payloads: ").Append(Payloads).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MempoolTransactionResponse);
        }

        /// <summary>
        /// Returns true if MempoolTransactionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MempoolTransactionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MempoolTransactionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Payloads == input.Payloads ||
                    this.Payloads != null &&
                    input.Payloads != null &&
                    this.Payloads.SequenceEqual(input.Payloads)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Payloads != null)
                {
                    hashCode = (hashCode * 59) + this.Payloads.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
