/*
 * Radix Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = RadixDlt.CoreApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.CoreApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.CoreApiSdk.Model
{
    /// <summary>
    /// LtsTransactionStatusResponse
    /// </summary>
    [DataContract(Name = "LtsTransactionStatusResponse")]
    public partial class LtsTransactionStatusResponse : IEquatable<LtsTransactionStatusResponse>
    {

        /// <summary>
        /// Gets or Sets IntentStatus
        /// </summary>
        [DataMember(Name = "intent_status", IsRequired = true, EmitDefaultValue = true)]
        public LtsTransactionIntentStatus IntentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LtsTransactionStatusResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LtsTransactionStatusResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LtsTransactionStatusResponse" /> class.
        /// </summary>
        /// <param name="intentStatus">intentStatus (required).</param>
        /// <param name="statusDescription">An explanation as to why the intent status is resolved as it is.  (required).</param>
        /// <param name="committedStateVersion">committedStateVersion.</param>
        /// <param name="invalidFromEpoch">An integer between &#x60;0&#x60; and &#x60;10^10&#x60;, marking the epoch from which the transaction will no longer be valid, and be permanently rejected. Only present if the intent status is InMempool or Unknown and we know about a payload. .</param>
        /// <param name="knownPayloads">knownPayloads (required).</param>
        public LtsTransactionStatusResponse(LtsTransactionIntentStatus intentStatus = default(LtsTransactionIntentStatus), string statusDescription = default(string), long committedStateVersion = default(long), long? invalidFromEpoch = default(long?), List<LtsTransactionPayloadDetails> knownPayloads = default(List<LtsTransactionPayloadDetails>))
        {
            this.IntentStatus = intentStatus;
            // to ensure "statusDescription" is required (not null)
            if (statusDescription == null)
            {
                throw new ArgumentNullException("statusDescription is a required property for LtsTransactionStatusResponse and cannot be null");
            }
            this.StatusDescription = statusDescription;
            // to ensure "knownPayloads" is required (not null)
            if (knownPayloads == null)
            {
                throw new ArgumentNullException("knownPayloads is a required property for LtsTransactionStatusResponse and cannot be null");
            }
            this.KnownPayloads = knownPayloads;
            this.CommittedStateVersion = committedStateVersion;
            this.InvalidFromEpoch = invalidFromEpoch;
        }

        /// <summary>
        /// An explanation as to why the intent status is resolved as it is. 
        /// </summary>
        /// <value>An explanation as to why the intent status is resolved as it is. </value>
        [DataMember(Name = "status_description", IsRequired = true, EmitDefaultValue = true)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Gets or Sets CommittedStateVersion
        /// </summary>
        [DataMember(Name = "committed_state_version", EmitDefaultValue = true)]
        public long CommittedStateVersion { get; set; }

        /// <summary>
        /// An integer between &#x60;0&#x60; and &#x60;10^10&#x60;, marking the epoch from which the transaction will no longer be valid, and be permanently rejected. Only present if the intent status is InMempool or Unknown and we know about a payload. 
        /// </summary>
        /// <value>An integer between &#x60;0&#x60; and &#x60;10^10&#x60;, marking the epoch from which the transaction will no longer be valid, and be permanently rejected. Only present if the intent status is InMempool or Unknown and we know about a payload. </value>
        [DataMember(Name = "invalid_from_epoch", EmitDefaultValue = false)]
        public long? InvalidFromEpoch { get; set; }

        /// <summary>
        /// Gets or Sets KnownPayloads
        /// </summary>
        [DataMember(Name = "known_payloads", IsRequired = true, EmitDefaultValue = true)]
        public List<LtsTransactionPayloadDetails> KnownPayloads { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LtsTransactionStatusResponse {\n");
            sb.Append("  IntentStatus: ").Append(IntentStatus).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  CommittedStateVersion: ").Append(CommittedStateVersion).Append("\n");
            sb.Append("  InvalidFromEpoch: ").Append(InvalidFromEpoch).Append("\n");
            sb.Append("  KnownPayloads: ").Append(KnownPayloads).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LtsTransactionStatusResponse);
        }

        /// <summary>
        /// Returns true if LtsTransactionStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LtsTransactionStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LtsTransactionStatusResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IntentStatus == input.IntentStatus ||
                    this.IntentStatus.Equals(input.IntentStatus)
                ) && 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                ) && 
                (
                    this.CommittedStateVersion == input.CommittedStateVersion ||
                    this.CommittedStateVersion.Equals(input.CommittedStateVersion)
                ) && 
                (
                    this.InvalidFromEpoch == input.InvalidFromEpoch ||
                    (this.InvalidFromEpoch != null &&
                    this.InvalidFromEpoch.Equals(input.InvalidFromEpoch))
                ) && 
                (
                    this.KnownPayloads == input.KnownPayloads ||
                    this.KnownPayloads != null &&
                    input.KnownPayloads != null &&
                    this.KnownPayloads.SequenceEqual(input.KnownPayloads)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IntentStatus.GetHashCode();
                if (this.StatusDescription != null)
                {
                    hashCode = (hashCode * 59) + this.StatusDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CommittedStateVersion.GetHashCode();
                if (this.InvalidFromEpoch != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidFromEpoch.GetHashCode();
                }
                if (this.KnownPayloads != null)
                {
                    hashCode = (hashCode * 59) + this.KnownPayloads.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
