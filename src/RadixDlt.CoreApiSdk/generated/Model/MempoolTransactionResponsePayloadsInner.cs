/*
 * Radix Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = RadixDlt.CoreApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.CoreApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.CoreApiSdk.Model
{
    /// <summary>
    /// MempoolTransactionResponsePayloadsInner
    /// </summary>
    [DataContract(Name = "MempoolTransactionResponse_payloads_inner")]
    public partial class MempoolTransactionResponsePayloadsInner : IEquatable<MempoolTransactionResponsePayloadsInner>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MempoolTransactionResponsePayloadsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MempoolTransactionResponsePayloadsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MempoolTransactionResponsePayloadsInner" /> class.
        /// </summary>
        /// <param name="hash">The hex-encoded notarized transaction hash for a user transaction. This hash identifies the full submittable notarized transaction - ie the signed intent, plus the notary signature.  (required).</param>
        /// <param name="hashBech32m">The Bech32m-encoded human readable &#x60;NotarizedTransactionHash&#x60;. (required).</param>
        /// <param name="hex">The hex-encoded full notarized transaction payload - returned only if found in mempool..</param>
        /// <param name="error">Error message why &#x60;hex&#x60; field is missing: the transaction was not found in the mempool or the provided hash is invalid. .</param>
        public MempoolTransactionResponsePayloadsInner(string hash = default(string), string hashBech32m = default(string), string hex = default(string), string error = default(string))
        {
            // to ensure "hash" is required (not null)
            if (hash == null)
            {
                throw new ArgumentNullException("hash is a required property for MempoolTransactionResponsePayloadsInner and cannot be null");
            }
            this.Hash = hash;
            // to ensure "hashBech32m" is required (not null)
            if (hashBech32m == null)
            {
                throw new ArgumentNullException("hashBech32m is a required property for MempoolTransactionResponsePayloadsInner and cannot be null");
            }
            this.HashBech32m = hashBech32m;
            this.Hex = hex;
            this.Error = error;
        }

        /// <summary>
        /// The hex-encoded notarized transaction hash for a user transaction. This hash identifies the full submittable notarized transaction - ie the signed intent, plus the notary signature. 
        /// </summary>
        /// <value>The hex-encoded notarized transaction hash for a user transaction. This hash identifies the full submittable notarized transaction - ie the signed intent, plus the notary signature. </value>
        [DataMember(Name = "hash", IsRequired = true, EmitDefaultValue = true)]
        public string Hash { get; set; }

        /// <summary>
        /// The Bech32m-encoded human readable &#x60;NotarizedTransactionHash&#x60;.
        /// </summary>
        /// <value>The Bech32m-encoded human readable &#x60;NotarizedTransactionHash&#x60;.</value>
        [DataMember(Name = "hash_bech32m", IsRequired = true, EmitDefaultValue = true)]
        public string HashBech32m { get; set; }

        /// <summary>
        /// The hex-encoded full notarized transaction payload - returned only if found in mempool.
        /// </summary>
        /// <value>The hex-encoded full notarized transaction payload - returned only if found in mempool.</value>
        [DataMember(Name = "hex", EmitDefaultValue = true)]
        public string Hex { get; set; }

        /// <summary>
        /// Error message why &#x60;hex&#x60; field is missing: the transaction was not found in the mempool or the provided hash is invalid. 
        /// </summary>
        /// <value>Error message why &#x60;hex&#x60; field is missing: the transaction was not found in the mempool or the provided hash is invalid. </value>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public string Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MempoolTransactionResponsePayloadsInner {\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  HashBech32m: ").Append(HashBech32m).Append("\n");
            sb.Append("  Hex: ").Append(Hex).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MempoolTransactionResponsePayloadsInner);
        }

        /// <summary>
        /// Returns true if MempoolTransactionResponsePayloadsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of MempoolTransactionResponsePayloadsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MempoolTransactionResponsePayloadsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.HashBech32m == input.HashBech32m ||
                    (this.HashBech32m != null &&
                    this.HashBech32m.Equals(input.HashBech32m))
                ) && 
                (
                    this.Hex == input.Hex ||
                    (this.Hex != null &&
                    this.Hex.Equals(input.Hex))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Hash != null)
                {
                    hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                }
                if (this.HashBech32m != null)
                {
                    hashCode = (hashCode * 59) + this.HashBech32m.GetHashCode();
                }
                if (this.Hex != null)
                {
                    hashCode = (hashCode * 59) + this.Hex.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
