/*
 * Radix Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = RadixDlt.CoreApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.CoreApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.CoreApiSdk.Model
{
    /// <summary>
    /// CommittedStateIdentifier
    /// </summary>
    [DataContract(Name = "CommittedStateIdentifier")]
    public partial class CommittedStateIdentifier : IEquatable<CommittedStateIdentifier>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommittedStateIdentifier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommittedStateIdentifier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommittedStateIdentifier" /> class.
        /// </summary>
        /// <param name="stateVersion">stateVersion (required).</param>
        /// <param name="stateTreeHash">The hex-encoded root hash of the state tree. This captures the current state of the state on the ledger.  (required).</param>
        /// <param name="transactionTreeHash">The hex-encoded root hash of the transaction tree. This captures the ledger transactions committed to the ledger.  (required).</param>
        /// <param name="receiptTreeHash">The hex-encoded root hash of the receipt tree. This captures the consensus-agreed output of each transaction on the ledger.  (required).</param>
        public CommittedStateIdentifier(long stateVersion = default(long), string stateTreeHash = default(string), string transactionTreeHash = default(string), string receiptTreeHash = default(string))
        {
            this.StateVersion = stateVersion;
            // to ensure "stateTreeHash" is required (not null)
            if (stateTreeHash == null)
            {
                throw new ArgumentNullException("stateTreeHash is a required property for CommittedStateIdentifier and cannot be null");
            }
            this.StateTreeHash = stateTreeHash;
            // to ensure "transactionTreeHash" is required (not null)
            if (transactionTreeHash == null)
            {
                throw new ArgumentNullException("transactionTreeHash is a required property for CommittedStateIdentifier and cannot be null");
            }
            this.TransactionTreeHash = transactionTreeHash;
            // to ensure "receiptTreeHash" is required (not null)
            if (receiptTreeHash == null)
            {
                throw new ArgumentNullException("receiptTreeHash is a required property for CommittedStateIdentifier and cannot be null");
            }
            this.ReceiptTreeHash = receiptTreeHash;
        }

        /// <summary>
        /// Gets or Sets StateVersion
        /// </summary>
        [DataMember(Name = "state_version", IsRequired = true, EmitDefaultValue = true)]
        public long StateVersion { get; set; }

        /// <summary>
        /// The hex-encoded root hash of the state tree. This captures the current state of the state on the ledger. 
        /// </summary>
        /// <value>The hex-encoded root hash of the state tree. This captures the current state of the state on the ledger. </value>
        [DataMember(Name = "state_tree_hash", IsRequired = true, EmitDefaultValue = true)]
        public string StateTreeHash { get; set; }

        /// <summary>
        /// The hex-encoded root hash of the transaction tree. This captures the ledger transactions committed to the ledger. 
        /// </summary>
        /// <value>The hex-encoded root hash of the transaction tree. This captures the ledger transactions committed to the ledger. </value>
        [DataMember(Name = "transaction_tree_hash", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionTreeHash { get; set; }

        /// <summary>
        /// The hex-encoded root hash of the receipt tree. This captures the consensus-agreed output of each transaction on the ledger. 
        /// </summary>
        /// <value>The hex-encoded root hash of the receipt tree. This captures the consensus-agreed output of each transaction on the ledger. </value>
        [DataMember(Name = "receipt_tree_hash", IsRequired = true, EmitDefaultValue = true)]
        public string ReceiptTreeHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommittedStateIdentifier {\n");
            sb.Append("  StateVersion: ").Append(StateVersion).Append("\n");
            sb.Append("  StateTreeHash: ").Append(StateTreeHash).Append("\n");
            sb.Append("  TransactionTreeHash: ").Append(TransactionTreeHash).Append("\n");
            sb.Append("  ReceiptTreeHash: ").Append(ReceiptTreeHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommittedStateIdentifier);
        }

        /// <summary>
        /// Returns true if CommittedStateIdentifier instances are equal
        /// </summary>
        /// <param name="input">Instance of CommittedStateIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommittedStateIdentifier input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StateVersion == input.StateVersion ||
                    this.StateVersion.Equals(input.StateVersion)
                ) && 
                (
                    this.StateTreeHash == input.StateTreeHash ||
                    (this.StateTreeHash != null &&
                    this.StateTreeHash.Equals(input.StateTreeHash))
                ) && 
                (
                    this.TransactionTreeHash == input.TransactionTreeHash ||
                    (this.TransactionTreeHash != null &&
                    this.TransactionTreeHash.Equals(input.TransactionTreeHash))
                ) && 
                (
                    this.ReceiptTreeHash == input.ReceiptTreeHash ||
                    (this.ReceiptTreeHash != null &&
                    this.ReceiptTreeHash.Equals(input.ReceiptTreeHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.StateVersion.GetHashCode();
                if (this.StateTreeHash != null)
                {
                    hashCode = (hashCode * 59) + this.StateTreeHash.GetHashCode();
                }
                if (this.TransactionTreeHash != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionTreeHash.GetHashCode();
                }
                if (this.ReceiptTreeHash != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptTreeHash.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
