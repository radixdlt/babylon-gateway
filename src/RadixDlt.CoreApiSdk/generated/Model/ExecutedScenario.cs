/*
 * Radix Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = RadixDlt.CoreApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.CoreApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.CoreApiSdk.Model
{
    /// <summary>
    /// ExecutedScenario
    /// </summary>
    [DataContract(Name = "ExecutedScenario")]
    public partial class ExecutedScenario : IEquatable<ExecutedScenario>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutedScenario" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExecutedScenario() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutedScenario" /> class.
        /// </summary>
        /// <param name="sequenceNumber">An index of the Scenario (reflecting its execution order). (required).</param>
        /// <param name="logicalName">logicalName (required).</param>
        /// <param name="committedTransactions">Transactions successfully committed by the Scenario. (required).</param>
        /// <param name="addresses">Well-named addresses touched/created by the Scenario, keyed by their name.  (required).</param>
        public ExecutedScenario(int sequenceNumber = default(int), string logicalName = default(string), List<ExecutedScenarioTransaction> committedTransactions = default(List<ExecutedScenarioTransaction>), Dictionary<string, string> addresses = default(Dictionary<string, string>))
        {
            this.SequenceNumber = sequenceNumber;
            // to ensure "logicalName" is required (not null)
            if (logicalName == null)
            {
                throw new ArgumentNullException("logicalName is a required property for ExecutedScenario and cannot be null");
            }
            this.LogicalName = logicalName;
            // to ensure "committedTransactions" is required (not null)
            if (committedTransactions == null)
            {
                throw new ArgumentNullException("committedTransactions is a required property for ExecutedScenario and cannot be null");
            }
            this.CommittedTransactions = committedTransactions;
            // to ensure "addresses" is required (not null)
            if (addresses == null)
            {
                throw new ArgumentNullException("addresses is a required property for ExecutedScenario and cannot be null");
            }
            this.Addresses = addresses;
        }

        /// <summary>
        /// An index of the Scenario (reflecting its execution order).
        /// </summary>
        /// <value>An index of the Scenario (reflecting its execution order).</value>
        [DataMember(Name = "sequence_number", IsRequired = true, EmitDefaultValue = true)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets LogicalName
        /// </summary>
        [DataMember(Name = "logical_name", IsRequired = true, EmitDefaultValue = true)]
        public string LogicalName { get; set; }

        /// <summary>
        /// Transactions successfully committed by the Scenario.
        /// </summary>
        /// <value>Transactions successfully committed by the Scenario.</value>
        [DataMember(Name = "committed_transactions", IsRequired = true, EmitDefaultValue = true)]
        public List<ExecutedScenarioTransaction> CommittedTransactions { get; set; }

        /// <summary>
        /// Well-named addresses touched/created by the Scenario, keyed by their name. 
        /// </summary>
        /// <value>Well-named addresses touched/created by the Scenario, keyed by their name. </value>
        [DataMember(Name = "addresses", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Addresses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExecutedScenario {\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  LogicalName: ").Append(LogicalName).Append("\n");
            sb.Append("  CommittedTransactions: ").Append(CommittedTransactions).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExecutedScenario);
        }

        /// <summary>
        /// Returns true if ExecutedScenario instances are equal
        /// </summary>
        /// <param name="input">Instance of ExecutedScenario to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExecutedScenario input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                ) && 
                (
                    this.LogicalName == input.LogicalName ||
                    (this.LogicalName != null &&
                    this.LogicalName.Equals(input.LogicalName))
                ) && 
                (
                    this.CommittedTransactions == input.CommittedTransactions ||
                    this.CommittedTransactions != null &&
                    input.CommittedTransactions != null &&
                    this.CommittedTransactions.SequenceEqual(input.CommittedTransactions)
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SequenceNumber.GetHashCode();
                if (this.LogicalName != null)
                {
                    hashCode = (hashCode * 59) + this.LogicalName.GetHashCode();
                }
                if (this.CommittedTransactions != null)
                {
                    hashCode = (hashCode * 59) + this.CommittedTransactions.GetHashCode();
                }
                if (this.Addresses != null)
                {
                    hashCode = (hashCode * 59) + this.Addresses.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
