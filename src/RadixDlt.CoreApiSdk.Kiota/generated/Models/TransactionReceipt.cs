/* Copyright 2021 Radix Publishing Ltd incorporated in Jersey (Channel Islands).
 *
 * Licensed under the Radix License, Version 1.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 *
 * radixfoundation.org/licenses/LICENSE-v1
 *
 * The Licensor hereby grants permission for the Canonical version of the Work to be
 * published, distributed and used under or by reference to the Licensor’s trademark
 * Radix ® and use of any unregistered trade names, logos or get-up.
 *
 * The Licensor provides the Work (and each Contributor provides its Contributions) on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
 * including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT,
 * MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Whilst the Work is capable of being deployed, used and adopted (instantiated) to create
 * a distributed ledger it is your responsibility to test and validate the code, together
 * with all logic and performance of that code under all foreseeable scenarios.
 *
 * The Licensor does not make or purport to make and hereby excludes liability for all
 * and any representation, warranty or undertaking in any form whatsoever, whether express
 * or implied, to any entity or person, including any representation, warranty or
 * undertaking, as to the functionality security use, value or other characteristics of
 * any distributed ledger nor in respect the functioning or value of any tokens which may
 * be created stored or transferred using the Work. The Licensor does not warrant that the
 * Work or any use of the Work complies with any law or regulation in any territory where
 * it may be implemented or used or that it will be appropriate for any specific purpose.
 *
 * Neither the licensor nor any current or former employees, officers, directors, partners,
 * trustees, representatives, agents, advisors, contractors, or volunteers of the Licensor
 * shall be liable for any direct or indirect, special, incidental, consequential or other
 * losses of any kind, in tort, contract or otherwise (including but not limited to loss
 * of revenue, income or profits, or loss of use or data, or loss of reputation, or loss
 * of any economic or other opportunity of whatsoever nature or howsoever arising), arising
 * out of or in connection with (without limitation of any use, misuse, of any ledger system
 * or use made or its functionality or any performance or operation of any code or protocol
 * caused by bugs or programming or logic errors or otherwise);
 *
 * A. any offer, purchase, holding, use, sale, exchange or transmission of any
 * cryptographic keys, tokens or assets created, exchanged, stored or arising from any
 * interaction with the Work;
 *
 * B. any failure in a transmission or loss of any token or assets keys or other digital
 * artefacts due to errors in transmission;
 *
 * C. bugs, hacks, logic errors or faults in the Work or any communication;
 *
 * D. system software or apparatus including but not limited to losses caused by errors
 * in holding or transmitting tokens by any third-party;
 *
 * E. breaches or failure of security including hacker attacks, loss or disclosure of
 * password, loss of private key, unauthorised use or misuse of such passwords or keys;
 *
 * F. any losses including loss of anticipated savings or other benefits resulting from
 * use of the Work or any changes to the Work (however implemented).
 *
 * You are solely responsible for; testing, validating and evaluation of all operation
 * logic, functionality, security and appropriateness of using the Work for any commercial
 * or non-commercial purpose and for any reproduction or redistribution by You of the
 * Work. You assume all risks associated with Your use of the Work and the exercise of
 * permissions under this License.
 */

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace RadixDlt.CoreApiSdk.Kiota.Models {
    /// <summary>
    /// The transaction execution receipt
    /// </summary>
    public class TransactionReceipt : IBackedModel, IParsable 
    {
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The costing_parameters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RadixDlt.CoreApiSdk.Kiota.Models.CostingParameters? CostingParameters {
            get { return BackingStore?.Get<RadixDlt.CoreApiSdk.Kiota.Models.CostingParameters?>("costing_parameters"); }
            set { BackingStore?.Set("costing_parameters", value); }
        }
#nullable restore
#else
        public RadixDlt.CoreApiSdk.Kiota.Models.CostingParameters CostingParameters {
            get { return BackingStore?.Get<RadixDlt.CoreApiSdk.Kiota.Models.CostingParameters>("costing_parameters"); }
            set { BackingStore?.Set("costing_parameters", value); }
        }
#endif
        /// <summary>Error message (only present if status is `Failed` or `Rejected`)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErrorMessage {
            get { return BackingStore?.Get<string?>("error_message"); }
            set { BackingStore?.Set("error_message", value); }
        }
#nullable restore
#else
        public string ErrorMessage {
            get { return BackingStore?.Get<string>("error_message"); }
            set { BackingStore?.Set("error_message", value); }
        }
#endif
        /// <summary>The events property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Event>? Events {
            get { return BackingStore?.Get<List<Event>?>("events"); }
            set { BackingStore?.Set("events", value); }
        }
#nullable restore
#else
        public List<Event> Events {
            get { return BackingStore?.Get<List<Event>>("events"); }
            set { BackingStore?.Set("events", value); }
        }
#endif
        /// <summary>The fee_destination property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RadixDlt.CoreApiSdk.Kiota.Models.FeeDestination? FeeDestination {
            get { return BackingStore?.Get<RadixDlt.CoreApiSdk.Kiota.Models.FeeDestination?>("fee_destination"); }
            set { BackingStore?.Set("fee_destination", value); }
        }
#nullable restore
#else
        public RadixDlt.CoreApiSdk.Kiota.Models.FeeDestination FeeDestination {
            get { return BackingStore?.Get<RadixDlt.CoreApiSdk.Kiota.Models.FeeDestination>("fee_destination"); }
            set { BackingStore?.Set("fee_destination", value); }
        }
#endif
        /// <summary>The fee_source property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RadixDlt.CoreApiSdk.Kiota.Models.FeeSource? FeeSource {
            get { return BackingStore?.Get<RadixDlt.CoreApiSdk.Kiota.Models.FeeSource?>("fee_source"); }
            set { BackingStore?.Set("fee_source", value); }
        }
#nullable restore
#else
        public RadixDlt.CoreApiSdk.Kiota.Models.FeeSource FeeSource {
            get { return BackingStore?.Get<RadixDlt.CoreApiSdk.Kiota.Models.FeeSource>("fee_source"); }
            set { BackingStore?.Set("fee_source", value); }
        }
#endif
        /// <summary>The fee_summary property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RadixDlt.CoreApiSdk.Kiota.Models.FeeSummary? FeeSummary {
            get { return BackingStore?.Get<RadixDlt.CoreApiSdk.Kiota.Models.FeeSummary?>("fee_summary"); }
            set { BackingStore?.Set("fee_summary", value); }
        }
#nullable restore
#else
        public RadixDlt.CoreApiSdk.Kiota.Models.FeeSummary FeeSummary {
            get { return BackingStore?.Get<RadixDlt.CoreApiSdk.Kiota.Models.FeeSummary>("fee_summary"); }
            set { BackingStore?.Set("fee_summary", value); }
        }
#endif
        /// <summary>The next_epoch property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RadixDlt.CoreApiSdk.Kiota.Models.NextEpoch? NextEpoch {
            get { return BackingStore?.Get<RadixDlt.CoreApiSdk.Kiota.Models.NextEpoch?>("next_epoch"); }
            set { BackingStore?.Set("next_epoch", value); }
        }
#nullable restore
#else
        public RadixDlt.CoreApiSdk.Kiota.Models.NextEpoch NextEpoch {
            get { return BackingStore?.Get<RadixDlt.CoreApiSdk.Kiota.Models.NextEpoch>("next_epoch"); }
            set { BackingStore?.Set("next_epoch", value); }
        }
#endif
        /// <summary>The manifest line-by-line engine return data (only present if `status` is `Succeeded`)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SborData>? Output {
            get { return BackingStore?.Get<List<SborData>?>("output"); }
            set { BackingStore?.Set("output", value); }
        }
#nullable restore
#else
        public List<SborData> Output {
            get { return BackingStore?.Get<List<SborData>>("output"); }
            set { BackingStore?.Set("output", value); }
        }
#endif
        /// <summary>Transaction state updates (only present if status is Succeeded or Failed)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RadixDlt.CoreApiSdk.Kiota.Models.StateUpdates? StateUpdates {
            get { return BackingStore?.Get<RadixDlt.CoreApiSdk.Kiota.Models.StateUpdates?>("state_updates"); }
            set { BackingStore?.Set("state_updates", value); }
        }
#nullable restore
#else
        public RadixDlt.CoreApiSdk.Kiota.Models.StateUpdates StateUpdates {
            get { return BackingStore?.Get<RadixDlt.CoreApiSdk.Kiota.Models.StateUpdates>("state_updates"); }
            set { BackingStore?.Set("state_updates", value); }
        }
#endif
        /// <summary>The status of the transaction</summary>
        public TransactionStatus? Status {
            get { return BackingStore?.Get<TransactionStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="TransactionReceipt"/> and sets the default values.
        /// </summary>
        public TransactionReceipt()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="TransactionReceipt"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TransactionReceipt CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TransactionReceipt();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"costing_parameters", n => { CostingParameters = n.GetObjectValue<RadixDlt.CoreApiSdk.Kiota.Models.CostingParameters>(RadixDlt.CoreApiSdk.Kiota.Models.CostingParameters.CreateFromDiscriminatorValue); } },
                {"error_message", n => { ErrorMessage = n.GetStringValue(); } },
                {"events", n => { Events = n.GetCollectionOfObjectValues<Event>(Event.CreateFromDiscriminatorValue)?.ToList(); } },
                {"fee_destination", n => { FeeDestination = n.GetObjectValue<RadixDlt.CoreApiSdk.Kiota.Models.FeeDestination>(RadixDlt.CoreApiSdk.Kiota.Models.FeeDestination.CreateFromDiscriminatorValue); } },
                {"fee_source", n => { FeeSource = n.GetObjectValue<RadixDlt.CoreApiSdk.Kiota.Models.FeeSource>(RadixDlt.CoreApiSdk.Kiota.Models.FeeSource.CreateFromDiscriminatorValue); } },
                {"fee_summary", n => { FeeSummary = n.GetObjectValue<RadixDlt.CoreApiSdk.Kiota.Models.FeeSummary>(RadixDlt.CoreApiSdk.Kiota.Models.FeeSummary.CreateFromDiscriminatorValue); } },
                {"next_epoch", n => { NextEpoch = n.GetObjectValue<RadixDlt.CoreApiSdk.Kiota.Models.NextEpoch>(RadixDlt.CoreApiSdk.Kiota.Models.NextEpoch.CreateFromDiscriminatorValue); } },
                {"output", n => { Output = n.GetCollectionOfObjectValues<SborData>(SborData.CreateFromDiscriminatorValue)?.ToList(); } },
                {"state_updates", n => { StateUpdates = n.GetObjectValue<RadixDlt.CoreApiSdk.Kiota.Models.StateUpdates>(RadixDlt.CoreApiSdk.Kiota.Models.StateUpdates.CreateFromDiscriminatorValue); } },
                {"status", n => { Status = n.GetEnumValue<TransactionStatus>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<RadixDlt.CoreApiSdk.Kiota.Models.CostingParameters>("costing_parameters", CostingParameters);
            writer.WriteStringValue("error_message", ErrorMessage);
            writer.WriteCollectionOfObjectValues<Event>("events", Events);
            writer.WriteObjectValue<RadixDlt.CoreApiSdk.Kiota.Models.FeeDestination>("fee_destination", FeeDestination);
            writer.WriteObjectValue<RadixDlt.CoreApiSdk.Kiota.Models.FeeSource>("fee_source", FeeSource);
            writer.WriteObjectValue<RadixDlt.CoreApiSdk.Kiota.Models.FeeSummary>("fee_summary", FeeSummary);
            writer.WriteObjectValue<RadixDlt.CoreApiSdk.Kiota.Models.NextEpoch>("next_epoch", NextEpoch);
            writer.WriteCollectionOfObjectValues<SborData>("output", Output);
            writer.WriteObjectValue<RadixDlt.CoreApiSdk.Kiota.Models.StateUpdates>("state_updates", StateUpdates);
            writer.WriteEnumValue<TransactionStatus>("status", Status);
        }
    }
}
