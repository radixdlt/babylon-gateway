/* Copyright 2021 Radix Publishing Ltd incorporated in Jersey (Channel Islands).
 *
 * Licensed under the Radix License, Version 1.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 *
 * radixfoundation.org/licenses/LICENSE-v1
 *
 * The Licensor hereby grants permission for the Canonical version of the Work to be
 * published, distributed and used under or by reference to the Licensor’s trademark
 * Radix ® and use of any unregistered trade names, logos or get-up.
 *
 * The Licensor provides the Work (and each Contributor provides its Contributions) on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
 * including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT,
 * MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Whilst the Work is capable of being deployed, used and adopted (instantiated) to create
 * a distributed ledger it is your responsibility to test and validate the code, together
 * with all logic and performance of that code under all foreseeable scenarios.
 *
 * The Licensor does not make or purport to make and hereby excludes liability for all
 * and any representation, warranty or undertaking in any form whatsoever, whether express
 * or implied, to any entity or person, including any representation, warranty or
 * undertaking, as to the functionality security use, value or other characteristics of
 * any distributed ledger nor in respect the functioning or value of any tokens which may
 * be created stored or transferred using the Work. The Licensor does not warrant that the
 * Work or any use of the Work complies with any law or regulation in any territory where
 * it may be implemented or used or that it will be appropriate for any specific purpose.
 *
 * Neither the licensor nor any current or former employees, officers, directors, partners,
 * trustees, representatives, agents, advisors, contractors, or volunteers of the Licensor
 * shall be liable for any direct or indirect, special, incidental, consequential or other
 * losses of any kind, in tort, contract or otherwise (including but not limited to loss
 * of revenue, income or profits, or loss of use or data, or loss of reputation, or loss
 * of any economic or other opportunity of whatsoever nature or howsoever arising), arising
 * out of or in connection with (without limitation of any use, misuse, of any ledger system
 * or use made or its functionality or any performance or operation of any code or protocol
 * caused by bugs or programming or logic errors or otherwise);
 *
 * A. any offer, purchase, holding, use, sale, exchange or transmission of any
 * cryptographic keys, tokens or assets created, exchanged, stored or arising from any
 * interaction with the Work;
 *
 * B. any failure in a transmission or loss of any token or assets keys or other digital
 * artefacts due to errors in transmission;
 *
 * C. bugs, hacks, logic errors or faults in the Work or any communication;
 *
 * D. system software or apparatus including but not limited to losses caused by errors
 * in holding or transmitting tokens by any third-party;
 *
 * E. breaches or failure of security including hacker attacks, loss or disclosure of
 * password, loss of private key, unauthorised use or misuse of such passwords or keys;
 *
 * F. any losses including loss of anticipated savings or other benefits resulting from
 * use of the Work or any changes to the Work (however implemented).
 *
 * You are solely responsible for; testing, validating and evaluation of all operation
 * logic, functionality, security and appropriateness of using the Work for any commercial
 * or non-commercial purpose and for any reproduction or redistribution by You of the
 * Work. You assume all risks associated with Your use of the Work and the exercise of
 * permissions under this License.
 */

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace RadixDlt.CoreApiSdk.Kiota.Models {
    /// <summary>
    /// Key addresses for this network.
    /// </summary>
    public class NetworkConfigurationResponse_well_known_addresses : IBackedModel, IParsable 
    {
        /// <summary>The access_controller_package property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccessControllerPackage {
            get { return BackingStore?.Get<string?>("access_controller_package"); }
            set { BackingStore?.Set("access_controller_package", value); }
        }
#nullable restore
#else
        public string AccessControllerPackage {
            get { return BackingStore?.Get<string>("access_controller_package"); }
            set { BackingStore?.Set("access_controller_package", value); }
        }
#endif
        /// <summary>The account_owner_badge property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountOwnerBadge {
            get { return BackingStore?.Get<string?>("account_owner_badge"); }
            set { BackingStore?.Set("account_owner_badge", value); }
        }
#nullable restore
#else
        public string AccountOwnerBadge {
            get { return BackingStore?.Get<string>("account_owner_badge"); }
            set { BackingStore?.Set("account_owner_badge", value); }
        }
#endif
        /// <summary>The account_package property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountPackage {
            get { return BackingStore?.Get<string?>("account_package"); }
            set { BackingStore?.Set("account_package", value); }
        }
#nullable restore
#else
        public string AccountPackage {
            get { return BackingStore?.Get<string>("account_package"); }
            set { BackingStore?.Set("account_package", value); }
        }
#endif
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The consensus_manager property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConsensusManager {
            get { return BackingStore?.Get<string?>("consensus_manager"); }
            set { BackingStore?.Set("consensus_manager", value); }
        }
#nullable restore
#else
        public string ConsensusManager {
            get { return BackingStore?.Get<string>("consensus_manager"); }
            set { BackingStore?.Set("consensus_manager", value); }
        }
#endif
        /// <summary>The consensus_manager_package property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConsensusManagerPackage {
            get { return BackingStore?.Get<string?>("consensus_manager_package"); }
            set { BackingStore?.Set("consensus_manager_package", value); }
        }
#nullable restore
#else
        public string ConsensusManagerPackage {
            get { return BackingStore?.Get<string>("consensus_manager_package"); }
            set { BackingStore?.Set("consensus_manager_package", value); }
        }
#endif
        /// <summary>The ed25519_signature_virtual_badge property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ed25519SignatureVirtualBadge {
            get { return BackingStore?.Get<string?>("ed25519_signature_virtual_badge"); }
            set { BackingStore?.Set("ed25519_signature_virtual_badge", value); }
        }
#nullable restore
#else
        public string Ed25519SignatureVirtualBadge {
            get { return BackingStore?.Get<string>("ed25519_signature_virtual_badge"); }
            set { BackingStore?.Set("ed25519_signature_virtual_badge", value); }
        }
#endif
        /// <summary>The faucet property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Faucet {
            get { return BackingStore?.Get<string?>("faucet"); }
            set { BackingStore?.Set("faucet", value); }
        }
#nullable restore
#else
        public string Faucet {
            get { return BackingStore?.Get<string>("faucet"); }
            set { BackingStore?.Set("faucet", value); }
        }
#endif
        /// <summary>The faucet_package property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FaucetPackage {
            get { return BackingStore?.Get<string?>("faucet_package"); }
            set { BackingStore?.Set("faucet_package", value); }
        }
#nullable restore
#else
        public string FaucetPackage {
            get { return BackingStore?.Get<string>("faucet_package"); }
            set { BackingStore?.Set("faucet_package", value); }
        }
#endif
        /// <summary>The genesis_helper property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GenesisHelper {
            get { return BackingStore?.Get<string?>("genesis_helper"); }
            set { BackingStore?.Set("genesis_helper", value); }
        }
#nullable restore
#else
        public string GenesisHelper {
            get { return BackingStore?.Get<string>("genesis_helper"); }
            set { BackingStore?.Set("genesis_helper", value); }
        }
#endif
        /// <summary>The genesis_helper_package property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GenesisHelperPackage {
            get { return BackingStore?.Get<string?>("genesis_helper_package"); }
            set { BackingStore?.Set("genesis_helper_package", value); }
        }
#nullable restore
#else
        public string GenesisHelperPackage {
            get { return BackingStore?.Get<string>("genesis_helper_package"); }
            set { BackingStore?.Set("genesis_helper_package", value); }
        }
#endif
        /// <summary>The global_caller_virtual_badge property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GlobalCallerVirtualBadge {
            get { return BackingStore?.Get<string?>("global_caller_virtual_badge"); }
            set { BackingStore?.Set("global_caller_virtual_badge", value); }
        }
#nullable restore
#else
        public string GlobalCallerVirtualBadge {
            get { return BackingStore?.Get<string>("global_caller_virtual_badge"); }
            set { BackingStore?.Set("global_caller_virtual_badge", value); }
        }
#endif
        /// <summary>The identity_owner_badge property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdentityOwnerBadge {
            get { return BackingStore?.Get<string?>("identity_owner_badge"); }
            set { BackingStore?.Set("identity_owner_badge", value); }
        }
#nullable restore
#else
        public string IdentityOwnerBadge {
            get { return BackingStore?.Get<string>("identity_owner_badge"); }
            set { BackingStore?.Set("identity_owner_badge", value); }
        }
#endif
        /// <summary>The identity_package property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdentityPackage {
            get { return BackingStore?.Get<string?>("identity_package"); }
            set { BackingStore?.Set("identity_package", value); }
        }
#nullable restore
#else
        public string IdentityPackage {
            get { return BackingStore?.Get<string>("identity_package"); }
            set { BackingStore?.Set("identity_package", value); }
        }
#endif
        /// <summary>The metadata_module_package property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MetadataModulePackage {
            get { return BackingStore?.Get<string?>("metadata_module_package"); }
            set { BackingStore?.Set("metadata_module_package", value); }
        }
#nullable restore
#else
        public string MetadataModulePackage {
            get { return BackingStore?.Get<string>("metadata_module_package"); }
            set { BackingStore?.Set("metadata_module_package", value); }
        }
#endif
        /// <summary>The package_of_direct_caller_virtual_badge property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PackageOfDirectCallerVirtualBadge {
            get { return BackingStore?.Get<string?>("package_of_direct_caller_virtual_badge"); }
            set { BackingStore?.Set("package_of_direct_caller_virtual_badge", value); }
        }
#nullable restore
#else
        public string PackageOfDirectCallerVirtualBadge {
            get { return BackingStore?.Get<string>("package_of_direct_caller_virtual_badge"); }
            set { BackingStore?.Set("package_of_direct_caller_virtual_badge", value); }
        }
#endif
        /// <summary>The package_owner_badge property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PackageOwnerBadge {
            get { return BackingStore?.Get<string?>("package_owner_badge"); }
            set { BackingStore?.Set("package_owner_badge", value); }
        }
#nullable restore
#else
        public string PackageOwnerBadge {
            get { return BackingStore?.Get<string>("package_owner_badge"); }
            set { BackingStore?.Set("package_owner_badge", value); }
        }
#endif
        /// <summary>The package_package property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PackagePackage {
            get { return BackingStore?.Get<string?>("package_package"); }
            set { BackingStore?.Set("package_package", value); }
        }
#nullable restore
#else
        public string PackagePackage {
            get { return BackingStore?.Get<string>("package_package"); }
            set { BackingStore?.Set("package_package", value); }
        }
#endif
        /// <summary>The pool_package property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PoolPackage {
            get { return BackingStore?.Get<string?>("pool_package"); }
            set { BackingStore?.Set("pool_package", value); }
        }
#nullable restore
#else
        public string PoolPackage {
            get { return BackingStore?.Get<string>("pool_package"); }
            set { BackingStore?.Set("pool_package", value); }
        }
#endif
        /// <summary>The resource_package property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourcePackage {
            get { return BackingStore?.Get<string?>("resource_package"); }
            set { BackingStore?.Set("resource_package", value); }
        }
#nullable restore
#else
        public string ResourcePackage {
            get { return BackingStore?.Get<string>("resource_package"); }
            set { BackingStore?.Set("resource_package", value); }
        }
#endif
        /// <summary>The role_assignment_module_package property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RoleAssignmentModulePackage {
            get { return BackingStore?.Get<string?>("role_assignment_module_package"); }
            set { BackingStore?.Set("role_assignment_module_package", value); }
        }
#nullable restore
#else
        public string RoleAssignmentModulePackage {
            get { return BackingStore?.Get<string>("role_assignment_module_package"); }
            set { BackingStore?.Set("role_assignment_module_package", value); }
        }
#endif
        /// <summary>The royalty_module_package property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RoyaltyModulePackage {
            get { return BackingStore?.Get<string?>("royalty_module_package"); }
            set { BackingStore?.Set("royalty_module_package", value); }
        }
#nullable restore
#else
        public string RoyaltyModulePackage {
            get { return BackingStore?.Get<string>("royalty_module_package"); }
            set { BackingStore?.Set("royalty_module_package", value); }
        }
#endif
        /// <summary>The secp256k1_signature_virtual_badge property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Secp256k1SignatureVirtualBadge {
            get { return BackingStore?.Get<string?>("secp256k1_signature_virtual_badge"); }
            set { BackingStore?.Set("secp256k1_signature_virtual_badge", value); }
        }
#nullable restore
#else
        public string Secp256k1SignatureVirtualBadge {
            get { return BackingStore?.Get<string>("secp256k1_signature_virtual_badge"); }
            set { BackingStore?.Set("secp256k1_signature_virtual_badge", value); }
        }
#endif
        /// <summary>The system_transaction_badge property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SystemTransactionBadge {
            get { return BackingStore?.Get<string?>("system_transaction_badge"); }
            set { BackingStore?.Set("system_transaction_badge", value); }
        }
#nullable restore
#else
        public string SystemTransactionBadge {
            get { return BackingStore?.Get<string>("system_transaction_badge"); }
            set { BackingStore?.Set("system_transaction_badge", value); }
        }
#endif
        /// <summary>The transaction_processor_package property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransactionProcessorPackage {
            get { return BackingStore?.Get<string?>("transaction_processor_package"); }
            set { BackingStore?.Set("transaction_processor_package", value); }
        }
#nullable restore
#else
        public string TransactionProcessorPackage {
            get { return BackingStore?.Get<string>("transaction_processor_package"); }
            set { BackingStore?.Set("transaction_processor_package", value); }
        }
#endif
        /// <summary>The transaction_tracker property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransactionTracker {
            get { return BackingStore?.Get<string?>("transaction_tracker"); }
            set { BackingStore?.Set("transaction_tracker", value); }
        }
#nullable restore
#else
        public string TransactionTracker {
            get { return BackingStore?.Get<string>("transaction_tracker"); }
            set { BackingStore?.Set("transaction_tracker", value); }
        }
#endif
        /// <summary>The validator_owner_badge property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ValidatorOwnerBadge {
            get { return BackingStore?.Get<string?>("validator_owner_badge"); }
            set { BackingStore?.Set("validator_owner_badge", value); }
        }
#nullable restore
#else
        public string ValidatorOwnerBadge {
            get { return BackingStore?.Get<string>("validator_owner_badge"); }
            set { BackingStore?.Set("validator_owner_badge", value); }
        }
#endif
        /// <summary>The xrd property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Xrd {
            get { return BackingStore?.Get<string?>("xrd"); }
            set { BackingStore?.Set("xrd", value); }
        }
#nullable restore
#else
        public string Xrd {
            get { return BackingStore?.Get<string>("xrd"); }
            set { BackingStore?.Set("xrd", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="NetworkConfigurationResponse_well_known_addresses"/> and sets the default values.
        /// </summary>
        public NetworkConfigurationResponse_well_known_addresses()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="NetworkConfigurationResponse_well_known_addresses"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static NetworkConfigurationResponse_well_known_addresses CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new NetworkConfigurationResponse_well_known_addresses();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"access_controller_package", n => { AccessControllerPackage = n.GetStringValue(); } },
                {"account_owner_badge", n => { AccountOwnerBadge = n.GetStringValue(); } },
                {"account_package", n => { AccountPackage = n.GetStringValue(); } },
                {"consensus_manager", n => { ConsensusManager = n.GetStringValue(); } },
                {"consensus_manager_package", n => { ConsensusManagerPackage = n.GetStringValue(); } },
                {"ed25519_signature_virtual_badge", n => { Ed25519SignatureVirtualBadge = n.GetStringValue(); } },
                {"faucet", n => { Faucet = n.GetStringValue(); } },
                {"faucet_package", n => { FaucetPackage = n.GetStringValue(); } },
                {"genesis_helper", n => { GenesisHelper = n.GetStringValue(); } },
                {"genesis_helper_package", n => { GenesisHelperPackage = n.GetStringValue(); } },
                {"global_caller_virtual_badge", n => { GlobalCallerVirtualBadge = n.GetStringValue(); } },
                {"identity_owner_badge", n => { IdentityOwnerBadge = n.GetStringValue(); } },
                {"identity_package", n => { IdentityPackage = n.GetStringValue(); } },
                {"metadata_module_package", n => { MetadataModulePackage = n.GetStringValue(); } },
                {"package_of_direct_caller_virtual_badge", n => { PackageOfDirectCallerVirtualBadge = n.GetStringValue(); } },
                {"package_owner_badge", n => { PackageOwnerBadge = n.GetStringValue(); } },
                {"package_package", n => { PackagePackage = n.GetStringValue(); } },
                {"pool_package", n => { PoolPackage = n.GetStringValue(); } },
                {"resource_package", n => { ResourcePackage = n.GetStringValue(); } },
                {"role_assignment_module_package", n => { RoleAssignmentModulePackage = n.GetStringValue(); } },
                {"royalty_module_package", n => { RoyaltyModulePackage = n.GetStringValue(); } },
                {"secp256k1_signature_virtual_badge", n => { Secp256k1SignatureVirtualBadge = n.GetStringValue(); } },
                {"system_transaction_badge", n => { SystemTransactionBadge = n.GetStringValue(); } },
                {"transaction_processor_package", n => { TransactionProcessorPackage = n.GetStringValue(); } },
                {"transaction_tracker", n => { TransactionTracker = n.GetStringValue(); } },
                {"validator_owner_badge", n => { ValidatorOwnerBadge = n.GetStringValue(); } },
                {"xrd", n => { Xrd = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("access_controller_package", AccessControllerPackage);
            writer.WriteStringValue("account_owner_badge", AccountOwnerBadge);
            writer.WriteStringValue("account_package", AccountPackage);
            writer.WriteStringValue("consensus_manager", ConsensusManager);
            writer.WriteStringValue("consensus_manager_package", ConsensusManagerPackage);
            writer.WriteStringValue("ed25519_signature_virtual_badge", Ed25519SignatureVirtualBadge);
            writer.WriteStringValue("faucet", Faucet);
            writer.WriteStringValue("faucet_package", FaucetPackage);
            writer.WriteStringValue("genesis_helper", GenesisHelper);
            writer.WriteStringValue("genesis_helper_package", GenesisHelperPackage);
            writer.WriteStringValue("global_caller_virtual_badge", GlobalCallerVirtualBadge);
            writer.WriteStringValue("identity_owner_badge", IdentityOwnerBadge);
            writer.WriteStringValue("identity_package", IdentityPackage);
            writer.WriteStringValue("metadata_module_package", MetadataModulePackage);
            writer.WriteStringValue("package_of_direct_caller_virtual_badge", PackageOfDirectCallerVirtualBadge);
            writer.WriteStringValue("package_owner_badge", PackageOwnerBadge);
            writer.WriteStringValue("package_package", PackagePackage);
            writer.WriteStringValue("pool_package", PoolPackage);
            writer.WriteStringValue("resource_package", ResourcePackage);
            writer.WriteStringValue("role_assignment_module_package", RoleAssignmentModulePackage);
            writer.WriteStringValue("royalty_module_package", RoyaltyModulePackage);
            writer.WriteStringValue("secp256k1_signature_virtual_badge", Secp256k1SignatureVirtualBadge);
            writer.WriteStringValue("system_transaction_badge", SystemTransactionBadge);
            writer.WriteStringValue("transaction_processor_package", TransactionProcessorPackage);
            writer.WriteStringValue("transaction_tracker", TransactionTracker);
            writer.WriteStringValue("validator_owner_badge", ValidatorOwnerBadge);
            writer.WriteStringValue("xrd", Xrd);
        }
    }
}
