name: main

on:
  push:
    branches:
      - main
      - develop
      - release\/*
  pull_request:
    branches:

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@607fce577a46308457984d59e4954e075820f10a
        with:
          dotnet-version: 7.0.x
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Unit tests
        # Add --verbosity normal to get more noisy logs if required for debugging
        run: dotnet test --no-restore --filter RadixDlt.NetworkGateway.UnitTests

  publish-docker-data-aggregator:
    uses: radixdlt/public-iac-resuable-artifacts/.github/workflows/docker-build.yml@main
    with:
      environment: "release"
      # image information
      image_registry: "eu.gcr.io"
      image_organization: "dev-container-repo"
      image_name: "babylon-ng-data-aggregator"
      tag: "DO-1214"
      labels: ""
      context: "."
      dockerfile: "./apps/DataAggregator/Dockerfile"
      platforms: "linux/amd64"
      # optimizations
      cache_repo: "europe-west2-docker.pkg.dev/dev-container-repo/eu-cache-repo/babylon-ng-data-aggregator"
      cache_tag_suffix: "pr"
      role_to_assume: "arn:aws:iam::308190735829:role/gh-dockerhub-releaser"
      enable_dockerhub: "false"
      enable_trivy: "false"
      enable_pr_comment: "true"
    secrets:
      workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDP }}
      service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

  publish-docker-database-migrations:
    uses: radixdlt/public-iac-resuable-artifacts/.github/workflows/docker-build.yml@main
    with:
      environment: "release"
      # image information
      image_registry: "eu.gcr.io"
      image_organization: "dev-container-repo"
      image_name: "babylon-ng-database-migrations"
      tag: "DO-1214"
      labels: ""
      context: "."
      dockerfile: "./apps/DatabaseMigrations/Dockerfile"
      platforms: "linux/amd64"
      # optimizations
      cache_repo: "europe-west2-docker.pkg.dev/dev-container-repo/eu-cache-repo/babylon-ng-database-migrations"
      cache_tag_suffix: "pr"
      role_to_assume: "arn:aws:iam::308190735829:role/gh-dockerhub-releaser"
      enable_dockerhub: "false"
      enable_trivy: "false"
      enable_pr_comment: "true"
    secrets:
      workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDP }}
      service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

  publish-docker-gateway-api:
    uses: radixdlt/public-iac-resuable-artifacts/.github/workflows/docker-build.yml@main
    with:
      environment: "release"
      # image information
      image_registry: "eu.gcr.io"
      image_organization: "dev-container-repo"
      image_name: "babylon-ng-gateway-api"
      tag: "DO-1214"
      labels: ""
      context: "."
      dockerfile: "./apps/GatewayApi/Dockerfile"
      platforms: "linux/amd64"
      # optimizations
      cache_repo: "europe-west2-docker.pkg.dev/dev-container-repo/eu-cache-repo/babylon-ng-gateway-api"
      cache_tag_suffix: "pr"
      role_to_assume: "arn:aws:iam::308190735829:role/gh-dockerhub-releaser"
      enable_dockerhub: "false"
      enable_trivy: "false"
      enable_pr_comment: "true"
    secrets:
      workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDP }}
      service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

  # deploy-on-mardunet:
  #   runs-on: ubuntu-22.04
  #   needs: publish-docker
  #   if: github.ref == 'refs/heads/develop'
  #   steps:
  #     - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
  #     - name: Process ci.env
  #       run: |
  #         export $(grep -v '^#' ./deployment/ci.env | xargs)
  #         echo "FULLNODE_COMMIT=$FULLNODE_COMMIT" >> $GITHUB_ENV
  #     - name: Trigger deployment event ${{ github.ref }}
  #       env:
  #         NAMESPACE: "ng-mardunet"
  #         EVENT_TYPE: "ng_babylon_mardunet"
  #       run: |
  #         curl --silent --show-error --fail --location --request POST 'https://github-worker.radixdlt.com/repos/radixdlt/${{secrets.DISPATCH_REPO}}/dispatches' \
  #           --header 'Accept: application/vnd.github.v3+json' \
  #           --header 'Authorization: Basic ${{secrets.CF_GITHUB_WORKER_ENCODED_BASIC_AUTH}}' \
  #           --header 'Content-Type: application/json' \
  #           --data-raw '{
  #               "event_type": "${{env.EVENT_TYPE}}",
  #               "client_payload": {
  #                 "namespace_postfix": "${{env.NAMESPACE}}",
  #                 "data_aggregator_image_tag": "${{ needs.publish-docker.outputs.data-aggregator-tag }}",
  #                 "gateway_api_image_tag": "${{ needs.publish-docker.outputs.gateway-api-tag }}",
  #                 "database_migrations_image_tag": "${{ needs.publish-docker.outputs.database-migrations-tag }}",
  #                 "feature_branch_name": "${{env.FULLNODE_COMMIT}}"
  #               }
  #           }'

  # deploy-pr:
  #   runs-on: ubuntu-22.04
  #   needs: publish-docker
  #   if: github.event_name == 'pull_request'
  #   steps:
  #     - name: setup "namespace_postfix"
  #       run: |
  #         pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
  #         echo "NAMESPACE=pr-$pull_number" >> $GITHUB_ENV
  #     - name: Trigger pull request deployment event ${{ github.ref }}
  #       env:
  #         EVENT_TYPE: "ng_babylon_pr"
  #       run: |
  #         curl --silent --show-error --fail --location --request POST 'https://github-worker.radixdlt.com/repos/radixdlt/${{secrets.DISPATCH_REPO}}/dispatches' \
  #           --header 'Accept: application/vnd.github.v3+json' \
  #           --header 'Authorization:  Basic ${{secrets.CF_GITHUB_WORKER_ENCODED_BASIC_AUTH}}' \
  #           --header 'Content-Type: application/json' \
  #           --data-raw '{
  #               "event_type": "${{env.EVENT_TYPE}}",
  #               "client_payload": {
  #                   "namespace_postfix": "${{env.NAMESPACE}}",
  #                   "data_aggregator_image_tag": "${{ needs.publish-docker.outputs.data-aggregator-tag }}",
  #                   "gateway_api_image_tag": "${{ needs.publish-docker.outputs.gateway-api-tag }}",
  #                   "database_migrations_image_tag": "${{ needs.publish-docker.outputs.database-migrations-tag }}"
  #               }
  #           }'

  # ephemeral-deploy-and-test:
  #   runs-on: ubuntu-22.04
  #   needs: publish-docker
  #   if: github.event_name == 'pull_request'
  #   steps:
  #     - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
  #     - name: Export branch name in github's environment
  #       run: |
  #         echo "GATEWAY_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
  #     - name: Process ci.env
  #       run: |
  #         export $(grep -v '^#' ./deployment/ci.env | xargs)
  #         echo "FULLNODE_VERSION=$FULLNODE_VERSION" >> $GITHUB_ENV
  #         echo "POSTGRES_VERSION=$POSTGRES_VERSION" >> $GITHUB_ENV
  #     - name: Deploy and test on an ephemeral network
  #       uses: toptal/jenkins-job-trigger-action@649c04c83c099c759aba134bf78138a303ec095f
  #       with:
  #         jenkins_url: "${{ secrets.JENKINS_URL }}"
  #         jenkins_user: ${{ secrets.JENKINS_USER }}
  #         jenkins_token: ${{ secrets.BABYLON_NODE_JENKINS_API_TOKEN }}
  #         job_name: "ephemeral-deployments/job/ephemeral-gateway-env-deploy-and-test"
  #         job_params: |
  #           {
  #             "gatewayDockerTag": "${{ needs.publish-docker.outputs.gateway-api-tag }}",
  #             "gatewayBranch": "${{ env.GATEWAY_BRANCH }}",
  #             "nodeDockerTag": "${{ env.FULLNODE_VERSION }}",
  #             "postgresVersion": "${{ env.POSTGRES_VERSION }}"
  #           }
  #         job_timeout: "3600"

  # sonarcloud:
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  #     - name: SonarScanner for .NET
  #       uses: highbyte/sonarscan-dotnet@8410b6452e036aff2fb830831e508e723b8af60d
  #       with:
  #         sonarProjectKey: radixdlt_babylon-gateway
  #         sonarProjectName: babylon-gateway
  #         sonarOrganization: radixdlt-github
  #         dotnetTestArguments: --filter RadixDlt.NetworkGateway.UnitTests --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
  #         sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
