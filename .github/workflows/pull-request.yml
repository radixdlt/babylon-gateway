name: pull-request

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        dotnet-version: ['7.0.x']
    steps:
      - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@5a3fa01c67e60dba8f95e2878436c7151c4b5f01
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
          include-prerelease: true
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Unit tests
        # Add --verbosity normal to get more noisy logs if required for debugging
        run: dotnet test --no-restore --filter RadixDlt.NetworkGateway.UnitTests

  publish-docker:
    runs-on: ubuntu-22.04
    outputs:
      data-aggregator-tag: ${{ steps.setup_tags.outputs.data-aggregator-tag }}
      database-migrations-tag: ${{ steps.setup_tags.outputs.database-migrations-tag }}
      gateway-api-tag: ${{ steps.setup_tags.outputs.gateway-api-tag }}
    steps:
      - name: Dump context
        uses: crazy-max/ghaction-dump-context@516dbb0c760f39b4cdd750ae095f1688780f68f4
      - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Login to GCR
        uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7
        with:
          registry: eu.gcr.io
          username: _json_key
          password: ${{ secrets.GCR_EU_DEV_JSON_KEY }}

      - name: Setup tags for docker image
        id: setup_tags
        uses: ./.github/actions/set-variables
        with:
          github_event_name: ${{ github.event_name }}
          github_action_name: ${{ github.event.action}}

      - name: Docker build and push DataAggregator
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          file: ./apps/DataAggregator/Dockerfile
          TAGS: |
            ${{ steps.setup_tags.outputs.data_aggregator_tags }}
          push: true
          context: ./

      - name: Docker build and push Gateway API
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          file: ./apps/GatewayApi/Dockerfile
          TAGS: |
            ${{ steps.setup_tags.outputs.gateway_api_tags }}
          push: true
          context: ./

      - name: Docker build and push Database Migrations
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          file: ./apps/DatabaseMigrations/Dockerfile
          TAGS: |
            ${{ steps.setup_tags.outputs.database_migrations_tags }}
          push: true
          context: ./

  # TODO: Reinstate once deployment is configured
  # TODO: Only radixdlt members to trigger these events
  deploy-pr:
   runs-on: ubuntu-22.04
   needs: publish-docker
   steps:
     - name: setup "namespace_postfix"
       run: |
         pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
         echo "NAMESPACE=pr-$pull_number" >> $GITHUB_ENV

     - name: Trigger pull request deployment event ${{ github.ref }}
       env:
         EVENT_TYPE: "ng_babylon_pr"
       run: |
         curl --silent --show-error --fail --location --request POST 'https://github-worker.radixdlt.com/repos/radixdlt/${{secrets.DISPATCH_REPO}}/dispatches' \
           --header 'Accept: application/vnd.github.v3+json' \
           --header 'Authorization:  Basic ${{secrets.CF_GITHUB_WORKER_ENCODED_BASIC_AUTH}}' \
           --header 'Content-Type: application/json' \
           --data-raw '{
               "event_type": "${{env.EVENT_TYPE}}",
               "client_payload": {
                   "namespace_postfix": "${{env.NAMESPACE}}",
                   "data_aggregator_image_tag": "${{ needs.publish-docker.outputs.data-aggregator-tag }}",
                   "gateway_api_image_tag": "${{ needs.publish-docker.outputs.gateway-api-tag }}",
                   "database_migrations_image_tag": "${{ needs.publish-docker.outputs.database-migrations-tag }}"
               }
           }'

  ephemeral-deploy-and-test:
    name: Run ephemeral deployment w/ gateway and test
    needs: publish-docker
    runs-on: ubuntu-22.04
    steps:
      - name: Export branch name in github's environment
        run: |
          echo "GATEWAY_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
      - name: Deploy and test on an ephemeral network
        uses: toptal/jenkins-job-trigger-action@649c04c83c099c759aba134bf78138a303ec095f
        with:
          jenkins_url: "${{ secrets.JENKINS_URL }}"
          jenkins_user: ${{ secrets.JENKINS_USER }}
          jenkins_token: ${{ secrets.BABYLON_NODE_JENKINS_API_TOKEN }}
          job_name: "ephemeral-deployments/job/ephemeral-gateway-env-deploy-and-test"
          job_params: |
            {
              "gatewayDockerTag": "${{ needs.publish-docker.outputs.gateway-api-tag }}",
              "gatewayBranch": "${{ env.GATEWAY_BRANCH }}",
              "nodeDockerTag": "main"
            }
          job_timeout: "3600"
